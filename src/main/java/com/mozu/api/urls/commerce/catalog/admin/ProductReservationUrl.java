
/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.urls.commerce.catalog.admin;

import com.mozu.api.utils.UrlFormatter;


public class ProductReservationUrl
{

	/**
        * Get Resource Url for GetProductReservations
        * @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
        * @param pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
        * @param sortBy 
        * @param startIndex 
        * @return    String Resource Url
    */
	public static String getProductReservationsUrl(String filter, Integer pageSize, String sortBy, Integer startIndex)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/catalog/admin/productreservations/?startIndex={startIndex}&pageSize={pageSize}&sortBy={sortBy}&filter={filter}");
		formatter.formatUrl("filter", filter);
		formatter.formatUrl("pageSize", pageSize);
		formatter.formatUrl("sortBy", sortBy);
		formatter.formatUrl("startIndex", startIndex);
		return formatter.getResourceUrl();
	}

	/**
        * Get Resource Url for GetProductReservation
        * @param productReservationId Unique identifier of the product reservation.
        * @return    String Resource Url
    */
	public static String getProductReservationUrl(Integer productReservationId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/catalog/admin/productreservations/{productReservationId}");
		formatter.formatUrl("productReservationId", productReservationId);
		return formatter.getResourceUrl();
	}

		/**
        * Get Resource Url for AddProductReservation
        * @return    String Resource Url
    */
	public static String addProductReservationUrl()
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/catalog/admin/productreservations/");
		return formatter.getResourceUrl();
	}

	/**
        * Get Resource Url for CommitReservation
        * @param productReservationId Unique identifier of the reservation.
        * @param qty Number of product items to remove from inventory.
        * @return    String Resource Url
    */
	public static String commitReservationUrl(Integer productReservationId, Integer qty)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/catalog/admin/productreservations/{productReservationId}/commit/{qty}");
		formatter.formatUrl("productReservationId", productReservationId);
		formatter.formatUrl("qty", qty);
		return formatter.getResourceUrl();
	}

		/**
        * Get Resource Url for UpdateProductReservation
        * @param productReservationId Unique identifier of the product reservation to update. 
        * @return    String Resource Url
    */
	public static String updateProductReservationUrl(Integer productReservationId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/catalog/admin/productreservations/{productReservationId}");
		formatter.formatUrl("productReservationId", productReservationId);
		return formatter.getResourceUrl();
	}

		/**
        * Get Resource Url for DeleteProductReservation
        * @param productReservationId Unique identifier of the reservation.
        * @return    String Resource Url
    */
	public static String deleteProductReservationUrl(Integer productReservationId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/catalog/admin/productreservations/{productReservationId}");
		formatter.formatUrl("productReservationId", productReservationId);
		return formatter.getResourceUrl();
	}

	
}

