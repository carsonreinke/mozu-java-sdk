
/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.urls.commerce.orders.attributedefinition;

import com.mozu.api.utils.UrlFormatter;


public class AttributeSetUrl
{

	/**
        * Get Resource Url for GetAttributeSetByName
        * @param fqn The fully qualified name of the attribute, which is a user defined attribute identifier.
        * @return    String Resource Url
    */
	public static String getAttributeSetByNameUrl(String fqn)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributesets/?fqn={fqn}&");
		formatter.formatUrl("fqn", fqn);
		return formatter.getResourceUrl();
	}

	/**
        * Get Resource Url for GetAttributeSets
        * @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
        * @param pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
        * @param sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
        * @param startIndex Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
        * @return    String Resource Url
    */
	public static String getAttributeSetsUrl(String filter, Integer pageSize, String sortBy, Integer startIndex)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributesets/?startIndex={startIndex}&pageSize={pageSize}&sortBy={sortBy}&&filter={filter}");
		formatter.formatUrl("filter", filter);
		formatter.formatUrl("pageSize", pageSize);
		formatter.formatUrl("sortBy", sortBy);
		formatter.formatUrl("startIndex", startIndex);
		return formatter.getResourceUrl();
	}

	/**
        * Get Resource Url for GetAttributeSet
        * @param attributeSetId Identifier of the attribute set being retrieved.
        * @return    String Resource Url
    */
	public static String getAttributeSetUrl(Integer attributeSetId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributesets/{attributeSetId}");
		formatter.formatUrl("attributeSetId", attributeSetId);
		return formatter.getResourceUrl();
	}

		/**
        * Get Resource Url for CreateAttributeSet
        * @return    String Resource Url
    */
	public static String createAttributeSetUrl()
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributesets/");
		return formatter.getResourceUrl();
	}

		/**
        * Get Resource Url for UpdateAttributeSet
        * @param attributeSetId Identifier of the attribute set being updated.
        * @return    String Resource Url
    */
	public static String updateAttributeSetUrl(Integer attributeSetId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributesets/{attributeSetId}");
		formatter.formatUrl("attributeSetId", attributeSetId);
		return formatter.getResourceUrl();
	}

	/**
        * Get Resource Url for UpsertAttributeSetAssignment
        * @return    String Resource Url
    */
	public static String upsertAttributeSetAssignmentUrl()
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributesets/locations");
		return formatter.getResourceUrl();
	}

		/**
        * Get Resource Url for DeleteAttributeSet
        * @param attributeSetId Identifier of the attribute set being deleted.
        * @return    String Resource Url
    */
	public static String deleteAttributeSetUrl(Integer attributeSetId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributesets/{attributeSetId}");
		formatter.formatUrl("attributeSetId", attributeSetId);
		return formatter.getResourceUrl();
	}

	/**
        * Get Resource Url for RemoveAttributeSetAssignment
        * @param attributeSetId Identifier of the attribute set.
        * @param locationId Identifier of the location. Locations describe where in the application the attribute set definition will be rendered (such as a page).
        * @return    String Resource Url
    */
	public static String removeAttributeSetAssignmentUrl(Integer attributeSetId, Integer locationId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributesets/{attributesetid}/locations/{locationId}");
		formatter.formatUrl("attributeSetId", attributeSetId);
		formatter.formatUrl("locationId", locationId);
		return formatter.getResourceUrl();
	}

	/**
        * Get Resource Url for DeleteAttributeSetByName
        * @param fqn The fully qualified name of the attribute, which is a user defined attribute identifier.
        * @return    String Resource Url
    */
	public static String deleteAttributeSetByNameUrl(String fqn)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributesets/{fqn}");
		formatter.formatUrl("fqn", fqn);
		return formatter.getResourceUrl();
	}

	
}

