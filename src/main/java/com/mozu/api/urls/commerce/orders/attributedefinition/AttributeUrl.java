
/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.urls.commerce.orders.attributedefinition;

import com.mozu.api.utils.UrlFormatter;


public class AttributeUrl
{

	/**
        * Get Resource Url for GetAttributeByName
        * @param fqn The fully qualified name of the attribute, which is a user defined attribute identifier.
        * @return    String Resource Url
    */
	public static String getAttributeByNameUrl(String fqn)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributes/?namespace={namespace}&name={name}&");
		formatter.formatUrl("fqn", fqn);
		return formatter.getResourceUrl();
	}

	/**
        * Get Resource Url for GetAttributes
        * @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
        * @param pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
        * @param sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
        * @param startIndex Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
        * @return    String Resource Url
    */
	public static String getAttributesUrl(String filter, Integer pageSize, String sortBy, Integer startIndex)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributes/?startIndex={startIndex}&pageSize={pageSize}&sortBy={sortBy}&&filter={filter}");
		formatter.formatUrl("filter", filter);
		formatter.formatUrl("pageSize", pageSize);
		formatter.formatUrl("sortBy", sortBy);
		formatter.formatUrl("startIndex", startIndex);
		return formatter.getResourceUrl();
	}

	/**
        * Get Resource Url for GetAttribute
        * @param attributeId Identifier of the single order attribute to retrieve.
        * @return    String Resource Url
    */
	public static String getAttributeUrl(Integer attributeId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributes/{attributeId}");
		formatter.formatUrl("attributeId", attributeId);
		return formatter.getResourceUrl();
	}

		/**
        * Get Resource Url for CreateAttribute
        * @return    String Resource Url
    */
	public static String createAttributeUrl()
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributes/");
		return formatter.getResourceUrl();
	}

		/**
        * Get Resource Url for UpdateAttribute
        * @param attributeId Unique identifier of the attribute.
        * @return    String Resource Url
    */
	public static String updateAttributeUrl(Integer attributeId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributes/{attributeId}");
		formatter.formatUrl("attributeId", attributeId);
		return formatter.getResourceUrl();
	}

		/**
        * Get Resource Url for DeleteAttribute
        * @param attributeId Unique identifier of the attribute.
        * @return    String Resource Url
    */
	public static String deleteAttributeUrl(Integer attributeId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributes/{attributeId}");
		formatter.formatUrl("attributeId", attributeId);
		return formatter.getResourceUrl();
	}

	/**
        * Get Resource Url for DeleteAttributeByName
        * @param fqn The fully qualified name of the attribute, which is a user defined attribute identifier.
        * @return    String Resource Url
    */
	public static String deleteAttributeByNameUrl(String fqn)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/orders/attributedefinition/attributes/{attributeId}");
		formatter.formatUrl("fqn", fqn);
		return formatter.getResourceUrl();
	}

	
}

