
/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.urls.commerce.customer;

import com.mozu.api.utils.UrlFormatter;


public class CustomerGroupUrl
{

	/**
        * Get Resource Url for GetGroups
        * @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
        * @param pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
        * @param sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
        * @param startIndex Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
        * @return    String Resource Url
    */
	public static String getGroupsUrl(String filter, Integer pageSize, String sortBy, Integer startIndex)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/customer/groups/?startIndex={startIndex}&pageSize={pageSize}&sortBy={sortBy}&filter={filter}");
		formatter.formatUrl("filter", filter);
		formatter.formatUrl("pageSize", pageSize);
		formatter.formatUrl("sortBy", sortBy);
		formatter.formatUrl("startIndex", startIndex);
		return formatter.getResourceUrl();
	}

	/**
        * Get Resource Url for GetGroup
        * @param groupId Identifier of the customer group to retrieve.
        * @return    String Resource Url
    */
	public static String getGroupUrl(Integer groupId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/customer/groups/{groupId}");
		formatter.formatUrl("groupId", groupId);
		return formatter.getResourceUrl();
	}

		/**
        * Get Resource Url for AddGroup
        * @return    String Resource Url
    */
	public static String addGroupUrl()
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/customer/groups/");
		return formatter.getResourceUrl();
	}

		/**
        * Get Resource Url for UpdateGroup
        * @param groupId Identifier of the customer group to update.
        * @return    String Resource Url
    */
	public static String updateGroupUrl(Integer groupId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/customer/groups/{groupId}");
		formatter.formatUrl("groupId", groupId);
		return formatter.getResourceUrl();
	}

		/**
        * Get Resource Url for DeleteGroup
        * @param groupId Identifier of the customer group to delete.
        * @return    String Resource Url
    */
	public static String deleteGroupUrl(Integer groupId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/customer/groups/{groupId}");
		formatter.formatUrl("groupId", groupId);
		return formatter.getResourceUrl();
	}

	
}

