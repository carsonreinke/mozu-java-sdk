
/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.urls.commerce.customer;

import com.mozu.api.utils.UrlFormatter;


public class LocationUrl
{

	/**
        * Get Resource Url for GetLocation
        * @param locationId Identifier of the location being retrieved.
        * @return    String Resource Url
    */
	public static String getLocationUrl(Integer locationId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/customer/locations/locations/{locationId}");
		formatter.formatUrl("locationId", locationId);
		return formatter.getResourceUrl();
	}

	/**
        * Get Resource Url for GetLocationByName
        * @param name The name of the location.
        * @return    String Resource Url
    */
	public static String getLocationByNameUrl(String name)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/customer/locations/locations?name={name}&");
		formatter.formatUrl("name", name);
		return formatter.getResourceUrl();
	}

	/**
        * Get Resource Url for GetLocations
        * @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
        * @param pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
        * @param sortBy 
        * @param startIndex 
        * @return    String Resource Url
    */
	public static String getLocationsUrl(String filter, Integer pageSize, String sortBy, Integer startIndex)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/customer/locations/locations?pageIndex={startIndex}&pageSize={pageSize}&sortBy={sortBy}&&filter={filter}");
		formatter.formatUrl("filter", filter);
		formatter.formatUrl("pageSize", pageSize);
		formatter.formatUrl("sortBy", sortBy);
		formatter.formatUrl("startIndex", startIndex);
		return formatter.getResourceUrl();
	}

				
}

