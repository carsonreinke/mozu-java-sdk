
/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.urls.commerce.customer.accounts;

import com.mozu.api.utils.UrlFormatter;


public class CustomerGroupUrl
{

	/**
        * Get Resource Url for GetAccountGroups
        * @param accountId Unique identifier of the customer account.
        * @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
        * @param pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
        * @param sortBy 
        * @param startIndex 
        * @return    String Resource Url
    */
	public static String getAccountGroupsUrl(Integer accountId, String filter, Integer pageSize, String sortBy, Integer startIndex)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/customer/accounts/{accountId}/groups/?startIndex={startIndex}&pageSize={pageSize}&sortBy={sortBy}&filter={filter}");
		formatter.formatUrl("accountId", accountId);
		formatter.formatUrl("filter", filter);
		formatter.formatUrl("pageSize", pageSize);
		formatter.formatUrl("sortBy", sortBy);
		formatter.formatUrl("startIndex", startIndex);
		return formatter.getResourceUrl();
	}

	/**
        * Get Resource Url for GetAccountGroup
        * @param accountId Unique identifier of the customer account.
        * @param groupId Unique identifier of the customer group.
        * @return    String Resource Url
    */
	public static String getAccountGroupUrl(Integer accountId, Integer groupId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/customer/accounts/{accountId}/groups/{groupId}");
		formatter.formatUrl("accountId", accountId);
		formatter.formatUrl("groupId", groupId);
		return formatter.getResourceUrl();
	}

		/**
        * Get Resource Url for AddAccountGroup
        * @param accountId Unique identifier of the customer account to add to a group.
        * @param groupId Unique identifier of the customer group to add the customer to.
        * @return    String Resource Url
    */
	public static String addAccountGroupUrl(Integer accountId, Integer groupId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/customer/accounts/{accountId}/groups/{groupId}");
		formatter.formatUrl("accountId", accountId);
		formatter.formatUrl("groupId", groupId);
		return formatter.getResourceUrl();
	}

			/**
        * Get Resource Url for DeleteAccountGroup
        * @param accountId Unique identifier of the customer account to remove from the group.
        * @param groupId Unique identifier of the customer group.
        * @return    String Resource Url
    */
	public static String deleteAccountGroupUrl(Integer accountId, Integer groupId)
	{
		UrlFormatter formatter = new UrlFormatter("/api/commerce/customer/accounts/{accountId}/groups/{groupId}");
		formatter.formatUrl("accountId", accountId);
		formatter.formatUrl("groupId", groupId);
		return formatter.getResourceUrl();
	}

	
}

