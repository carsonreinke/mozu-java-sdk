
/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.contracts.commerceruntime.carts;

import java.util.ArrayList;
import java.io.Serializable;
import java.util.Date;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mozu.api.contracts.core.AuditInfo;
import com.mozu.api.contracts.commerceruntime.commerce.ChangeMessage;
import com.mozu.api.contracts.commerceruntime.carts.CartItem;
import com.mozu.api.contracts.commerceruntime.discounts.AppliedDiscount;
import com.mozu.api.contracts.commerceruntime.shipping.ShippingInfo;


/**
*	Properties of an active shopping cart.
*/
public class Cart implements Serializable
{
	/** Default Serial Version UID  */
	private static final long serialVersionUID = 1L;

	@JsonProperty("DiscountedSubtotal")
	protected Double discountedSubtotal;

	public Double getDiscountedSubtotal() {
		return this.discountedSubtotal;
	}

	public void setDiscountedSubtotal(Double discountedSubtotal) {
		this.discountedSubtotal = discountedSubtotal;
	}

	/**
	*The estimated total of the cart after all discounts have been applied.
	*/
	@JsonProperty("DiscountedTotal")
	protected Double discountedTotal;

	public Double getDiscountedTotal() {
		return this.discountedTotal;
	}

	public void setDiscountedTotal(Double discountedTotal) {
		this.discountedTotal = discountedTotal;
	}

	/**
	*Estimated amount of discounts applied to all items in the cart. Usually a negative dollar amount or number. System-supplied and read-only.
	*/
	@JsonProperty("DiscountTotal")
	protected Double discountTotal;

	public Double getDiscountTotal() {
		return this.discountTotal;
	}

	public void setDiscountTotal(Double discountTotal) {
		this.discountTotal = discountTotal;
	}

	/**
	*Date in UTC Date/Time when the cart becomes inactive based on a system-calculated interval. For example, if an anonymous shopper has 14 days of inactivity, the cart is considered abandoned after that period of inactivity. System-supplied and read-only.
	*/
	@JsonProperty("ExpirationDate")
	protected Date expirationDate;

	public Date getExpirationDate() {
		return this.expirationDate;
	}

	public void setExpirationDate(Date expirationDate) {
		this.expirationDate = expirationDate;
	}

	/**
	*The monetary sum of all fees incurred in the cart.
	*/
	@JsonProperty("FeeTotal")
	protected Double feeTotal;

	public Double getFeeTotal() {
		return this.feeTotal;
	}

	public void setFeeTotal(Double feeTotal) {
		this.feeTotal = feeTotal;
	}

	/**
	*If the handling fee for the cart is subject to sales tax, the total tax amount.
	*/
	@JsonProperty("HandlingTaxTotal")
	protected Double handlingTaxTotal;

	public Double getHandlingTaxTotal() {
		return this.handlingTaxTotal;
	}

	public void setHandlingTaxTotal(Double handlingTaxTotal) {
		this.handlingTaxTotal = handlingTaxTotal;
	}

	/**
	*Unique identifier of the shopping cart.
	*/
	@JsonProperty("Id")
	protected String id;

	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	/**
	*3-letter ISO 4217 standard global currency code. Currently, only "USD" (US Dollar) is supported.
	*/
	@JsonProperty("ISOCurrencyCode")
	protected String iSOCurrencyCode;

	public String getISOCurrencyCode() {
		return this.iSOCurrencyCode;
	}

	public void setISOCurrencyCode(String iSOCurrencyCode) {
		this.iSOCurrencyCode = iSOCurrencyCode;
	}

	/**
	*The total amount of tax for items in the cart.
	*/
	@JsonProperty("ItemTaxTotal")
	protected Double itemTaxTotal;

	public Double getItemTaxTotal() {
		return this.itemTaxTotal;
	}

	public void setItemTaxTotal(Double itemTaxTotal) {
		this.itemTaxTotal = itemTaxTotal;
	}

	/**
	*The date in UTC Date/Time when the items in the cart were last validated against the site's product catalog. System-supplied and read-only.
	*/
	@JsonProperty("LastValidationDate")
	protected Date lastValidationDate;

	public Date getLastValidationDate() {
		return this.lastValidationDate;
	}

	public void setLastValidationDate(Date lastValidationDate) {
		this.lastValidationDate = lastValidationDate;
	}

	@JsonProperty("ShippingSubTotal")
	protected Double shippingSubTotal;

	public Double getShippingSubTotal() {
		return this.shippingSubTotal;
	}

	public void setShippingSubTotal(Double shippingSubTotal) {
		this.shippingSubTotal = shippingSubTotal;
	}

	/**
	*The total amount of tax incurred on the shipping charges in the cart.
	*/
	@JsonProperty("ShippingTaxTotal")
	protected Double shippingTaxTotal;

	public Double getShippingTaxTotal() {
		return this.shippingTaxTotal;
	}

	public void setShippingTaxTotal(Double shippingTaxTotal) {
		this.shippingTaxTotal = shippingTaxTotal;
	}

	/**
	*The total shipping amount estimated for the cart.
	*/
	@JsonProperty("ShippingTotal")
	protected Double shippingTotal;

	public Double getShippingTotal() {
		return this.shippingTotal;
	}

	public void setShippingTotal(Double shippingTotal) {
		this.shippingTotal = shippingTotal;
	}

	/**
	*Unique identifier of the site group.
	*/
	@JsonProperty("SiteGroupId")
	protected Integer siteGroupId;

	public Integer getSiteGroupId() {
		return this.siteGroupId;
	}

	public void setSiteGroupId(Integer siteGroupId) {
		this.siteGroupId = siteGroupId;
	}

	/**
	*Unique identifier of the site.
	*/
	@JsonProperty("SiteId")
	protected Integer siteId;

	public Integer getSiteId() {
		return this.siteId;
	}

	public void setSiteId(Integer siteId) {
		this.siteId = siteId;
	}

	/**
	*Estimated amount of the cart without sales tax, shipping costs, and other fees.
	*/
	@JsonProperty("Subtotal")
	protected Double subtotal;

	public Double getSubtotal() {
		return this.subtotal;
	}

	public void setSubtotal(Double subtotal) {
		this.subtotal = subtotal;
	}

	/**
	*The total sum of sales tax estimated for a cart.
	*/
	@JsonProperty("TaxTotal")
	protected Double taxTotal;

	public Double getTaxTotal() {
		return this.taxTotal;
	}

	public void setTaxTotal(Double taxTotal) {
		this.taxTotal = taxTotal;
	}

	/**
	*Unique identifier of the Mozu tenant.
	*/
	@JsonProperty("TenantId")
	protected Integer tenantId;

	public Integer getTenantId() {
		return this.tenantId;
	}

	public void setTenantId(Integer tenantId) {
		this.tenantId = tenantId;
	}

	/**
	*Estimated total amount of the cart, including items, sales tax, shipping costs, and other fees.
	*/
	@JsonProperty("Total")
	protected Double total;

	public Double getTotal() {
		return this.total;
	}

	public void setTotal(Double total) {
		this.total = total;
	}

	/**
	*Unique identifier of the user associated with the shopping cart.
	*/
	@JsonProperty("UserId")
	protected String userId;

	public String getUserId() {
		return this.userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	@JsonProperty("AuditInfo")
	protected AuditInfo auditInfo;

	public AuditInfo getAuditInfo() {
		return this.auditInfo;
	}

	public void setAuditInfo(AuditInfo auditInfo) {
		this.auditInfo = auditInfo;
	}

	/**
	*Messages logged or created each time the cart was modified.
	*/
	@JsonProperty("ChangeMessages")
	protected ArrayList<ChangeMessage> changeMessages;
	public ArrayList<ChangeMessage> getChangeMessages() {
		return this.changeMessages;
	}
	public void setChangeMessages(ArrayList<ChangeMessage> changeMessages) {
		this.changeMessages = changeMessages;
	}

	/**
	*An array list of objects in the returned collection.
	*/
	@JsonProperty("Items")
	protected ArrayList<CartItem> items;
	public ArrayList<CartItem> getItems() {
		return this.items;
	}
	public void setItems(ArrayList<CartItem> items) {
		this.items = items;
	}

	/**
	*List of order-level discounts projected to apply to the cart at checkout.
	*/
	@JsonProperty("OrderDiscounts")
	protected ArrayList<AppliedDiscount> orderDiscounts;
	public ArrayList<AppliedDiscount> getOrderDiscounts() {
		return this.orderDiscounts;
	}
	public void setOrderDiscounts(ArrayList<AppliedDiscount> orderDiscounts) {
		this.orderDiscounts = orderDiscounts;
	}

	/**
	*Shipping information associated with the cart.
	*/
	@JsonProperty("ShippingInfo")
	protected ShippingInfo shippingInfo;

	public ShippingInfo getShippingInfo() {
		return this.shippingInfo;
	}

	public void setShippingInfo(ShippingInfo shippingInfo) {
		this.shippingInfo = shippingInfo;
	}

}
