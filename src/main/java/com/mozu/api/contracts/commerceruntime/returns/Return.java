
/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.contracts.commerceruntime.returns;

import java.util.ArrayList;
import java.io.Serializable;
import java.util.Date;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mozu.api.contracts.core.AuditInfo;
import com.mozu.api.contracts.commerceruntime.returns.ReturnItem;
import com.mozu.api.contracts.commerceruntime.orders.OrderNote;
import com.mozu.api.contracts.commerceruntime.shipping.Package;
import com.mozu.api.contracts.commerceruntime.payments.Payment;


/**
*	Properties of a return of one or more items shipped with a previously completed order.
*/
public class Return implements Serializable
{
	/** Default Serial Version UID  */
	private static final long serialVersionUID = 1L;

	/**
	*The actions a user can perform for the return at this time.
	*/
	@JsonProperty("AvailableActions")
	protected ArrayList<String> availableActions;
	public ArrayList<String> getAvailableActions() {
		return this.availableActions;
	}
	public void setAvailableActions(ArrayList<String> availableActions) {
		this.availableActions = availableActions;
	}

	/**
	*Unique identifier of the return.
	*/
	@JsonProperty("Id")
	protected String id;

	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@JsonProperty("LossTotal")
	protected Double lossTotal;

	public Double getLossTotal() {
		return this.lossTotal;
	}

	public void setLossTotal(Double lossTotal) {
		this.lossTotal = lossTotal;
	}

	/**
	*Unique identifier of the original completed order associated with this return.
	*/
	@JsonProperty("OriginalOrderId")
	protected String originalOrderId;

	public String getOriginalOrderId() {
		return this.originalOrderId;
	}

	public void setOriginalOrderId(String originalOrderId) {
		this.originalOrderId = originalOrderId;
	}

	@JsonProperty("ProductLossTaxTotal")
	protected Double productLossTaxTotal;

	public Double getProductLossTaxTotal() {
		return this.productLossTaxTotal;
	}

	public void setProductLossTaxTotal(Double productLossTaxTotal) {
		this.productLossTaxTotal = productLossTaxTotal;
	}

	@JsonProperty("ProductLossTotal")
	protected Double productLossTotal;

	public Double getProductLossTotal() {
		return this.productLossTotal;
	}

	public void setProductLossTotal(Double productLossTotal) {
		this.productLossTotal = productLossTotal;
	}

	/**
	*If a refund action was performed for this return, the total amount refunded to the shopper. The refund amount can differ from the sum of the price of the returned items.
	*/
	@JsonProperty("RefundAmount")
	protected Double refundAmount;

	public Double getRefundAmount() {
		return this.refundAmount;
	}

	public void setRefundAmount(Double refundAmount) {
		this.refundAmount = refundAmount;
	}

	/**
	*A merchant-specific identifier used to sequentially order returns.
	*/
	@JsonProperty("ReturnNumber")
	protected Integer returnNumber;

	public Integer getReturnNumber() {
		return this.returnNumber;
	}

	public void setReturnNumber(Integer returnNumber) {
		this.returnNumber = returnNumber;
	}

	/**
	*Unique identifier for the order created as a result of the return. If the return results in shipping a replacement item, the order includes shipment information for the replaced items. If the return results in a refund, the order includes payment transactions to credit the shopper.
	*/
	@JsonProperty("ReturnOrderId")
	protected String returnOrderId;

	public String getReturnOrderId() {
		return this.returnOrderId;
	}

	public void setReturnOrderId(String returnOrderId) {
		this.returnOrderId = returnOrderId;
	}

	/**
	*The type of return, which is "Refund" or "Replace".
	*/
	@JsonProperty("ReturnType")
	protected String returnType;

	public String getReturnType() {
		return this.returnType;
	}

	public void setReturnType(String returnType) {
		this.returnType = returnType;
	}

	/**
	*The date by which a shopper must ship items associated with a return in an "awaiting items" state to the merchant.
	*/
	@JsonProperty("RMADeadline")
	protected Date rMADeadline;

	public Date getRMADeadline() {
		return this.rMADeadline;
	}

	public void setRMADeadline(Date rMADeadline) {
		this.rMADeadline = rMADeadline;
	}

	@JsonProperty("ShippingLossTaxTotal")
	protected Double shippingLossTaxTotal;

	public Double getShippingLossTaxTotal() {
		return this.shippingLossTaxTotal;
	}

	public void setShippingLossTaxTotal(Double shippingLossTaxTotal) {
		this.shippingLossTaxTotal = shippingLossTaxTotal;
	}

	@JsonProperty("ShippingLossTotal")
	protected Double shippingLossTotal;

	public Double getShippingLossTotal() {
		return this.shippingLossTotal;
	}

	public void setShippingLossTotal(Double shippingLossTotal) {
		this.shippingLossTotal = shippingLossTotal;
	}

	@JsonProperty("SiteGroupId")
	protected Integer siteGroupId;

	public Integer getSiteGroupId() {
		return this.siteGroupId;
	}

	public void setSiteGroupId(Integer siteGroupId) {
		this.siteGroupId = siteGroupId;
	}

	@JsonProperty("SiteId")
	protected Integer siteId;

	public Integer getSiteId() {
		return this.siteId;
	}

	public void setSiteId(Integer siteId) {
		this.siteId = siteId;
	}

	/**
	*Current status of the return, such as "ReturnAuthorized".
	*/
	@JsonProperty("Status")
	protected String status;

	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@JsonProperty("TenantId")
	protected Integer tenantId;

	public Integer getTenantId() {
		return this.tenantId;
	}

	public void setTenantId(Integer tenantId) {
		this.tenantId = tenantId;
	}

	/**
	*Unique identifier of the user responsible for the return. Read only and supplied by the original order.
	*/
	@JsonProperty("UserId")
	protected String userId;

	public String getUserId() {
		return this.userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	@JsonProperty("AuditInfo")
	protected AuditInfo auditInfo;

	public AuditInfo getAuditInfo() {
		return this.auditInfo;
	}

	public void setAuditInfo(AuditInfo auditInfo) {
		this.auditInfo = auditInfo;
	}

	/**
	*An array list of objects in the returned collection.
	*/
	@JsonProperty("Items")
	protected ArrayList<ReturnItem> items;
	public ArrayList<ReturnItem> getItems() {
		return this.items;
	}
	public void setItems(ArrayList<ReturnItem> items) {
		this.items = items;
	}

	/**
	*Collection of merchant-supplied notes entered for the return.
	*/
	@JsonProperty("Notes")
	protected ArrayList<OrderNote> notes;
	public ArrayList<OrderNote> getNotes() {
		return this.notes;
	}
	public void setNotes(ArrayList<OrderNote> notes) {
		this.notes = notes;
	}

	/**
	*List of packages associated with a replacement order for a return.
	*/
	@JsonProperty("Packages")
	protected ArrayList<Package> packages;
	public ArrayList<Package> getPackages() {
		return this.packages;
	}
	public void setPackages(ArrayList<Package> packages) {
		this.packages = packages;
	}

	/**
	*Array of payments associated with this return, if applicable.
	*/
	@JsonProperty("Payments")
	protected ArrayList<Payment> payments;
	public ArrayList<Payment> getPayments() {
		return this.payments;
	}
	public void setPayments(ArrayList<Payment> payments) {
		this.payments = payments;
	}

}
