
/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.contracts.commerceruntime.orders;

import java.util.ArrayList;
import java.io.Serializable;
import java.util.Date;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mozu.api.contracts.core.AuditInfo;
import com.mozu.api.contracts.commerceruntime.products.Product;
import com.mozu.api.contracts.commerceruntime.discounts.AppliedProductDiscount;
import com.mozu.api.contracts.commerceruntime.discounts.ShippingDiscount;
import com.mozu.api.contracts.commerceruntime.commerce.CommerceUnitPrice;


/**
*	The details associated with a specific item in an order.
*/
public class OrderItem implements Serializable
{
	/** Default Serial Version UID  */
	private static final long serialVersionUID = 1L;

	@JsonProperty("DiscountedTotal")
	protected Double discountedTotal;

	public Double getDiscountedTotal() {
		return this.discountedTotal;
	}

	public void setDiscountedTotal(Double discountedTotal) {
		this.discountedTotal = discountedTotal;
	}

	/**
	*Amount of discounts applied to an item in an order. Usually a negative dollar amount or number. System-supplied and read-only.
	*/
	@JsonProperty("DiscountTotal")
	protected Double discountTotal;

	public Double getDiscountTotal() {
		return this.discountTotal;
	}

	public void setDiscountTotal(Double discountTotal) {
		this.discountTotal = discountTotal;
	}

	@JsonProperty("ExtendedTotal")
	protected Double extendedTotal;

	public Double getExtendedTotal() {
		return this.extendedTotal;
	}

	public void setExtendedTotal(Double extendedTotal) {
		this.extendedTotal = extendedTotal;
	}

	/**
	*The total monetary sum of all fees incurred for an item in an order.
	*/
	@JsonProperty("FeeTotal")
	protected Double feeTotal;

	public Double getFeeTotal() {
		return this.feeTotal;
	}

	public void setFeeTotal(Double feeTotal) {
		this.feeTotal = feeTotal;
	}

	/**
	*Unique identifier of a specific item in an order.
	*/
	@JsonProperty("Id")
	protected String id;

	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	/**
	*If true, the item in the order can be purchased or fulfilled at regular intervals such as a monthly billing cycle or a digital or physical subscription.
	*/
	@JsonProperty("IsRecurring")
	protected Boolean isRecurring;

	public Boolean getIsRecurring() {
		return this.isRecurring;
	}

	public void setIsRecurring(Boolean isRecurring) {
		this.isRecurring = isRecurring;
	}

	/**
	*If true, the entity is subject to tax based on the relevant tax rate.
	*/
	@JsonProperty("IsTaxable")
	protected Boolean isTaxable;

	public Boolean getIsTaxable() {
		return this.isTaxable;
	}

	public void setIsTaxable(Boolean isTaxable) {
		this.isTaxable = isTaxable;
	}

	/**
	*The total amount of tax that applied to an item in an order.
	*/
	@JsonProperty("ItemTaxTotal")
	protected Double itemTaxTotal;

	public Double getItemTaxTotal() {
		return this.itemTaxTotal;
	}

	public void setItemTaxTotal(Double itemTaxTotal) {
		this.itemTaxTotal = itemTaxTotal;
	}

	/**
	*Language used for the entity. Currently, only "en-US" is supported.
	*/
	@JsonProperty("LocaleCode")
	protected String localeCode;

	public String getLocaleCode() {
		return this.localeCode;
	}

	public void setLocaleCode(String localeCode) {
		this.localeCode = localeCode;
	}

	/**
	*The unique identifier of the item when it was applied to a cart, prior to checkout, when the cart became an order.
	*/
	@JsonProperty("OriginalCartItemId")
	protected String originalCartItemId;

	public String getOriginalCartItemId() {
		return this.originalCartItemId;
	}

	public void setOriginalCartItemId(String originalCartItemId) {
		this.originalCartItemId = originalCartItemId;
	}

	/**
	*The unique identifier of the product reservation for the item in an order.
	*/
	@JsonProperty("ProductReservationId")
	protected Integer productReservationId;

	public Integer getProductReservationId() {
		return this.productReservationId;
	}

	public void setProductReservationId(Integer productReservationId) {
		this.productReservationId = productReservationId;
	}

	/**
	*The quantity of a specific item in an order.
	*/
	@JsonProperty("Quantity")
	protected Integer quantity;

	public Integer getQuantity() {
		return this.quantity;
	}

	public void setQuantity(Integer quantity) {
		this.quantity = quantity;
	}

	/**
	*The total amount of sales tax incurred for shipping charges associated with this item in a cart.
	*/
	@JsonProperty("ShippingTaxTotal")
	protected Double shippingTaxTotal;

	public Double getShippingTaxTotal() {
		return this.shippingTaxTotal;
	}

	public void setShippingTaxTotal(Double shippingTaxTotal) {
		this.shippingTaxTotal = shippingTaxTotal;
	}

	/**
	*Total amount of shipping fees associated with the specified item in the order.
	*/
	@JsonProperty("ShippingTotal")
	protected Double shippingTotal;

	public Double getShippingTotal() {
		return this.shippingTotal;
	}

	public void setShippingTotal(Double shippingTotal) {
		this.shippingTotal = shippingTotal;
	}

	/**
	*Amount of the item in the order without sales tax, shipping costs, and other fees.
	*/
	@JsonProperty("Subtotal")
	protected Double subtotal;

	public Double getSubtotal() {
		return this.subtotal;
	}

	public void setSubtotal(Double subtotal) {
		this.subtotal = subtotal;
	}

	/**
	*The amount of the item in the order that is subject to tax. This amount typically represents the order item subtotal before applied discounts.
	*/
	@JsonProperty("TaxableTotal")
	protected Double taxableTotal;

	public Double getTaxableTotal() {
		return this.taxableTotal;
	}

	public void setTaxableTotal(Double taxableTotal) {
		this.taxableTotal = taxableTotal;
	}

	/**
	*The total monetary sum of a specific item in an order.
	*/
	@JsonProperty("Total")
	protected Double total;

	public Double getTotal() {
		return this.total;
	}

	public void setTotal(Double total) {
		this.total = total;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	@JsonProperty("AuditInfo")
	protected AuditInfo auditInfo;

	public AuditInfo getAuditInfo() {
		return this.auditInfo;
	}

	public void setAuditInfo(AuditInfo auditInfo) {
		this.auditInfo = auditInfo;
	}

	/**
	*The product properties of an item in an order.
	*/
	@JsonProperty("Product")
	protected Product product;

	public Product getProduct() {
		return this.product;
	}

	public void setProduct(Product product) {
		this.product = product;
	}

	/**
	*List of product discounts that apply to the item in the order.
	*/
	@JsonProperty("ProductDiscounts")
	protected ArrayList<AppliedProductDiscount> productDiscounts;
	public ArrayList<AppliedProductDiscount> getProductDiscounts() {
		return this.productDiscounts;
	}
	public void setProductDiscounts(ArrayList<AppliedProductDiscount> productDiscounts) {
		this.productDiscounts = productDiscounts;
	}

	/**
	*List of shipping discounts that apply to the item in the order.
	*/
	@JsonProperty("ShippingDiscounts")
	protected ArrayList<ShippingDiscount> shippingDiscounts;
	public ArrayList<ShippingDiscount> getShippingDiscounts() {
		return this.shippingDiscounts;
	}
	public void setShippingDiscounts(ArrayList<ShippingDiscount> shippingDiscounts) {
		this.shippingDiscounts = shippingDiscounts;
	}

	/**
	*Properties of the unit price associated with the order item.
	*/
	@JsonProperty("UnitPrice")
	protected CommerceUnitPrice unitPrice;

	public CommerceUnitPrice getUnitPrice() {
		return this.unitPrice;
	}

	public void setUnitPrice(CommerceUnitPrice unitPrice) {
		this.unitPrice = unitPrice;
	}

}
