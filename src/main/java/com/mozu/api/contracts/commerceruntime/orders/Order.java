
/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.contracts.commerceruntime.orders;

import java.util.ArrayList;
import java.io.Serializable;
import java.util.Date;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mozu.api.contracts.commerceruntime.commerce.Adjustment;
import com.mozu.api.contracts.commerceruntime.orders.OrderAttribute;
import com.mozu.api.contracts.core.AuditInfo;
import com.mozu.api.contracts.commerceruntime.payments.BillingInfo;
import com.mozu.api.contracts.commerceruntime.commerce.ChangeMessage;
import com.mozu.api.contracts.commerceruntime.orders.OrderItem;
import com.mozu.api.contracts.commerceruntime.orders.OrderNote;
import com.mozu.api.contracts.commerceruntime.discounts.AppliedDiscount;
import com.mozu.api.contracts.commerceruntime.shipping.Package;
import com.mozu.api.contracts.commerceruntime.payments.Payment;
import com.mozu.api.contracts.commerceruntime.discounts.ShippingDiscount;
import com.mozu.api.contracts.commerceruntime.shipping.ShippingInfo;
import com.mozu.api.contracts.commerceruntime.orders.ShopperNotes;


/**
*	All of the properties of the specified order.
*/
public class Order implements Serializable
{
	/** Default Serial Version UID  */
	private static final long serialVersionUID = 1L;

	/**
	*The available order, payment, and shipment actions a user can perform for the order.
	*/
	@JsonProperty("AvailableActions")
	protected ArrayList<String> availableActions;
	public ArrayList<String> getAvailableActions() {
		return this.availableActions;
	}
	public void setAvailableActions(ArrayList<String> availableActions) {
		this.availableActions = availableActions;
	}

	/**
	*Date when the order was cancelled. System-supplied and read-only.
	*/
	@JsonProperty("CancelledDate")
	protected Date cancelledDate;

	public Date getCancelledDate() {
		return this.cancelledDate;
	}

	public void setCancelledDate(Date cancelledDate) {
		this.cancelledDate = cancelledDate;
	}

	/**
	*Date when the order was closed. Closed order is an order that has been processed and the items shipped. System-supplied and read-only.
	*/
	@JsonProperty("ClosedDate")
	protected Date closedDate;

	public Date getClosedDate() {
		return this.closedDate;
	}

	public void setClosedDate(Date closedDate) {
		this.closedDate = closedDate;
	}

	/**
	*Numeric identifer of the customer account.
	*/
	@JsonProperty("CustomerAccountId")
	protected Integer customerAccountId;

	public Integer getCustomerAccountId() {
		return this.customerAccountId;
	}

	public void setCustomerAccountId(Integer customerAccountId) {
		this.customerAccountId = customerAccountId;
	}

	@JsonProperty("DiscountedSubtotal")
	protected Double discountedSubtotal;

	public Double getDiscountedSubtotal() {
		return this.discountedSubtotal;
	}

	public void setDiscountedSubtotal(Double discountedSubtotal) {
		this.discountedSubtotal = discountedSubtotal;
	}

	/**
	*The total amount of the order after all applicable discounts have been applied.
	*/
	@JsonProperty("DiscountedTotal")
	protected Double discountedTotal;

	public Double getDiscountedTotal() {
		return this.discountedTotal;
	}

	public void setDiscountedTotal(Double discountedTotal) {
		this.discountedTotal = discountedTotal;
	}

	/**
	*Amount of discounts applied to all items in an order. Usually a negative dollar amount or number. System-supplied and read-only.
	*/
	@JsonProperty("DiscountTotal")
	protected Double discountTotal;

	public Double getDiscountTotal() {
		return this.discountTotal;
	}

	public void setDiscountTotal(Double discountTotal) {
		this.discountTotal = discountTotal;
	}

	/**
	*The email address of the specified user or the email address associated with the specified entity.
	*/
	@JsonProperty("Email")
	protected String email;

	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	/**
	*The date when the order will no longer be active or considered abandoned. For example, if a guest or anonymous shoppper has 14 days of inactivity, the order is considered abandoned after that period of inactivity. An order never expires for shoppers who are logged into their account. Date in UTC Date/Time. System-supplied and read-only.
	*/
	@JsonProperty("ExpirationDate")
	protected Date expirationDate;

	public Date getExpirationDate() {
		return this.expirationDate;
	}

	public void setExpirationDate(Date expirationDate) {
		this.expirationDate = expirationDate;
	}

	/**
	*The monetary sum of all fees incurred in the order.
	*/
	@JsonProperty("FeeTotal")
	protected Double feeTotal;

	public Double getFeeTotal() {
		return this.feeTotal;
	}

	public void setFeeTotal(Double feeTotal) {
		this.feeTotal = feeTotal;
	}

	/**
	*The combined price for all items in the order, including all selected options but excluding any discounts.
	*/
	@JsonProperty("HandlingAmount")
	protected Double handlingAmount;

	public Double getHandlingAmount() {
		return this.handlingAmount;
	}

	public void setHandlingAmount(Double handlingAmount) {
		this.handlingAmount = handlingAmount;
	}

	/**
	*If the handling fee for the order is subject to sales tax, the total tax amount.
	*/
	@JsonProperty("HandlingTaxTotal")
	protected Double handlingTaxTotal;

	public Double getHandlingTaxTotal() {
		return this.handlingTaxTotal;
	}

	public void setHandlingTaxTotal(Double handlingTaxTotal) {
		this.handlingTaxTotal = handlingTaxTotal;
	}

	/**
	*If true, the order has a draft that may include one or more uncommitted changes to the order or its components.
	*/
	@JsonProperty("HasDraft")
	protected Boolean hasDraft;

	public Boolean getHasDraft() {
		return this.hasDraft;
	}

	public void setHasDraft(Boolean hasDraft) {
		this.hasDraft = hasDraft;
	}

	/**
	*Identifier of the order.
	*/
	@JsonProperty("Id")
	protected String id;

	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	/**
	*The IP address from which the order originated.
	*/
	@JsonProperty("IPAddress")
	protected String iPAddress;

	public String getIPAddress() {
		return this.iPAddress;
	}

	public void setIPAddress(String iPAddress) {
		this.iPAddress = iPAddress;
	}

	/**
	*If true, this version of the order is a draft that might contain uncommitted changes.
	*/
	@JsonProperty("IsDraft")
	protected Boolean isDraft;

	public Boolean getIsDraft() {
		return this.isDraft;
	}

	public void setIsDraft(Boolean isDraft) {
		this.isDraft = isDraft;
	}

	/**
	*3-letter ISO 4217 standard global currency code. Currently, only "USD" (US Dollar) is supported.
	*/
	@JsonProperty("ISOCurrencyCode")
	protected String iSOCurrencyCode;

	public String getISOCurrencyCode() {
		return this.iSOCurrencyCode;
	}

	public void setISOCurrencyCode(String iSOCurrencyCode) {
		this.iSOCurrencyCode = iSOCurrencyCode;
	}

	/**
	*If true, the order is exempt from applied sales tax.
	*/
	@JsonProperty("IsTaxExempt")
	protected Boolean isTaxExempt;

	public Boolean getIsTaxExempt() {
		return this.isTaxExempt;
	}

	public void setIsTaxExempt(Boolean isTaxExempt) {
		this.isTaxExempt = isTaxExempt;
	}

	/**
	*The total amount of tax applied to items in the order.
	*/
	@JsonProperty("ItemTaxTotal")
	protected Double itemTaxTotal;

	public Double getItemTaxTotal() {
		return this.itemTaxTotal;
	}

	public void setItemTaxTotal(Double itemTaxTotal) {
		this.itemTaxTotal = itemTaxTotal;
	}

	/**
	*The date when the order was last validated against the product catalog. Date in UTC Date/Time. System-supplied and read-only.
	*/
	@JsonProperty("LastValidationDate")
	protected Date lastValidationDate;

	public Date getLastValidationDate() {
		return this.lastValidationDate;
	}

	public void setLastValidationDate(Date lastValidationDate) {
		this.lastValidationDate = lastValidationDate;
	}

	@JsonProperty("LocationCode")
	protected String locationCode;

	public String getLocationCode() {
		return this.locationCode;
	}

	public void setLocationCode(String locationCode) {
		this.locationCode = locationCode;
	}

	/**
	*The order number that displays on the storefront which differs from the order ID.
	*/
	@JsonProperty("OrderNumber")
	protected Integer orderNumber;

	public Integer getOrderNumber() {
		return this.orderNumber;
	}

	public void setOrderNumber(Integer orderNumber) {
		this.orderNumber = orderNumber;
	}

	/**
	*Identifier of the cart prior to the customer proceeding to checkout.
	*/
	@JsonProperty("OriginalCartId")
	protected String originalCartId;

	public String getOriginalCartId() {
		return this.originalCartId;
	}

	public void setOriginalCartId(String originalCartId) {
		this.originalCartId = originalCartId;
	}

	/**
	*If this order was created to fulfill an item replacement as part of a return merchandise authorization (RMA), the unique identifier of the return.
	*/
	@JsonProperty("ParentReturnId")
	protected String parentReturnId;

	public String getParentReturnId() {
		return this.parentReturnId;
	}

	public void setParentReturnId(String parentReturnId) {
		this.parentReturnId = parentReturnId;
	}

	/**
	*Status of the payment for the specified order.
	*/
	@JsonProperty("PaymentStatus")
	protected String paymentStatus;

	public String getPaymentStatus() {
		return this.paymentStatus;
	}

	public void setPaymentStatus(String paymentStatus) {
		this.paymentStatus = paymentStatus;
	}

	/**
	*Status of any returns associated with this order after it was completed.
	*/
	@JsonProperty("ReturnStatus")
	protected String returnStatus;

	public String getReturnStatus() {
		return this.returnStatus;
	}

	public void setReturnStatus(String returnStatus) {
		this.returnStatus = returnStatus;
	}

	/**
	*The current status of the shipment of this order. Possible values are "Fulfilled" if the order has shipped and "Not Fulfilled" if the order has not shipped. At this time, an order cannot be partially shipped. System-supplied and read-only.
	*/
	@JsonProperty("ShipmentStatus")
	protected String shipmentStatus;

	public String getShipmentStatus() {
		return this.shipmentStatus;
	}

	public void setShipmentStatus(String shipmentStatus) {
		this.shipmentStatus = shipmentStatus;
	}

	@JsonProperty("ShippingSubTotal")
	protected Double shippingSubTotal;

	public Double getShippingSubTotal() {
		return this.shippingSubTotal;
	}

	public void setShippingSubTotal(Double shippingSubTotal) {
		this.shippingSubTotal = shippingSubTotal;
	}

	/**
	*The total amount of sales tax incurred for shipping charges on the order.
	*/
	@JsonProperty("ShippingTaxTotal")
	protected Double shippingTaxTotal;

	public Double getShippingTaxTotal() {
		return this.shippingTaxTotal;
	}

	public void setShippingTaxTotal(Double shippingTaxTotal) {
		this.shippingTaxTotal = shippingTaxTotal;
	}

	/**
	*Amount of the shipping fees for the order.
	*/
	@JsonProperty("ShippingTotal")
	protected Double shippingTotal;

	public Double getShippingTotal() {
		return this.shippingTotal;
	}

	public void setShippingTotal(Double shippingTotal) {
		this.shippingTotal = shippingTotal;
	}

	/**
	*Unique identifier of the site group.
	*/
	@JsonProperty("SiteGroupId")
	protected Integer siteGroupId;

	public Integer getSiteGroupId() {
		return this.siteGroupId;
	}

	public void setSiteGroupId(Integer siteGroupId) {
		this.siteGroupId = siteGroupId;
	}

	/**
	*Unique identifier of the site.
	*/
	@JsonProperty("SiteId")
	protected Integer siteId;

	public Integer getSiteId() {
		return this.siteId;
	}

	public void setSiteId(Integer siteId) {
		this.siteId = siteId;
	}

	/**
	*The device from which the order originated in the case of offline orders.
	*/
	@JsonProperty("SourceDevice")
	protected String sourceDevice;

	public String getSourceDevice() {
		return this.sourceDevice;
	}

	public void setSourceDevice(String sourceDevice) {
		this.sourceDevice = sourceDevice;
	}

	/**
	*The current status of this order. Possible values are "New", "Open", "Processing", "Closed", or "Cancelled". System-supplied and read-only.
	*/
	@JsonProperty("Status")
	protected String status;

	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	/**
	*The date and time the order was submitted. System-supplied and read-only.
	*/
	@JsonProperty("SubmittedDate")
	protected Date submittedDate;

	public Date getSubmittedDate() {
		return this.submittedDate;
	}

	public void setSubmittedDate(Date submittedDate) {
		this.submittedDate = submittedDate;
	}

	/**
	*Amount of the order without sales tax, shipping costs, and other fees.
	*/
	@JsonProperty("Subtotal")
	protected Double subtotal;

	public Double getSubtotal() {
		return this.subtotal;
	}

	public void setSubtotal(Double subtotal) {
		this.subtotal = subtotal;
	}

	/**
	*The total monetary sum of sales tax for the order.
	*/
	@JsonProperty("TaxTotal")
	protected Double taxTotal;

	public Double getTaxTotal() {
		return this.taxTotal;
	}

	public void setTaxTotal(Double taxTotal) {
		this.taxTotal = taxTotal;
	}

	/**
	*Unique identifier of the Mozu tenant.
	*/
	@JsonProperty("TenantId")
	protected Integer tenantId;

	public Integer getTenantId() {
		return this.tenantId;
	}

	public void setTenantId(Integer tenantId) {
		this.tenantId = tenantId;
	}

	/**
	*Amount of the order, including items, sales tax, shipping costs, and other fees.
	*/
	@JsonProperty("Total")
	protected Double total;

	public Double getTotal() {
		return this.total;
	}

	public void setTotal(Double total) {
		this.total = total;
	}

	/**
	*The total amount collected to date for the order.
	*/
	@JsonProperty("TotalCollected")
	protected Double totalCollected;

	public Double getTotalCollected() {
		return this.totalCollected;
	}

	public void setTotalCollected(Double totalCollected) {
		this.totalCollected = totalCollected;
	}

	/**
	*The current version number of the order.
	*/
	@JsonProperty("Version")
	protected String version;

	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	@JsonProperty("VisitId")
	protected String visitId;

	public String getVisitId() {
		return this.visitId;
	}

	public void setVisitId(String visitId) {
		this.visitId = visitId;
	}

	@JsonProperty("WebSessionId")
	protected String webSessionId;

	public String getWebSessionId() {
		return this.webSessionId;
	}

	public void setWebSessionId(String webSessionId) {
		this.webSessionId = webSessionId;
	}

	/**
	*Properties of an ad-hoc price adjustment for an order.
	*/
	@JsonProperty("Adjustment")
	protected Adjustment adjustment;

	public Adjustment getAdjustment() {
		return this.adjustment;
	}

	public void setAdjustment(Adjustment adjustment) {
		this.adjustment = adjustment;
	}

	/**
	*Paged list collection of order attributes.
	*/
	@JsonProperty("Attributes")
	protected ArrayList<OrderAttribute> attributes;
	public ArrayList<OrderAttribute> getAttributes() {
		return this.attributes;
	}
	public void setAttributes(ArrayList<OrderAttribute> attributes) {
		this.attributes = attributes;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	@JsonProperty("AuditInfo")
	protected AuditInfo auditInfo;

	public AuditInfo getAuditInfo() {
		return this.auditInfo;
	}

	public void setAuditInfo(AuditInfo auditInfo) {
		this.auditInfo = auditInfo;
	}

	/**
	*Container for the customer billing information associated with an order.
	*/
	@JsonProperty("BillingInfo")
	protected BillingInfo billingInfo;

	public BillingInfo getBillingInfo() {
		return this.billingInfo;
	}

	public void setBillingInfo(BillingInfo billingInfo) {
		this.billingInfo = billingInfo;
	}

	/**
	*Paged list of notes entered when the order was modified.
	*/
	@JsonProperty("ChangeMessages")
	protected ArrayList<ChangeMessage> changeMessages;
	public ArrayList<ChangeMessage> getChangeMessages() {
		return this.changeMessages;
	}
	public void setChangeMessages(ArrayList<ChangeMessage> changeMessages) {
		this.changeMessages = changeMessages;
	}

	/**
	*An array list of objects in the returned collection.
	*/
	@JsonProperty("Items")
	protected ArrayList<OrderItem> items;
	public ArrayList<OrderItem> getItems() {
		return this.items;
	}
	public void setItems(ArrayList<OrderItem> items) {
		this.items = items;
	}

	/**
	*Paged list collection of order notes.
	*/
	@JsonProperty("Notes")
	protected ArrayList<OrderNote> notes;
	public ArrayList<OrderNote> getNotes() {
		return this.notes;
	}
	public void setNotes(ArrayList<OrderNote> notes) {
		this.notes = notes;
	}

	/**
	*List of order-level discounts that apply to the order.
	*/
	@JsonProperty("OrderDiscounts")
	protected ArrayList<AppliedDiscount> orderDiscounts;
	public ArrayList<AppliedDiscount> getOrderDiscounts() {
		return this.orderDiscounts;
	}
	public void setOrderDiscounts(ArrayList<AppliedDiscount> orderDiscounts) {
		this.orderDiscounts = orderDiscounts;
	}

	/**
	*Wrapper for the physical packages shipped for the specified order.
	*/
	@JsonProperty("Packages")
	protected ArrayList<Package> packages;
	public ArrayList<Package> getPackages() {
		return this.packages;
	}
	public void setPackages(ArrayList<Package> packages) {
		this.packages = packages;
	}

	/**
	*Wrapper for a collection of payments associated with this order. An order can include any number of payments.
	*/
	@JsonProperty("Payments")
	protected ArrayList<Payment> payments;
	public ArrayList<Payment> getPayments() {
		return this.payments;
	}
	public void setPayments(ArrayList<Payment> payments) {
		this.payments = payments;
	}

	/**
	*Properties of an ad-hoc price adjustment made for an order.
	*/
	@JsonProperty("ShippingAdjustment")
	protected Adjustment shippingAdjustment;

	public Adjustment getShippingAdjustment() {
		return this.shippingAdjustment;
	}

	public void setShippingAdjustment(Adjustment shippingAdjustment) {
		this.shippingAdjustment = shippingAdjustment;
	}

	/**
	*List of shipping discounts to apply to the order.
	*/
	@JsonProperty("ShippingDiscounts")
	protected ArrayList<ShippingDiscount> shippingDiscounts;
	public ArrayList<ShippingDiscount> getShippingDiscounts() {
		return this.shippingDiscounts;
	}
	public void setShippingDiscounts(ArrayList<ShippingDiscount> shippingDiscounts) {
		this.shippingDiscounts = shippingDiscounts;
	}

	/**
	*Container for the shipping information associated with the order.
	*/
	@JsonProperty("ShippingInfo")
	protected ShippingInfo shippingInfo;

	public ShippingInfo getShippingInfo() {
		return this.shippingInfo;
	}

	public void setShippingInfo(ShippingInfo shippingInfo) {
		this.shippingInfo = shippingInfo;
	}

	/**
	*A paged list collection of shopper notes for the order.
	*/
	@JsonProperty("ShopperNotes")
	protected ShopperNotes shopperNotes;

	public ShopperNotes getShopperNotes() {
		return this.shopperNotes;
	}

	public void setShopperNotes(ShopperNotes shopperNotes) {
		this.shopperNotes = shopperNotes;
	}

}
