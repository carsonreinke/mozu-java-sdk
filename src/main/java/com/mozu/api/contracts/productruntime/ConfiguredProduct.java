
/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.contracts.productruntime;

import java.util.ArrayList;
import java.io.Serializable;
import java.util.Date;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mozu.api.contracts.productruntime.Discount;
import com.mozu.api.contracts.productruntime.PackageMeasurements;
import com.mozu.api.contracts.productruntime.ProductOption;
import com.mozu.api.contracts.productruntime.ProductPrice;
import com.mozu.api.contracts.productruntime.ProductPriceRange;
import com.mozu.api.contracts.productruntime.ProductPurchasableState;
import com.mozu.api.contracts.productruntime.ProductStock;


/**
*	Properties of a created product selection.
*/
public class ConfiguredProduct implements Serializable
{
	/** Default Serial Version UID  */
	private static final long serialVersionUID = 1L;

	/**
	*Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	*/
	@JsonProperty("ProductCode")
	protected String productCode;

	public String getProductCode() {
		return this.productCode;
	}

	public void setProductCode(String productCode) {
		this.productCode = productCode;
	}

	/**
	*Merchant-created code associated with a specific product variation. Variation product codes maintain an association with the base product code.
	*/
	@JsonProperty("VariationProductCode")
	protected String variationProductCode;

	public String getVariationProductCode() {
		return this.variationProductCode;
	}

	public void setVariationProductCode(String variationProductCode) {
		this.variationProductCode = variationProductCode;
	}

	/**
	*List of shipping discounts that can be applied to the configured product.
	*/
	@JsonProperty("AvailableShippingDiscounts")
	protected ArrayList<Discount> availableShippingDiscounts;
	public ArrayList<Discount> getAvailableShippingDiscounts() {
		return this.availableShippingDiscounts;
	}
	public void setAvailableShippingDiscounts(ArrayList<Discount> availableShippingDiscounts) {
		this.availableShippingDiscounts = availableShippingDiscounts;
	}

	/**
	*Dimensions of the packaged product.
	*/
	@JsonProperty("Measurements")
	protected PackageMeasurements measurements;

	public PackageMeasurements getMeasurements() {
		return this.measurements;
	}

	public void setMeasurements(PackageMeasurements measurements) {
		this.measurements = measurements;
	}

	/**
	*The list of options set up in product admin.
	*/
	@JsonProperty("Options")
	protected ArrayList<ProductOption> options;
	public ArrayList<ProductOption> getOptions() {
		return this.options;
	}
	public void setOptions(ArrayList<ProductOption> options) {
		this.options = options;
	}

	/**
	*Price that the merchant intends to sell the product which is not necessarily the list price. This is the price the merchant intends to sell the product if no sale price is present.
	*/
	@JsonProperty("Price")
	protected ProductPrice price;

	public ProductPrice getPrice() {
		return this.price;
	}

	public void setPrice(ProductPrice price) {
		this.price = price;
	}

	/**
	*For products with options that vary the cost of the product, the range between lowest and highest possible price of the product based on the current selection of options.
	*/
	@JsonProperty("PriceRange")
	protected ProductPriceRange priceRange;

	public ProductPriceRange getPriceRange() {
		return this.priceRange;
	}

	public void setPriceRange(ProductPriceRange priceRange) {
		this.priceRange = priceRange;
	}

	/**
	*The current state of the configured product determines whether or not the product is eligible for purchase. Products with options are only purchasable if the shopper has selected all required options. If the product is not ready for purchase, a message lists missing options that are required.
	*/
	@JsonProperty("PurchasableState")
	protected ProductPurchasableState purchasableState;

	public ProductPurchasableState getPurchasableState() {
		return this.purchasableState;
	}

	public void setPurchasableState(ProductPurchasableState purchasableState) {
		this.purchasableState = purchasableState;
	}

	/**
	*The number of products accounted for in inventory that are available for purchase.
	*/
	@JsonProperty("Stock")
	protected ProductStock stock;

	public ProductStock getStock() {
		return this.stock;
	}

	public void setStock(ProductStock stock) {
		this.stock = stock;
	}

}
