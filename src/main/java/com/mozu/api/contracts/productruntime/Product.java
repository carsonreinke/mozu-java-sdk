
/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.contracts.productruntime;

import java.util.ArrayList;
import java.io.Serializable;
import java.util.Date;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mozu.api.contracts.productruntime.Discount;
import com.mozu.api.contracts.productruntime.Category;
import com.mozu.api.contracts.productruntime.ProductContent;
import com.mozu.api.contracts.productruntime.PackageMeasurements;
import com.mozu.api.contracts.productruntime.ProductOption;
import com.mozu.api.contracts.productruntime.ProductPrice;
import com.mozu.api.contracts.productruntime.ProductPriceRange;
import com.mozu.api.contracts.productruntime.ProductProperty;
import com.mozu.api.contracts.productruntime.ProductPurchasableState;
import com.mozu.api.contracts.productruntime.ProductStock;


/**
*	Properties of the product that appears on the site storefront.
*/
public class Product implements Serializable
{
	/** Default Serial Version UID  */
	private static final long serialVersionUID = 1L;

	/**
	*Identifier of the attribute set.
	*/
	@JsonProperty("AttributeSetId")
	protected Integer attributeSetId;

	public Integer getAttributeSetId() {
		return this.attributeSetId;
	}

	public void setAttributeSetId(Integer attributeSetId) {
		this.attributeSetId = attributeSetId;
	}

	/**
	*Date and time when the entity was created, represented in UTC Date/Time.
	*/
	@JsonProperty("CreateDate")
	protected Date createDate;

	public Date getCreateDate() {
		return this.createDate;
	}

	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

	/**
	*If true, the product is marked as available for sale. Setting a product to IsActive = false will prevent it from being shown on the customer facing storefront.
	*/
	@JsonProperty("IsActive")
	protected Boolean isActive;

	public Boolean getIsActive() {
		return this.isActive;
	}

	public void setIsActive(Boolean isActive) {
		this.isActive = isActive;
	}

	/**
	*If true, the product can be purchased or fulfilled at regular intervals such as a monthly billing cycle or a digital or physical subscription.
	*/
	@JsonProperty("IsRecurring")
	protected Boolean isRecurring;

	public Boolean getIsRecurring() {
		return this.isRecurring;
	}

	public void setIsRecurring(Boolean isRecurring) {
		this.isRecurring = isRecurring;
	}

	/**
	*If true, the entity is subject to tax based on the relevant tax rate.
	*/
	@JsonProperty("IsTaxable")
	protected Boolean isTaxable;

	public Boolean getIsTaxable() {
		return this.isTaxable;
	}

	public void setIsTaxable(Boolean isTaxable) {
		this.isTaxable = isTaxable;
	}

	/**
	*Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	*/
	@JsonProperty("ProductCode")
	protected String productCode;

	public String getProductCode() {
		return this.productCode;
	}

	public void setProductCode(String productCode) {
		this.productCode = productCode;
	}

	@JsonProperty("ProductSequence")
	protected Integer productSequence;

	public Integer getProductSequence() {
		return this.productSequence;
	}

	public void setProductSequence(Integer productSequence) {
		this.productSequence = productSequence;
	}

	/**
	*A product type is like a product template that can be reused.
	*/
	@JsonProperty("ProductType")
	protected String productType;

	public String getProductType() {
		return this.productType;
	}

	public void setProductType(String productType) {
		this.productType = productType;
	}

	/**
	*The universal product code (UPC code) of the product.
	*/
	@JsonProperty("UPC")
	protected Integer uPC;

	public Integer getUPC() {
		return this.uPC;
	}

	public void setUPC(Integer uPC) {
		this.uPC = uPC;
	}

	/**
	*List of shipping discounts that can be applied to the product.
	*/
	@JsonProperty("AvailableShippingDiscounts")
	protected ArrayList<Discount> availableShippingDiscounts;
	public ArrayList<Discount> getAvailableShippingDiscounts() {
		return this.availableShippingDiscounts;
	}
	public void setAvailableShippingDiscounts(ArrayList<Discount> availableShippingDiscounts) {
		this.availableShippingDiscounts = availableShippingDiscounts;
	}

	/**
	*List of categories associated with the product.
	*/
	@JsonProperty("Categories")
	protected ArrayList<Category> categories;
	public ArrayList<Category> getCategories() {
		return this.categories;
	}
	public void setCategories(ArrayList<Category> categories) {
		this.categories = categories;
	}

	/**
	*Complex type that contains content for a language specified by LocaleCode.
	*/
	@JsonProperty("Content")
	protected ProductContent content;

	public ProductContent getContent() {
		return this.content;
	}

	public void setContent(ProductContent content) {
		this.content = content;
	}

	/**
	*Dimensions of the packaged product.
	*/
	@JsonProperty("Measurements")
	protected PackageMeasurements measurements;

	public PackageMeasurements getMeasurements() {
		return this.measurements;
	}

	public void setMeasurements(PackageMeasurements measurements) {
		this.measurements = measurements;
	}

	/**
	*The list of options set up in product admin.
	*/
	@JsonProperty("Options")
	protected ArrayList<ProductOption> options;
	public ArrayList<ProductOption> getOptions() {
		return this.options;
	}
	public void setOptions(ArrayList<ProductOption> options) {
		this.options = options;
	}

	/**
	*Price that the merchant intends to sell the product which is not necessarily the list price. This is the price the merchant intends to sell the product if no sale price is present.
	*/
	@JsonProperty("Price")
	protected ProductPrice price;

	public ProductPrice getPrice() {
		return this.price;
	}

	public void setPrice(ProductPrice price) {
		this.price = price;
	}

	/**
	*For products with options that vary the cost of the product, the range between lowest and highest possible price of the product based on the current selection of options.
	*/
	@JsonProperty("PriceRange")
	protected ProductPriceRange priceRange;

	public ProductPriceRange getPriceRange() {
		return this.priceRange;
	}

	public void setPriceRange(ProductPriceRange priceRange) {
		this.priceRange = priceRange;
	}

	/**
	*The list of product properties set up in product admin.
	*/
	@JsonProperty("Properties")
	protected ArrayList<ProductProperty> properties;
	public ArrayList<ProductProperty> getProperties() {
		return this.properties;
	}
	public void setProperties(ArrayList<ProductProperty> properties) {
		this.properties = properties;
	}

	/**
	*The current state of the configured product determines whether or not the product is eligible for purchase. Products with options are only purchasable if the shopper has selected all required options. If the product is not ready for purchase, a message lists missing options that are required.
	*/
	@JsonProperty("PurchasableState")
	protected ProductPurchasableState purchasableState;

	public ProductPurchasableState getPurchasableState() {
		return this.purchasableState;
	}

	public void setPurchasableState(ProductPurchasableState purchasableState) {
		this.purchasableState = purchasableState;
	}

	/**
	*The number of products accounted for in inventory that are available for purchase.
	*/
	@JsonProperty("Stock")
	protected ProductStock stock;

	public ProductStock getStock() {
		return this.stock;
	}

	public void setStock(ProductStock stock) {
		this.stock = stock;
	}

}
