
/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.contracts.productadmin;

import java.util.ArrayList;
import java.io.Serializable;
import java.util.Date;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mozu.api.contracts.core.AuditInfo;
import com.mozu.api.contracts.productadmin.FacetRangeQuery;
import com.mozu.api.contracts.productadmin.FacetSource;
import com.mozu.api.contracts.productadmin.FacetValidity;


/**
*	Properties of the category, price, or attribute facet shoppers use to filter product display results on a storefront.
*/
public class Facet implements Serializable
{
	/** Default Serial Version UID  */
	private static final long serialVersionUID = 1L;

	/**
	*Unique identifier for the storefront container used to organize products.
	*/
	@JsonProperty("CategoryId")
	protected Integer categoryId;

	public Integer getCategoryId() {
		return this.categoryId;
	}

	public void setCategoryId(Integer categoryId) {
		this.categoryId = categoryId;
	}

	/**
	*Unique identifier of the facet.
	*/
	@JsonProperty("FacetId")
	protected Integer facetId;

	public Integer getFacetId() {
		return this.facetId;
	}

	public void setFacetId(Integer facetId) {
		this.facetId = facetId;
	}

	/**
	*The type of facet. Valid values are "range," which enables creation of a range of values, or "value," which populates the facet values based on the associated attribute or category.
	*/
	@JsonProperty("FacetType")
	protected String facetType;

	public String getFacetType() {
		return this.facetType;
	}

	public void setFacetType(String facetType) {
		this.facetType = facetType;
	}

	/**
	*If true, disables a facet inherited from a parent category.
	*/
	@JsonProperty("IsHidden")
	protected Boolean isHidden;

	public Boolean getIsHidden() {
		return this.isHidden;
	}

	public void setIsHidden(Boolean isHidden) {
		this.isHidden = isHidden;
	}

	/**
	*The numeric sequence of the facet for its associated category.
	*/
	@JsonProperty("Order")
	protected Integer order;

	public Integer getOrder() {
		return this.order;
	}

	public void setOrder(Integer order) {
		this.order = order;
	}

	/**
	*Overrides a facet inherited from a parent category for a specified subcategory. System-supplied and read only.
	*/
	@JsonProperty("OverrideFacetId")
	protected Integer overrideFacetId;

	public Integer getOverrideFacetId() {
		return this.overrideFacetId;
	}

	public void setOverrideFacetId(Integer overrideFacetId) {
		this.overrideFacetId = overrideFacetId;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	@JsonProperty("AuditInfo")
	protected AuditInfo auditInfo;

	public AuditInfo getAuditInfo() {
		return this.auditInfo;
	}

	public void setAuditInfo(AuditInfo auditInfo) {
		this.auditInfo = auditInfo;
	}

	/**
	*For range type facets, an array of ranges to use for the facet values. For example, a price facet might have range queries for $0-$25, $25-$50, and $50-$100.
	*/
	@JsonProperty("RangeQueries")
	protected ArrayList<FacetRangeQuery> rangeQueries;
	public ArrayList<FacetRangeQuery> getRangeQueries() {
		return this.rangeQueries;
	}
	public void setRangeQueries(ArrayList<FacetRangeQuery> rangeQueries) {
		this.rangeQueries = rangeQueries;
	}

	/**
	*Container for the facet source information, which includes the category, price, or attribute properties.
	*/
	@JsonProperty("Source")
	protected FacetSource source;

	public FacetSource getSource() {
		return this.source;
	}

	public void setSource(FacetSource source) {
		this.source = source;
	}

	/**
	*System-supplied and read only parameter that validates a facet for its associated category.
	*/
	@JsonProperty("Validity")
	protected FacetValidity validity;

	public FacetValidity getValidity() {
		return this.validity;
	}

	public void setValidity(FacetValidity validity) {
		this.validity = validity;
	}

}
