
/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.contracts.productadmin;

import java.util.ArrayList;
import java.io.Serializable;
import java.util.Date;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.mozu.api.contracts.productadmin.Discount;
import com.mozu.api.contracts.core.AuditInfo;
import com.mozu.api.contracts.productadmin.ProductLocalizedContent;
import com.mozu.api.contracts.productadmin.ProductExtra;
import com.mozu.api.contracts.productadmin.ProductOption;
import com.mozu.api.contracts.core.Measurement;
import com.mozu.api.contracts.productadmin.ProductPrice;
import com.mozu.api.contracts.productadmin.ProductInSiteInfo;
import com.mozu.api.contracts.productadmin.ProductProperty;
import com.mozu.api.contracts.productadmin.ProductPublishingInfo;
import com.mozu.api.contracts.productadmin.ProductLocalizedSEOContent;
import com.mozu.api.contracts.productadmin.StockOnHandAdjustment;
import com.mozu.api.contracts.productadmin.ProductVariationOption;


/**
*	Properties of the product such as product code, product name, and product price.
*/
public class Product implements Serializable
{
	/** Default Serial Version UID  */
	private static final long serialVersionUID = 1L;

	/**
	*Merchant-generated product code for the product that any variation stems from.
	*/
	@JsonProperty("BaseProductCode")
	protected String baseProductCode;

	public String getBaseProductCode() {
		return this.baseProductCode;
	}

	public void setBaseProductCode(String baseProductCode) {
		this.baseProductCode = baseProductCode;
	}

	/**
	*If true, the product has configurable options. This option means that a product is not purchasable until the shopper selects options that resolve into a product variation. Configurable options for a product are the choices a shopper makes when ordering a product. Size and color are configurable options. System-supplied and read-only.
	*/
	@JsonProperty("HasConfigurableOptions")
	protected Boolean hasConfigurableOptions;

	public Boolean getHasConfigurableOptions() {
		return this.hasConfigurableOptions;
	}

	public void setHasConfigurableOptions(Boolean hasConfigurableOptions) {
		this.hasConfigurableOptions = hasConfigurableOptions;
	}

	/**
	*If true, this product has stand alone options that a shopper can select which can exist without product variations. Stand alone options. System-supplied and read-only.
	*/
	@JsonProperty("HasStandAloneOptions")
	protected Boolean hasStandAloneOptions;

	public Boolean getHasStandAloneOptions() {
		return this.hasStandAloneOptions;
	}

	public void setHasStandAloneOptions(Boolean hasStandAloneOptions) {
		this.hasStandAloneOptions = hasStandAloneOptions;
	}

	/**
	*If true, a shopper can order the product when it is out of stock through the site, but can get the product once it is available again in inventory or through dropshipping.
	*/
	@JsonProperty("IsBackOrderAllowed")
	protected Boolean isBackOrderAllowed;

	public Boolean getIsBackOrderAllowed() {
		return this.isBackOrderAllowed;
	}

	public void setIsBackOrderAllowed(Boolean isBackOrderAllowed) {
		this.isBackOrderAllowed = isBackOrderAllowed;
	}

	/**
	*If true, the product does not appear on the storefront when it is not in stock. If false, the product stays on the storefront even when it is out of stock.
	*/
	@JsonProperty("IsHiddenWhenOutOfStock")
	protected Boolean isHiddenWhenOutOfStock;

	public Boolean getIsHiddenWhenOutOfStock() {
		return this.isHiddenWhenOutOfStock;
	}

	public void setIsHiddenWhenOutOfStock(Boolean isHiddenWhenOutOfStock) {
		this.isHiddenWhenOutOfStock = isHiddenWhenOutOfStock;
	}

	/**
	*If true, the product must be packaged on its own and should not be jointly packaged with other products.
	*/
	@JsonProperty("IsPackagedStandAlone")
	protected Boolean isPackagedStandAlone;

	public Boolean getIsPackagedStandAlone() {
		return this.isPackagedStandAlone;
	}

	public void setIsPackagedStandAlone(Boolean isPackagedStandAlone) {
		this.isPackagedStandAlone = isPackagedStandAlone;
	}

	/**
	*If true, the product can be purchased or fulfilled at regular intervals such as a monthly billing cycle or a digital or physical subscription.
	*/
	@JsonProperty("IsRecurring")
	protected Boolean isRecurring;

	public Boolean getIsRecurring() {
		return this.isRecurring;
	}

	public void setIsRecurring(Boolean isRecurring) {
		this.isRecurring = isRecurring;
	}

	/**
	*If true, the entity is subject to tax based on the relevant tax rate.
	*/
	@JsonProperty("IsTaxable")
	protected Boolean isTaxable;

	public Boolean getIsTaxable() {
		return this.isTaxable;
	}

	public void setIsTaxable(Boolean isTaxable) {
		this.isTaxable = isTaxable;
	}

	/**
	*If true, the entity is valid for the product type provided.
	*/
	@JsonProperty("IsValidForProductType")
	protected Boolean isValidForProductType;

	public Boolean getIsValidForProductType() {
		return this.isValidForProductType;
	}

	public void setIsValidForProductType(Boolean isValidForProductType) {
		this.isValidForProductType = isValidForProductType;
	}

	/**
	*If true, the product in this request is a product variation of a product that has configurable options. System-supplied and read-only.
	*/
	@JsonProperty("IsVariation")
	protected Boolean isVariation;

	public Boolean getIsVariation() {
		return this.isVariation;
	}

	public void setIsVariation(Boolean isVariation) {
		this.isVariation = isVariation;
	}

	/**
	*If true, the Products services will manage inventory for this product.
	*/
	@JsonProperty("ManageStock")
	protected Boolean manageStock;

	public Boolean getManageStock() {
		return this.manageStock;
	}

	public void setManageStock(Boolean manageStock) {
		this.manageStock = manageStock;
	}

	/**
	*Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	*/
	@JsonProperty("ProductCode")
	protected String productCode;

	public String getProductCode() {
		return this.productCode;
	}

	public void setProductCode(String productCode) {
		this.productCode = productCode;
	}

	@JsonProperty("ProductSequence")
	protected Integer productSequence;

	public Integer getProductSequence() {
		return this.productSequence;
	}

	public void setProductSequence(Integer productSequence) {
		this.productSequence = productSequence;
	}

	/**
	*Identifier of the product type.
	*/
	@JsonProperty("ProductTypeId")
	protected Integer productTypeId;

	public Integer getProductTypeId() {
		return this.productTypeId;
	}

	public void setProductTypeId(Integer productTypeId) {
		this.productTypeId = productTypeId;
	}

	/**
	*Identifier of the shipping class.
	*/
	@JsonProperty("ShippingClassId")
	protected Integer shippingClassId;

	public Integer getShippingClassId() {
		return this.shippingClassId;
	}

	public void setShippingClassId(Integer shippingClassId) {
		this.shippingClassId = shippingClassId;
	}

	@JsonProperty("SiteGroupId")
	protected Integer siteGroupId;

	public Integer getSiteGroupId() {
		return this.siteGroupId;
	}

	public void setSiteGroupId(Integer siteGroupId) {
		this.siteGroupId = siteGroupId;
	}

	/**
	*If the product must be packaged separately, the type of standalone package to use.
	*/
	@JsonProperty("StandAlonePackageType")
	protected String standAlonePackageType;

	public String getStandAlonePackageType() {
		return this.standAlonePackageType;
	}

	public void setStandAlonePackageType(String standAlonePackageType) {
		this.standAlonePackageType = standAlonePackageType;
	}

	/**
	*The number of products accounted for in inventory that are available for purchase.
	*/
	@JsonProperty("StockAvailable")
	protected Integer stockAvailable;

	public Integer getStockAvailable() {
		return this.stockAvailable;
	}

	public void setStockAvailable(Integer stockAvailable) {
		this.stockAvailable = stockAvailable;
	}

	/**
	*The number of products that are unavailable for current purchase, but placed on back order so that the shopper's order can still be fulfilled, for example, by dropshipping or just waiting for stock to be available again.
	*/
	@JsonProperty("StockOnBackOrder")
	protected Integer stockOnBackOrder;

	public Integer getStockOnBackOrder() {
		return this.stockOnBackOrder;
	}

	public void setStockOnBackOrder(Integer stockOnBackOrder) {
		this.stockOnBackOrder = stockOnBackOrder;
	}

	/**
	*The number of products currently available in inventory.
	*/
	@JsonProperty("StockOnHand")
	protected Integer stockOnHand;

	public Integer getStockOnHand() {
		return this.stockOnHand;
	}

	public void setStockOnHand(Integer stockOnHand) {
		this.stockOnHand = stockOnHand;
	}

	/**
	*The universal product code (UPC code) of the product.
	*/
	@JsonProperty("UPC")
	protected String uPC;

	public String getUPC() {
		return this.uPC;
	}

	public void setUPC(String uPC) {
		this.uPC = uPC;
	}

	/**
	*System-generated key that represents the attribute values that uniquely identify a specific product variation.
	*/
	@JsonProperty("VariationKey")
	protected String variationKey;

	public String getVariationKey() {
		return this.variationKey;
	}

	public void setVariationKey(String variationKey) {
		this.variationKey = variationKey;
	}

	/**
	*List of discounts available for a product.
	*/
	@JsonProperty("ApplicableDiscounts")
	protected ArrayList<Discount> applicableDiscounts;
	public ArrayList<Discount> getApplicableDiscounts() {
		return this.applicableDiscounts;
	}
	public void setApplicableDiscounts(ArrayList<Discount> applicableDiscounts) {
		this.applicableDiscounts = applicableDiscounts;
	}

	/**
	*Identifier and datetime stamp information recorded when creating or updating a resource entity. This value is system-supplied and read-only.
	*/
	@JsonProperty("AuditInfo")
	protected AuditInfo auditInfo;

	public AuditInfo getAuditInfo() {
		return this.auditInfo;
	}

	public void setAuditInfo(AuditInfo auditInfo) {
		this.auditInfo = auditInfo;
	}

	/**
	*Product content set in product admin.
	*/
	@JsonProperty("Content")
	protected ProductLocalizedContent content;

	public ProductLocalizedContent getContent() {
		return this.content;
	}

	public void setContent(ProductLocalizedContent content) {
		this.content = content;
	}

	/**
	*The list of extras set up in product admin.
	*/
	@JsonProperty("Extras")
	protected ArrayList<ProductExtra> extras;
	public ArrayList<ProductExtra> getExtras() {
		return this.extras;
	}
	public void setExtras(ArrayList<ProductExtra> extras) {
		this.extras = extras;
	}

	/**
	*The list of options set up in product admin.
	*/
	@JsonProperty("Options")
	protected ArrayList<ProductOption> options;
	public ArrayList<ProductOption> getOptions() {
		return this.options;
	}
	public void setOptions(ArrayList<ProductOption> options) {
		this.options = options;
	}

	/**
	*Height of the package in imperial units of feet and inches.
	*/
	@JsonProperty("PackageHeight")
	protected Measurement packageHeight;

	public Measurement getPackageHeight() {
		return this.packageHeight;
	}

	public void setPackageHeight(Measurement packageHeight) {
		this.packageHeight = packageHeight;
	}

	/**
	*Length of the package in imperial units of feet and inches.
	*/
	@JsonProperty("PackageLength")
	protected Measurement packageLength;

	public Measurement getPackageLength() {
		return this.packageLength;
	}

	public void setPackageLength(Measurement packageLength) {
		this.packageLength = packageLength;
	}

	/**
	*Weight of the package in imperial units of pounds and ounces.
	*/
	@JsonProperty("PackageWeight")
	protected Measurement packageWeight;

	public Measurement getPackageWeight() {
		return this.packageWeight;
	}

	public void setPackageWeight(Measurement packageWeight) {
		this.packageWeight = packageWeight;
	}

	/**
	*Width of the package in imperial units of feet and inches.
	*/
	@JsonProperty("PackageWidth")
	protected Measurement packageWidth;

	public Measurement getPackageWidth() {
		return this.packageWidth;
	}

	public void setPackageWidth(Measurement packageWidth) {
		this.packageWidth = packageWidth;
	}

	@JsonProperty("Price")
	protected ProductPrice price;

	public ProductPrice getPrice() {
		return this.price;
	}

	public void setPrice(ProductPrice price) {
		this.price = price;
	}

	/**
	*List of products that belong to a specific site ID.
	*/
	@JsonProperty("ProductInSites")
	protected ArrayList<ProductInSiteInfo> productInSites;
	public ArrayList<ProductInSiteInfo> getProductInSites() {
		return this.productInSites;
	}
	public void setProductInSites(ArrayList<ProductInSiteInfo> productInSites) {
		this.productInSites = productInSites;
	}

	/**
	*The list of product properties to set in product admin.
	*/
	@JsonProperty("Properties")
	protected ArrayList<ProductProperty> properties;
	public ArrayList<ProductProperty> getProperties() {
		return this.properties;
	}
	public void setProperties(ArrayList<ProductProperty> properties) {
		this.properties = properties;
	}

	@JsonProperty("PublishingInfo")
	protected ProductPublishingInfo publishingInfo;

	public ProductPublishingInfo getPublishingInfo() {
		return this.publishingInfo;
	}

	public void setPublishingInfo(ProductPublishingInfo publishingInfo) {
		this.publishingInfo = publishingInfo;
	}

	/**
	*search engine optimized product content.
	*/
	@JsonProperty("SEOContent")
	protected ProductLocalizedSEOContent sEOContent;

	public ProductLocalizedSEOContent getSEOContent() {
		return this.sEOContent;
	}

	public void setSEOContent(ProductLocalizedSEOContent sEOContent) {
		this.sEOContent = sEOContent;
	}

	/**
	*The change made to the number of products currently available in inventory.
	*/
	@JsonProperty("StockOnHandAdjustment")
	protected StockOnHandAdjustment stockOnHandAdjustment;

	public StockOnHandAdjustment getStockOnHandAdjustment() {
		return this.stockOnHandAdjustment;
	}

	public void setStockOnHandAdjustment(StockOnHandAdjustment stockOnHandAdjustment) {
		this.stockOnHandAdjustment = stockOnHandAdjustment;
	}

	/**
	*The list of product variation options that exist in product admin.
	*/
	@JsonProperty("VariationOptions")
	protected ArrayList<ProductVariationOption> variationOptions;
	public ArrayList<ProductVariationOption> getVariationOptions() {
		return this.variationOptions;
	}
	public void setVariationOptions(ArrayList<ProductVariationOption> variationOptions) {
		this.variationOptions = variationOptions;
	}

}
