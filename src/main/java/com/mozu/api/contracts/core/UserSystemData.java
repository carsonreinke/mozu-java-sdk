/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.contracts.core;

import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import java.util.Date;

/**
 *	System-supplied and read-only information about the user.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class UserSystemData implements Serializable
{
	// Default Serial Version UID
	private static final long serialVersionUID = 1L;

	/**
	 * Date and time when the entity was created, represented in UTC Date/Time.
	 */
	protected Date createdOn;

	public Date getCreatedOn() {
		return this.createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		this.createdOn = createdOn;
	}

	/**
	 * The number of failed authentication attempts associated with the user.
	 */
	protected Byte failedLoginAttemptCount;

	public Byte getFailedLoginAttemptCount() {
		return this.failedLoginAttemptCount;
	}

	public void setFailedLoginAttemptCount(Byte failedLoginAttemptCount) {
		this.failedLoginAttemptCount = failedLoginAttemptCount;
	}

	/**
	 * The date and time the initial login was unsuccessful, which is system-supplied and read only. Each time user authentication fails, an update occurs on this field.
	 */
	protected Date firstFailedLoginAttemptOn;

	public Date getFirstFailedLoginAttemptOn() {
		return this.firstFailedLoginAttemptOn;
	}

	public void setFirstFailedLoginAttemptOn(Date firstFailedLoginAttemptOn) {
		this.firstFailedLoginAttemptOn = firstFailedLoginAttemptOn;
	}

	/**
	 * If true, the user account is locked due to multiple failed authentication attempts.
	 */
	protected Boolean isLocked;

	public Boolean getIsLocked() {
		return this.isLocked;
	}

	public void setIsLocked(Boolean isLocked) {
		this.isLocked = isLocked;
	}

	/**
	 * If true, the login requires a password change for increased security. If false, the login does not require a password change.
	 */
	protected Boolean isPasswordChangeRequired;

	public Boolean getIsPasswordChangeRequired() {
		return this.isPasswordChangeRequired;
	}

	public void setIsPasswordChangeRequired(Boolean isPasswordChangeRequired) {
		this.isPasswordChangeRequired = isPasswordChangeRequired;
	}

	/**
	 * When the user's account was last locked. System-supplied and read-only.
	 */
	protected Date lastLockedOn;

	public Date getLastLockedOn() {
		return this.lastLockedOn;
	}

	public void setLastLockedOn(Date lastLockedOn) {
		this.lastLockedOn = lastLockedOn;
	}

	/**
	 *  When the user last logged into the store. System-supplied and read-only.
	 */
	protected Date lastLoginOn;

	public Date getLastLoginOn() {
		return this.lastLoginOn;
	}

	public void setLastLoginOn(Date lastLoginOn) {
		this.lastLoginOn = lastLoginOn;
	}

	/**
	 *  When the password was last modified. System-supplied and read-only.
	 */
	protected Date lastPasswordChangeOn;

	public Date getLastPasswordChangeOn() {
		return this.lastPasswordChangeOn;
	}

	public void setLastPasswordChangeOn(Date lastPasswordChangeOn) {
		this.lastPasswordChangeOn = lastPasswordChangeOn;
	}

	/**
	 * The number of login attempts left for the user. The user must login successfully before this value reaches zero otherwise the account will be locked.
	 */
	protected Integer remainingLoginAttempts;

	public Integer getRemainingLoginAttempts() {
		return this.remainingLoginAttempts;
	}

	public void setRemainingLoginAttempts(Integer remainingLoginAttempts) {
		this.remainingLoginAttempts = remainingLoginAttempts;
	}

	/**
	 * Date and time when the entity was last updated, represented in UTC Date/Time.
	 */
	protected Date updatedOn;

	public Date getUpdatedOn() {
		return this.updatedOn;
	}

	public void setUpdatedOn(Date updatedOn) {
		this.updatedOn = updatedOn;
	}

}
