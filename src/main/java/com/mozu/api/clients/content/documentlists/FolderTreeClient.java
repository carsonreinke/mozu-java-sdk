/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.clients.content.documentlists;

import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * Use the folder tree subresource to view individual folders in the document hierarchy.
 * </summary>
 */
public class FolderTreeClient {
	
	/**
	 * Retrieves the folder hierarchy used to organize documents in lists.
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.content.FolderTree> mozuClient=GetFolderTreeClient(dataViewMode,  documentListName);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * FolderTree folderTree = client.Result();
	 * </code></pre></p>
	 * @param documentListName The name of the document list that contains this folder hierarchy.
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.FolderTree>
	 * @see com.mozu.api.contracts.content.FolderTree
	 */
	public static MozuClient<com.mozu.api.contracts.content.FolderTree> getFolderTreeClient(com.mozu.api.DataViewMode dataViewMode, String documentListName) throws Exception
	{
		return getFolderTreeClient(dataViewMode,  documentListName,  null,  null,  null, null);
	}

	/**
	 * Retrieves the folder hierarchy used to organize documents in lists.
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.content.FolderTree> mozuClient=GetFolderTreeClient(dataViewMode,  documentListName,  levels,  rootFolderId,  rootFolderPath, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * FolderTree folderTree = client.Result();
	 * </code></pre></p>
	 * @param documentListName The name of the document list that contains this folder hierarchy.
	 * @param levels The number of levels in the folder hierarchy to return.
	 * @param rootFolderId The unique identifier of the top-level folder in the document list.
	 * @param rootFolderPath The location in the document hierarchy of the top-level folder in the document list.
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.FolderTree>
	 * @see com.mozu.api.contracts.content.FolderTree
	 */
	public static MozuClient<com.mozu.api.contracts.content.FolderTree> getFolderTreeClient(com.mozu.api.DataViewMode dataViewMode, String documentListName, Integer levels, String rootFolderId, String rootFolderPath, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.content.documentlists.FolderTreeUrl.getFolderTreeUrl(documentListName, levels, rootFolderId, rootFolderPath);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.content.FolderTree.class;
		MozuClient<com.mozu.api.contracts.content.FolderTree> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.addHeader(Headers.X_VOL_DATAVIEW_MODE ,dataViewMode.toString());
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

}



