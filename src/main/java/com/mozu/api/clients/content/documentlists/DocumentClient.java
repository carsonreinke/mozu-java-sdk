/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.clients.content.documentlists;

import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use this subresource to manage documents in a document list.
/// </summary>
public class DocumentClient {
	
	
	/**
	* Retrieve the content associated with a document, such as a product image or PDF specifications file, by supplying the document ID.
	* <p><pre><code>
	*   MozuClient mozuClient=GetDocumentContentClient( documentId,  documentListName);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param documentId Unique identifier of the document.
	* @param documentListName The name of the document list associated with the document.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient getDocumentContentClient(String documentId, String documentListName) throws Exception
	{
		return getDocumentContentClient( documentId,  documentListName,  null);
	}

/**
	* Retrieve the content associated with a document, such as a product image or PDF specifications file, by supplying the document ID.
	* <p><pre><code>
	*   MozuClient mozuClient=GetDocumentContentClient( documentId,  documentListName,  publishState);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param documentId Unique identifier of the document.
	* @param documentListName The name of the document list associated with the document.
	* @param publishState The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient getDocumentContentClient(String documentId, String documentListName, String publishState) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.DocumentUrl.getDocumentContentUrl(documentId, documentListName, publishState);
		String verb = "GET";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves a specific document within the specified document list by providing the document ID.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.Document> mozuClient=GetDocumentClient( documentId,  documentListName);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Document document = client.Result();
	* </code></pre></p>
	* @param documentId Identifier of the document being retrieved.
	* @param documentListName The name of the document list associated with the document to retrieve.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.Document>
	* @see com.mozu.api.contracts.content.Document
	*/
	public static MozuClient<com.mozu.api.contracts.content.Document> getDocumentClient(String documentId, String documentListName) throws Exception
	{
		return getDocumentClient( documentId,  documentListName,  null);
	}

/**
	* Retrieves a specific document within the specified document list by providing the document ID.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.Document> mozuClient=GetDocumentClient( documentId,  documentListName,  publishState);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Document document = client.Result();
	* </code></pre></p>
	* @param documentId Identifier of the document being retrieved.
	* @param documentListName The name of the document list associated with the document to retrieve.
	* @param publishState The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.Document>
	* @see com.mozu.api.contracts.content.Document
	*/
	public static MozuClient<com.mozu.api.contracts.content.Document> getDocumentClient(String documentId, String documentListName, String publishState) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.DocumentUrl.getDocumentUrl(documentId, documentListName, publishState);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.content.Document.class;
		MozuClient<com.mozu.api.contracts.content.Document> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves a collection of documents according to any filter and sort criteria.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.DocumentCollection> mozuClient=GetDocumentsClient( documentListName);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* DocumentCollection documentCollection = client.Result();
	* </code></pre></p>
	* @param documentListName The name of the document list.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.DocumentCollection>
	* @see com.mozu.api.contracts.content.DocumentCollection
	*/
	public static MozuClient<com.mozu.api.contracts.content.DocumentCollection> getDocumentsClient(String documentListName) throws Exception
	{
		return getDocumentsClient( documentListName,  null,  null,  null,  null,  null);
	}

/**
	* Retrieves a collection of documents according to any filter and sort criteria.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.DocumentCollection> mozuClient=GetDocumentsClient( documentListName,  filter,  pageSize,  publishState,  sortBy,  startIndex);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* DocumentCollection documentCollection = client.Result();
	* </code></pre></p>
	* @param documentListName The name of the document list.
	* @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter a document's search results by any of its properties, including its name or folder path. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). <b>For example - "filter=Name+sw+Events"</b>
	* @param pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param publishState The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.
	* @param sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
	* @param startIndex Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.DocumentCollection>
	* @see com.mozu.api.contracts.content.DocumentCollection
	*/
	public static MozuClient<com.mozu.api.contracts.content.DocumentCollection> getDocumentsClient(String documentListName, String filter, Long pageSize, String publishState, String sortBy, Long startIndex) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.DocumentUrl.getDocumentsUrl(documentListName, filter, pageSize, publishState, sortBy, startIndex);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.content.DocumentCollection.class;
		MozuClient<com.mozu.api.contracts.content.DocumentCollection> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	* Creates a new document in an existing list.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.Document> mozuClient=CreateDocumentClient( documentListName,  document);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Document document = client.Result();
	* </code></pre></p>
	* @param documentListName The descriptive alphanumeric document list name being created.
	* @param document The descriptive name of the newly created document.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.Document>
	* @see com.mozu.api.contracts.content.Document
	* @see com.mozu.api.contracts.content.Document
	*/
	public static MozuClient<com.mozu.api.contracts.content.Document> createDocumentClient(String documentListName, com.mozu.api.contracts.content.Document document) throws Exception
	{
		return createDocumentClient( documentListName,  null,  document);
	}

/**
	* Creates a new document in an existing list.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.Document> mozuClient=CreateDocumentClient( documentListName,  publishState,  document);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Document document = client.Result();
	* </code></pre></p>
	* @param documentListName The descriptive alphanumeric document list name being created.
	* @param publishState The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.
	* @param document The descriptive name of the newly created document.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.Document>
	* @see com.mozu.api.contracts.content.Document
	* @see com.mozu.api.contracts.content.Document
	*/
	public static MozuClient<com.mozu.api.contracts.content.Document> createDocumentClient(String documentListName, String publishState, com.mozu.api.contracts.content.Document document) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.DocumentUrl.createDocumentUrl(documentListName, publishState);
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.content.Document.class;
		MozuClient<com.mozu.api.contracts.content.Document> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(document);
		return mozuClient;

	}

	/**
	* Updates the content associated with a document, such as a product image or PDF specifications file, by supplying the document ID.
	* <p><pre><code>
	*   MozuClient mozuClient=UpdateDocumentContentClient( documentId,  documentListName);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param documentId Unique identifier of the document.
	* @param documentListName The name of the document list associated with the document.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient updateDocumentContentClient(String documentId, String documentListName) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.DocumentUrl.updateDocumentContentUrl(documentId, documentListName);
		String verb = "PUT";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Updates a document in a document list.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.Document> mozuClient=UpdateDocumentClient( documentId,  documentListName,  document);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Document document = client.Result();
	* </code></pre></p>
	* @param documentId Unique identifier of the document to update.
	* @param documentListName Name of the document list associated with the document.
	* @param document Properties of the document to update.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.Document>
	* @see com.mozu.api.contracts.content.Document
	* @see com.mozu.api.contracts.content.Document
	*/
	public static MozuClient<com.mozu.api.contracts.content.Document> updateDocumentClient(String documentId, String documentListName, com.mozu.api.contracts.content.Document document) throws Exception
	{
		return updateDocumentClient( documentId,  documentListName,  null,  document);
	}

/**
	* Updates a document in a document list.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.Document> mozuClient=UpdateDocumentClient( documentId,  documentListName,  publishState,  document);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Document document = client.Result();
	* </code></pre></p>
	* @param documentId Unique identifier of the document to update.
	* @param documentListName Name of the document list associated with the document.
	* @param publishState The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.
	* @param document Properties of the document to update.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.Document>
	* @see com.mozu.api.contracts.content.Document
	* @see com.mozu.api.contracts.content.Document
	*/
	public static MozuClient<com.mozu.api.contracts.content.Document> updateDocumentClient(String documentId, String documentListName, String publishState, com.mozu.api.contracts.content.Document document) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.DocumentUrl.updateDocumentUrl(documentId, documentListName, publishState);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.content.Document.class;
		MozuClient<com.mozu.api.contracts.content.Document> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(document);
		return mozuClient;

	}

	/**
	* Deletes the content associated with a document, such as a product image or PDF specification, by supplying the document ID.
	* <p><pre><code>
	*   MozuClient mozuClient=DeleteDocumentContentClient( documentId,  documentListName);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param documentId Unique identifier of the document.
	* @param documentListName The name of the document list associated with the document.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deleteDocumentContentClient(String documentId, String documentListName) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.DocumentUrl.deleteDocumentContentUrl(documentId, documentListName);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Deletes a specific document based on the specified document ID.
	* <p><pre><code>
	*   MozuClient mozuClient=DeleteDocumentClient( documentId,  documentListName);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param documentId Identifier of the document being deleted.
	* @param documentListName The name of the document list associated with the document list being deleted.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deleteDocumentClient(String documentId, String documentListName) throws Exception
	{
		return deleteDocumentClient( documentId,  documentListName,  null);
	}

/**
	* Deletes a specific document based on the specified document ID.
	* <p><pre><code>
	*   MozuClient mozuClient=DeleteDocumentClient( documentId,  documentListName,  publishState);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param documentId Identifier of the document being deleted.
	* @param documentListName The name of the document list associated with the document list being deleted.
	* @param publishState The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deleteDocumentClient(String documentId, String documentListName, String publishState) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.DocumentUrl.deleteDocumentUrl(documentId, documentListName, publishState);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}


}



