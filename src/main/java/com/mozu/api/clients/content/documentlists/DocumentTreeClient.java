/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.clients.content.documentlists;

import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use the document tree subresource to retrieve documents and manage content within the document hierarchy.
/// </summary>
public class DocumentTreeClient {
	
	
	/**
	* Retrieve the content associated with the document, such as a product image or PDF specifications file.
	* <p><pre><code>
	*   MozuClient mozuClient=GetTreeDocumentContentClient( documentListName,  documentName);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient getTreeDocumentContentClient(String documentListName, String documentName) throws Exception
	{
		return getTreeDocumentContentClient( documentListName,  documentName,  null,  null,  null);
	}

/**
	* Retrieve the content associated with the document, such as a product image or PDF specifications file.
	* <p><pre><code>
	*   MozuClient mozuClient=GetTreeDocumentContentClient( documentListName,  documentName,  folderId,  folderPath,  publishState);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @param folderId If applicable, the unique identifier of the folder that contains the document.
	* @param folderPath If applicable, the path of the folder hierarchy location associated with the document.
	* @param publishState The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient getTreeDocumentContentClient(String documentListName, String documentName, String folderId, String folderPath, String publishState) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.DocumentTreeUrl.getTreeDocumentContentUrl(documentListName, documentName, folderId, folderPath, publishState);
		String verb = "GET";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves a document based on its document list and folder path in the document hierarchy.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.Document> mozuClient=GetTreeDocumentClient( documentListName,  documentName);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Document document = client.Result();
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.Document>
	* @see com.mozu.api.contracts.content.Document
	*/
	public static MozuClient<com.mozu.api.contracts.content.Document> getTreeDocumentClient(String documentListName, String documentName) throws Exception
	{
		return getTreeDocumentClient( documentListName,  documentName,  null,  null,  null);
	}

/**
	* Retrieves a document based on its document list and folder path in the document hierarchy.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.Document> mozuClient=GetTreeDocumentClient( documentListName,  documentName,  folderId,  folderPath,  publishState);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Document document = client.Result();
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @param folderId If applicable, the unique identifier of the folder that contains the document.
	* @param folderPath If applicable, the path of the folder hierarchy location that contains the document.
	* @param publishState The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.Document>
	* @see com.mozu.api.contracts.content.Document
	*/
	public static MozuClient<com.mozu.api.contracts.content.Document> getTreeDocumentClient(String documentListName, String documentName, String folderId, String folderPath, String publishState) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.DocumentTreeUrl.getTreeDocumentUrl(documentListName, documentName, folderId, folderPath, publishState);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.content.Document.class;
		MozuClient<com.mozu.api.contracts.content.Document> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

		/**
	* Updates the content associated with a document, such as a product image or PDF specifications file, based on the document's position in the document hierarchy.
	* <p><pre><code>
	*   MozuClient mozuClient=UpdateTreeDocumentContentClient( documentListName,  documentName);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient updateTreeDocumentContentClient(String documentListName, String documentName) throws Exception
	{
		return updateTreeDocumentContentClient( documentListName,  documentName,  null,  null);
	}

/**
	* Updates the content associated with a document, such as a product image or PDF specifications file, based on the document's position in the document hierarchy.
	* <p><pre><code>
	*   MozuClient mozuClient=UpdateTreeDocumentContentClient( documentListName,  documentName,  folderId,  folderPath);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @param folderId If applicable, the unique identifier of the folder that contains the document.
	* @param folderPath If applicable, the path of the folder hierarchy location associated with the document.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient updateTreeDocumentContentClient(String documentListName, String documentName, String folderId, String folderPath) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.DocumentTreeUrl.updateTreeDocumentContentUrl(documentListName, documentName, folderId, folderPath);
		String verb = "PUT";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	* Deletes the content associated with a document, such as a product image or PDF specifications file.
	* <p><pre><code>
	*   MozuClient mozuClient=DeleteTreeDocumentContentClient( documentListName,  documentName);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deleteTreeDocumentContentClient(String documentListName, String documentName) throws Exception
	{
		return deleteTreeDocumentContentClient( documentListName,  documentName,  null,  null);
	}

/**
	* Deletes the content associated with a document, such as a product image or PDF specifications file.
	* <p><pre><code>
	*   MozuClient mozuClient=DeleteTreeDocumentContentClient( documentListName,  documentName,  folderId,  folderPath);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @param folderId If applicable, the unique identifier of the folder that contains the document.
	* @param folderPath If applicable, the path of the folder hierarchy location associated with the document.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deleteTreeDocumentContentClient(String documentListName, String documentName, String folderId, String folderPath) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.DocumentTreeUrl.deleteTreeDocumentContentUrl(documentListName, documentName, folderId, folderPath);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}


}



