/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.clients.content.documentlists;

import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use the folders subresource to organize content into folders.
/// </summary>
public class FolderClient {
	
	
	/**
	* Retrieves the properties of an existing folder.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.Folder> mozuClient=GetFolderClient( documentListName,  folderId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Folder folder = client.Result();
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the folder to retrieve.
	* @param folderId The unique identifier of the folder to retrieve.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.Folder>
	* @see com.mozu.api.contracts.content.Folder
	*/
	public static MozuClient<com.mozu.api.contracts.content.Folder> getFolderClient(String documentListName, String folderId) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.FolderUrl.getFolderUrl(documentListName, folderId);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.content.Folder.class;
		MozuClient<com.mozu.api.contracts.content.Folder> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieve a list of content folders according to any filter and sort criteria.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.FolderCollection> mozuClient=GetFoldersClient( documentListName,  filter);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* FolderCollection folderCollection = client.Result();
	* </code></pre></p>
	* @param documentListName The name of the document list that contains this folder.
	* @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.FolderCollection>
	* @see com.mozu.api.contracts.content.FolderCollection
	*/
	public static MozuClient<com.mozu.api.contracts.content.FolderCollection> getFoldersClient(String documentListName, String filter) throws Exception
	{
		return getFoldersClient( documentListName,  filter,  null,  null,  null);
	}

/**
	* Retrieve a list of content folders according to any filter and sort criteria.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.FolderCollection> mozuClient=GetFoldersClient( documentListName,  filter,  pageSize,  sort,  startIndex);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* FolderCollection folderCollection = client.Result();
	* </code></pre></p>
	* @param documentListName The name of the document list that contains this folder.
	* @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param sort The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
	* @param startIndex Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.FolderCollection>
	* @see com.mozu.api.contracts.content.FolderCollection
	*/
	public static MozuClient<com.mozu.api.contracts.content.FolderCollection> getFoldersClient(String documentListName, String filter, Long pageSize, String sort, Long startIndex) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.FolderUrl.getFoldersUrl(documentListName, filter, pageSize, sort, startIndex);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.content.FolderCollection.class;
		MozuClient<com.mozu.api.contracts.content.FolderCollection> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	* Creates a new folder.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.Folder> mozuClient=CreateFolderClient( documentListName,  folder);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Folder folder = client.Result();
	* </code></pre></p>
	* @param documentListName The name of the document list for which to create a new folder.
	* @param folder The name of the newly created folder.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.Folder>
	* @see com.mozu.api.contracts.content.Folder
	* @see com.mozu.api.contracts.content.Folder
	*/
	public static MozuClient<com.mozu.api.contracts.content.Folder> createFolderClient(String documentListName, com.mozu.api.contracts.content.Folder folder) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.FolderUrl.createFolderUrl(documentListName);
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.content.Folder.class;
		MozuClient<com.mozu.api.contracts.content.Folder> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(folder);
		return mozuClient;

	}

	/**
	* Updates an existing content folder in a document list.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.content.Folder> mozuClient=UpdateFolderClient( documentListName,  folderId,  folder);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Folder folder = client.Result();
	* </code></pre></p>
	* @param documentListName The name of the document list that contains this folder.
	* @param folderId Unique identifier of the folder.
	* @param folder Properties of the folder to update.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.content.Folder>
	* @see com.mozu.api.contracts.content.Folder
	* @see com.mozu.api.contracts.content.Folder
	*/
	public static MozuClient<com.mozu.api.contracts.content.Folder> updateFolderClient(String documentListName, String folderId, com.mozu.api.contracts.content.Folder folder) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.FolderUrl.updateFolderUrl(documentListName, folderId);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.content.Folder.class;
		MozuClient<com.mozu.api.contracts.content.Folder> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(folder);
		return mozuClient;

	}

	/**
	* Deletes a folder of documents from the specified document list.
	* <p><pre><code>
	*   MozuClient mozuClient=DeleteFolderClient( documentListName,  folderId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the folder to delete.
	* @param folderId The unique identifier of the folder to delete.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deleteFolderClient(String documentListName, String folderId) throws Exception
	{
		String url = com.mozu.api.urls.content.documentlists.FolderUrl.deleteFolderUrl(documentListName, folderId);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}


}



