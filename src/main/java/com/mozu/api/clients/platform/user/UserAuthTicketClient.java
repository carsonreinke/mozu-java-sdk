/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.clients.platform.user;

import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Manage the user authentication tickets used to perform operations in the Mozu API.
/// </summary>
public class UserAuthTicketClient {
	
	
		/**
	* Generates an authentication ticket for a user.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.core.UserAuthTicket> mozuClient=CreateUserAuthTicketClient( userAuthInfo);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* UserAuthTicket userAuthTicket = client.Result();
	* </code></pre></p>
	* @param userAuthInfo The user authentication information, which consists of email address and password.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.core.UserAuthTicket>
	* @see com.mozu.api.contracts.core.UserAuthTicket
	* @see com.mozu.api.contracts.core.UserAuthInfo
	*/
	public static MozuClient<com.mozu.api.contracts.core.UserAuthTicket> createUserAuthTicketClient(com.mozu.api.contracts.core.UserAuthInfo userAuthInfo) throws Exception
	{
		String url = com.mozu.api.urls.platform.user.UserAuthTicketUrl.createUserAuthTicketUrl();
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.core.UserAuthTicket.class;
		MozuClient<com.mozu.api.contracts.core.UserAuthTicket> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(userAuthInfo);
		return mozuClient;

	}

/**
	* Generates an authentication ticket for a user that can be used for an individual site.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.core.UserAuthTicket> mozuClient=CreateAuthTicketForSiteClient( userAuthInfo);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* UserAuthTicket userAuthTicket = client.Result();
	* </code></pre></p>
	* @param userAuthInfo The user authentication information, which consists of email address and password.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.core.UserAuthTicket>
	* @see com.mozu.api.contracts.core.UserAuthTicket
	* @see com.mozu.api.contracts.core.UserTokenInfo
	*/
	public static MozuClient<com.mozu.api.contracts.core.UserAuthTicket> createAuthTicketForSiteClient(com.mozu.api.contracts.core.UserTokenInfo userAuthInfo) throws Exception
	{
		String url = com.mozu.api.urls.platform.user.UserAuthTicketUrl.createAuthTicketForSiteUrl();
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.core.UserAuthTicket.class;
		MozuClient<com.mozu.api.contracts.core.UserAuthTicket> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(userAuthInfo);
		return mozuClient;

	}

	/**
	* Refresh the user authentication ticket by supplying the refresh token.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.core.UserAuthTicket> mozuClient=RefreshUserAuthTicketClient( refreshToken);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* UserAuthTicket userAuthTicket = client.Result();
	* </code></pre></p>
	* @param refreshToken The refresh token generated in the user authentication ticket.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.core.UserAuthTicket>
	* @see com.mozu.api.contracts.core.UserAuthTicket
	*/
	public static MozuClient<com.mozu.api.contracts.core.UserAuthTicket> refreshUserAuthTicketClient(String refreshToken) throws Exception
	{
		String url = com.mozu.api.urls.platform.user.UserAuthTicketUrl.refreshUserAuthTicketUrl(refreshToken);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.core.UserAuthTicket.class;
		MozuClient<com.mozu.api.contracts.core.UserAuthTicket> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	
}



