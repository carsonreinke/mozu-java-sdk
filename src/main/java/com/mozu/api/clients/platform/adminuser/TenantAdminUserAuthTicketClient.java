/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.clients.platform.adminuser;

import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use the Admin user Authtickets resource to generate and refresh authentication tickets for Mozu administrator or developer account users to access tenants or development stores.
/// </summary>
public class TenantAdminUserAuthTicketClient {
	
	
		/**
	* Creates an authentication ticket for the supplied user to specify in API requests associated with the supplied tenant.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket> mozuClient=CreateUserAuthTicketClient( userAuthInfo);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* TenantAdminUserAuthTicket tenantAdminUserAuthTicket = client.Result();
	* </code></pre></p>
	* @param userAuthInfo The user authentication information required to generate the user authentication ticket, which consists of a user name and password.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket>
	* @see com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket
	* @see com.mozu.api.contracts.core.UserAuthInfo
	*/
	public static MozuClient<com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket> createUserAuthTicketClient(com.mozu.api.contracts.core.UserAuthInfo userAuthInfo) throws Exception
	{
		return createUserAuthTicketClient( null,  userAuthInfo);
	}

/**
	* Creates an authentication ticket for the supplied user to specify in API requests associated with the supplied tenant.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket> mozuClient=CreateUserAuthTicketClient( tenantId,  userAuthInfo);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* TenantAdminUserAuthTicket tenantAdminUserAuthTicket = client.Result();
	* </code></pre></p>
	* @param tenantId Unique identifier of the Mozu tenant or development store for which to generate the user authentication ticket.
	* @param userAuthInfo The user authentication information required to generate the user authentication ticket, which consists of a user name and password.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket>
	* @see com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket
	* @see com.mozu.api.contracts.core.UserAuthInfo
	*/
	public static MozuClient<com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket> createUserAuthTicketClient(Integer tenantId, com.mozu.api.contracts.core.UserAuthInfo userAuthInfo) throws Exception
	{
		String url = com.mozu.api.urls.platform.adminuser.TenantAdminUserAuthTicketUrl.createUserAuthTicketUrl(tenantId);
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket.class;
		MozuClient<com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(userAuthInfo);
		return mozuClient;

	}

	/**
	* Generates a new user authentication ticket for the specified tenant by supplying the user's existing refresh token information.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket> mozuClient=RefreshAuthTicketClient( existingAuthTicket);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* TenantAdminUserAuthTicket tenantAdminUserAuthTicket = client.Result();
	* </code></pre></p>
	* @param existingAuthTicket Properties of the authentication ticket to refresh. The refresh token is required to complete this request.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket>
	* @see com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket
	* @see com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket
	*/
	public static MozuClient<com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket> refreshAuthTicketClient(com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket existingAuthTicket) throws Exception
	{
		return refreshAuthTicketClient( null,  existingAuthTicket);
	}

/**
	* Generates a new user authentication ticket for the specified tenant by supplying the user's existing refresh token information.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket> mozuClient=RefreshAuthTicketClient( tenantId,  existingAuthTicket);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* TenantAdminUserAuthTicket tenantAdminUserAuthTicket = client.Result();
	* </code></pre></p>
	* @param tenantId Unique identifier of the Mozu tenant or development store for which to refresh the authentication ticket.
	* @param existingAuthTicket Properties of the authentication ticket to refresh. The refresh token is required to complete this request.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket>
	* @see com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket
	* @see com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket
	*/
	public static MozuClient<com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket> refreshAuthTicketClient(Integer tenantId, com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket existingAuthTicket) throws Exception
	{
		String url = com.mozu.api.urls.platform.adminuser.TenantAdminUserAuthTicketUrl.refreshAuthTicketUrl(tenantId);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket.class;
		MozuClient<com.mozu.api.contracts.adminuser.TenantAdminUserAuthTicket> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(existingAuthTicket);
		return mozuClient;

	}

	/**
	* Deletes the authentication ticket for the user by supplying the refresh token.
	* <p><pre><code>
	*   MozuClient mozuClient=DeleteUserAuthTicketClient( refreshToken);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param refreshToken Refresh token string associated with the user authentication ticket.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deleteUserAuthTicketClient(String refreshToken) throws Exception
	{
		String url = com.mozu.api.urls.platform.adminuser.TenantAdminUserAuthTicketUrl.deleteUserAuthTicketUrl(refreshToken);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}


}



