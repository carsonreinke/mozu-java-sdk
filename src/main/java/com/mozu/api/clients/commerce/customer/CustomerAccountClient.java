/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.clients.commerce.customer;

import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * 
 * </summary>
 */
public class CustomerAccountClient {
	
	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.customer.CustomerAccountCollection> mozuClient=GetAccountsClient();
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * CustomerAccountCollection customerAccountCollection = client.Result();
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CustomerAccountCollection>
	 * @see com.mozu.api.contracts.customer.CustomerAccountCollection
	 */
	public static MozuClient<com.mozu.api.contracts.customer.CustomerAccountCollection> getAccountsClient() throws Exception
	{
		return getAccountsClient( null,  null,  null,  null,  null,  null,  null, null);
	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.customer.CustomerAccountCollection> mozuClient=GetAccountsClient( fields,  filter,  pageSize,  q,  qLimit,  sortBy,  startIndex, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * CustomerAccountCollection customerAccountCollection = client.Result();
	 * </code></pre></p>
	 * @param fields 
	 * @param filter 
	 * @param pageSize 
	 * @param q 
	 * @param qLimit 
	 * @param sortBy 
	 * @param startIndex 
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CustomerAccountCollection>
	 * @see com.mozu.api.contracts.customer.CustomerAccountCollection
	 */
	public static MozuClient<com.mozu.api.contracts.customer.CustomerAccountCollection> getAccountsClient(String fields, String filter, Integer pageSize, String q, Integer qLimit, String sortBy, Integer startIndex, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerAccountUrl.getAccountsUrl(fields, filter, pageSize, q, qLimit, sortBy, startIndex);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.customer.CustomerAccountCollection.class;
		MozuClient<com.mozu.api.contracts.customer.CustomerAccountCollection> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.customer.CustomerAccount> mozuClient=GetAccountClient( accountId, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * CustomerAccount customerAccount = client.Result();
	 * </code></pre></p>
	 * @param accountId 
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CustomerAccount>
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 */
	public static MozuClient<com.mozu.api.contracts.customer.CustomerAccount> getAccountClient(Integer accountId, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerAccountUrl.getAccountUrl(accountId);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.customer.CustomerAccount.class;
		MozuClient<com.mozu.api.contracts.customer.CustomerAccount> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription> mozuClient=GetInStockNotificationClient( accountId,  inStockNotificationSubscriptionId, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * CustomerInStockNotificationSubscription customerInStockNotificationSubscription = client.Result();
	 * </code></pre></p>
	 * @param accountId 
	 * @param inStockNotificationSubscriptionId 
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription>
	 * @see com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription
	 */
	public static MozuClient<com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription> getInStockNotificationClient(Integer accountId, Integer inStockNotificationSubscriptionId, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerAccountUrl.getInStockNotificationUrl(accountId, inStockNotificationSubscriptionId);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription.class;
		MozuClient<com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection> mozuClient=GetInStockNotificationsClient( accountId);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * CustomerInStockNotificationSubscriptionCollection customerInStockNotificationSubscriptionCollection = client.Result();
	 * </code></pre></p>
	 * @param accountId 
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection>
	 * @see com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection
	 */
	public static MozuClient<com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection> getInStockNotificationsClient(Integer accountId) throws Exception
	{
		return getInStockNotificationsClient( accountId,  null,  null,  null,  null, null);
	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection> mozuClient=GetInStockNotificationsClient( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * CustomerInStockNotificationSubscriptionCollection customerInStockNotificationSubscriptionCollection = client.Result();
	 * </code></pre></p>
	 * @param accountId 
	 * @param filter 
	 * @param pageSize 
	 * @param sortBy 
	 * @param startIndex 
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection>
	 * @see com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection
	 */
	public static MozuClient<com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection> getInStockNotificationsClient(Integer accountId, String filter, Integer pageSize, String sortBy, Integer startIndex, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerAccountUrl.getInStockNotificationsUrl(accountId, filter, pageSize, sortBy, startIndex);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection.class;
		MozuClient<com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.customer.CustomerAccount> mozuClient=AddAccountClient( account, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * CustomerAccount customerAccount = client.Result();
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @param account 
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CustomerAccount>
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 */
	public static MozuClient<com.mozu.api.contracts.customer.CustomerAccount> addAccountClient(com.mozu.api.contracts.customer.CustomerAccount account, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerAccountUrl.addAccountUrl();
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.customer.CustomerAccount.class;
		MozuClient<com.mozu.api.contracts.customer.CustomerAccount> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(account);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription> mozuClient=AddInStockNotificationClient( inStockNotificationSubscription,  accountId, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * CustomerInStockNotificationSubscription customerInStockNotificationSubscription = client.Result();
	 * </code></pre></p>
	 * @param accountId 
	 * @param authTicket User Auth Ticket
	 * @param inStockNotificationSubscription 
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription>
	 * @see com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription
	 * @see com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription
	 */
	public static MozuClient<com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription> addInStockNotificationClient(com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription inStockNotificationSubscription, Integer accountId, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerAccountUrl.addInStockNotificationUrl(accountId);
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription.class;
		MozuClient<com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(inStockNotificationSubscription);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient mozuClient=RecomputeCustomerLifetimeValueClient( accountId, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * </code></pre></p>
	 * @param accountId 
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient 
	 */
	public static MozuClient recomputeCustomerLifetimeValueClient(Integer accountId, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerAccountUrl.recomputeCustomerLifetimeValueUrl(accountId);
		String verb = "POST";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.customer.CustomerAccount> mozuClient=UpdateAccountClient( account,  accountId, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * CustomerAccount customerAccount = client.Result();
	 * </code></pre></p>
	 * @param accountId 
	 * @param authTicket User Auth Ticket
	 * @param account 
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CustomerAccount>
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 */
	public static MozuClient<com.mozu.api.contracts.customer.CustomerAccount> updateAccountClient(com.mozu.api.contracts.customer.CustomerAccount account, Integer accountId, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerAccountUrl.updateAccountUrl(accountId);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.customer.CustomerAccount.class;
		MozuClient<com.mozu.api.contracts.customer.CustomerAccount> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(account);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient mozuClient=DeleteAccountClient( accountId, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * </code></pre></p>
	 * @param accountId 
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient 
	 */
	public static MozuClient deleteAccountClient(Integer accountId, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerAccountUrl.deleteAccountUrl(accountId);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

	/**
	 * 
	 * <p><pre><code>
	 * MozuClient mozuClient=DeleteInStockNotificationSubscriptionClient( accountId,  inStockNotificationSubscriptionId, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * </code></pre></p>
	 * @param accountId 
	 * @param inStockNotificationSubscriptionId 
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient 
	 */
	public static MozuClient deleteInStockNotificationSubscriptionClient(Integer accountId, Integer inStockNotificationSubscriptionId, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerAccountUrl.deleteInStockNotificationSubscriptionUrl(accountId, inStockNotificationSubscriptionId);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

}



