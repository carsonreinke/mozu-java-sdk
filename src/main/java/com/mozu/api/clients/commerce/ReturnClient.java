/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.clients.commerce;

import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use the returns subresource to manage returned items for a completed order. Returns can include any number of items associated with the original order.
/// </summary>
public class ReturnClient {
	
	
	/**
	* Retrieves a list of all returns according to any filter and sort criteria.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.returns.ReturnCollection> mozuClient=GetReturnsClient();
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ReturnCollection returnCollection = client.Result();
	* </code></pre></p>
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.returns.ReturnCollection>
	* @see com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.returns.ReturnCollection> getReturnsClient() throws Exception
	{
		return getReturnsClient( null,  null,  null,  null);
	}

/**
	* Retrieves a list of all returns according to any filter and sort criteria.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.returns.ReturnCollection> mozuClient=GetReturnsClient( filter,  pageSize,  sortBy,  startIndex);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ReturnCollection returnCollection = client.Result();
	* </code></pre></p>
	* @param filter 
	* @param pageSize 
	* @param sortBy 
	* @param startIndex 
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.returns.ReturnCollection>
	* @see com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.returns.ReturnCollection> getReturnsClient(String filter, Integer pageSize, String sortBy, Integer startIndex) throws Exception
	{
		String url = com.mozu.api.urls.commerce.ReturnUrl.getReturnsUrl(filter, pageSize, sortBy, startIndex);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.returns.ReturnCollection.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.ReturnCollection> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves a list of properties for the specified return.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> mozuClient=GetReturnClient( returnId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Return return = client.Result();
	* </code></pre></p>
	* @param returnId Returns the properties of the return specified in the request as well as system-supplied information.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.returns.Return>
	* @see com.mozu.api.contracts.commerceruntime.returns.Return
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> getReturnClient(String returnId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.ReturnUrl.getReturnUrl(returnId);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.returns.Return.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves a list of the actions available to perform for the specified return based on its current state.
	* <p><pre><code>
	*   MozuClient<ArrayList<String>> mozuClient=GetAvailableReturnActionsClient( returnId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* string string = client.Result();
	* </code></pre></p>
	* @param returnId Retrieves a list of the actions available to perform for the specified return based on its current state.
	* @return Mozu.Api.MozuClient <List<string>>
	* @see string
	*/
	public static MozuClient<ArrayList<String>> getAvailableReturnActionsClient(String returnId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.ReturnUrl.getAvailableReturnActionsUrl(returnId);
		String verb = "GET";
		Class<?> clz = new ArrayList<String>(){}.getClass();
		MozuClient<ArrayList<String>> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves a list of all payments submitted as part of a refund associated with a customer return.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.payments.PaymentCollection> mozuClient=GetPaymentsClient( returnId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* PaymentCollection paymentCollection = client.Result();
	* </code></pre></p>
	* @param returnId Returns the details of the refund payment associated with the return specified in the request.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.payments.PaymentCollection>
	* @see com.mozu.api.contracts.commerceruntime.payments.PaymentCollection
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.payments.PaymentCollection> getPaymentsClient(String returnId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.ReturnUrl.getPaymentsUrl(returnId);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.payments.PaymentCollection.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.payments.PaymentCollection> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves the details of a payment submitted as part of a refund associated with a customer return.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.payments.Payment> mozuClient=GetPaymentClient( paymentId,  returnId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Payment payment = client.Result();
	* </code></pre></p>
	* @param paymentId Unique identifier of the return payment to retrieve.
	* @param returnId Unique identifier of the return associated with the payment.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.payments.Payment>
	* @see com.mozu.api.contracts.commerceruntime.payments.Payment
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.payments.Payment> getPaymentClient(String paymentId, String returnId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.ReturnUrl.getPaymentUrl(paymentId, returnId);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.payments.Payment.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.payments.Payment> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves a list of the payment actions available to perform for the specified return when a return results in a refund to the customer.
	* <p><pre><code>
	*   MozuClient<ArrayList<String>> mozuClient=GetAvailablePaymentActionsForReturnClient( paymentId,  returnId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* string string = client.Result();
	* </code></pre></p>
	* @param paymentId Unique identifier of the payment for which to perform the action.
	* @param returnId Unique identifier of the return associated with the payment.
	* @return Mozu.Api.MozuClient <List<string>>
	* @see string
	*/
	public static MozuClient<ArrayList<String>> getAvailablePaymentActionsForReturnClient(String paymentId, String returnId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.ReturnUrl.getAvailablePaymentActionsForReturnUrl(paymentId, returnId);
		String verb = "GET";
		Class<?> clz = new ArrayList<String>(){}.getClass();
		MozuClient<ArrayList<String>> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	* Creates a return for items previously shipped in a completed order.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> mozuClient=CreateReturnClient( ret);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Return return = client.Result();
	* </code></pre></p>
	* @param ret Wrapper for the properties of the return to create.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.returns.Return>
	* @see com.mozu.api.contracts.commerceruntime.returns.Return
	* @see com.mozu.api.contracts.commerceruntime.returns.Return
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> createReturnClient(com.mozu.api.contracts.commerceruntime.returns.Return ret) throws Exception
	{
		String url = com.mozu.api.urls.commerce.ReturnUrl.createReturnUrl();
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.returns.Return.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(ret);
		return mozuClient;

	}

/**
	* Updates a refund payment associated with a customer return by performing the specified action.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> mozuClient=PerformPaymentActionForReturnClient( paymentId,  returnId,  action);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Return return = client.Result();
	* </code></pre></p>
	* @param paymentId Unique identifier of the return payment to update.
	* @param returnId Unique identifier of the return associated with the refund payment.
	* @param action The payment action to perform for the refund payment.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.returns.Return>
	* @see com.mozu.api.contracts.commerceruntime.returns.Return
	* @see com.mozu.api.contracts.commerceruntime.payments.PaymentAction
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> performPaymentActionForReturnClient(String paymentId, String returnId, com.mozu.api.contracts.commerceruntime.payments.PaymentAction action) throws Exception
	{
		String url = com.mozu.api.urls.commerce.ReturnUrl.performPaymentActionForReturnUrl(paymentId, returnId);
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.returns.Return.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(action);
		return mozuClient;

	}

/**
	* Creates a new payment for a return that results in a refund to the customer.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> mozuClient=CreatePaymentActionForReturnClient( returnId,  action);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Return return = client.Result();
	* </code></pre></p>
	* @param returnId Unique identifier of the return associated with the payment action.
	* @param action The payment action to perform for the customer return.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.returns.Return>
	* @see com.mozu.api.contracts.commerceruntime.returns.Return
	* @see com.mozu.api.contracts.commerceruntime.payments.PaymentAction
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> createPaymentActionForReturnClient(String returnId, com.mozu.api.contracts.commerceruntime.payments.PaymentAction action) throws Exception
	{
		String url = com.mozu.api.urls.commerce.ReturnUrl.createPaymentActionForReturnUrl(returnId);
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.returns.Return.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(action);
		return mozuClient;

	}

/**
	* Updates the return by performing the specified action.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.returns.ReturnCollection> mozuClient=PerformReturnActionsClient( action);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ReturnCollection returnCollection = client.Result();
	* </code></pre></p>
	* @param action The name of the return action to perform, such as "Refund" or "Replace".
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.returns.ReturnCollection>
	* @see com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	* @see com.mozu.api.contracts.commerceruntime.returns.ReturnAction
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.returns.ReturnCollection> performReturnActionsClient(com.mozu.api.contracts.commerceruntime.returns.ReturnAction action) throws Exception
	{
		String url = com.mozu.api.urls.commerce.ReturnUrl.performReturnActionsUrl();
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.returns.ReturnCollection.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.ReturnCollection> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(action);
		return mozuClient;

	}

	/**
	* Updates one or more properties of a return for items previously shipped in a completed order.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> mozuClient=UpdateReturnClient( returnId,  ret);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Return return = client.Result();
	* </code></pre></p>
	* @param returnId Unique identifier of the return.
	* @param ret Wrapper for the array of properties to update for the return.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.returns.Return>
	* @see com.mozu.api.contracts.commerceruntime.returns.Return
	* @see com.mozu.api.contracts.commerceruntime.returns.Return
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> updateReturnClient(String returnId, com.mozu.api.contracts.commerceruntime.returns.Return ret) throws Exception
	{
		String url = com.mozu.api.urls.commerce.ReturnUrl.updateReturnUrl(returnId);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.returns.Return.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(ret);
		return mozuClient;

	}

	/**
	* Deletes a return previously configured for the specified order.
	* <p><pre><code>
	*   MozuClient mozuClient=DeleteReturnClient( returnId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param returnId Unique identifier of the return to delete from the order.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deleteReturnClient(String returnId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.ReturnUrl.deleteReturnUrl(returnId);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}


}



