/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.clients.commerce.customer;

import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * Use the Groups resource to manage customer groups that enable a merchant to manage sets of customers and target discounts for these groups. After a customer group is defined, you can associate any number of customer accounts with the group.
 * </summary>
 */
public class CustomerGroupClient {
	
	/**
	 * Retrieves a list of all customer groups defined for the site according to any specified filter criteria and sort options.
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.customer.CustomerGroupCollection> mozuClient=GetGroupsClient();
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * CustomerGroupCollection customerGroupCollection = client.Result();
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CustomerGroupCollection>
	 * @see com.mozu.api.contracts.customer.CustomerGroupCollection
	 */
	public static MozuClient<com.mozu.api.contracts.customer.CustomerGroupCollection> getGroupsClient() throws Exception
	{
		return getGroupsClient( null,  null,  null,  null, null);
	}

	/**
	 * Retrieves a list of all customer groups defined for the site according to any specified filter criteria and sort options.
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.customer.CustomerGroupCollection> mozuClient=GetGroupsClient( startIndex,  pageSize,  sortBy,  filter, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * CustomerGroupCollection customerGroupCollection = client.Result();
	 * </code></pre></p>
	 * @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	 * @param pageSize The number of results to display on each page when creating paged results from a query. The maximum value is 200.
	 * @param sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
	 * @param startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CustomerGroupCollection>
	 * @see com.mozu.api.contracts.customer.CustomerGroupCollection
	 */
	public static MozuClient<com.mozu.api.contracts.customer.CustomerGroupCollection> getGroupsClient(Integer startIndex, Integer pageSize, String sortBy, String filter, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerGroupUrl.getGroupsUrl(filter, pageSize, sortBy, startIndex);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.customer.CustomerGroupCollection.class;
		MozuClient<com.mozu.api.contracts.customer.CustomerGroupCollection> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

	/**
	 * Retrieves the name of a customer group specified the customer group ID.
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.customer.CustomerGroup> mozuClient=GetGroupClient( groupId, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * CustomerGroup customerGroup = client.Result();
	 * </code></pre></p>
	 * @param groupId Identifier of the customer group to retrieve.
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CustomerGroup>
	 * @see com.mozu.api.contracts.customer.CustomerGroup
	 */
	public static MozuClient<com.mozu.api.contracts.customer.CustomerGroup> getGroupClient(Integer groupId, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerGroupUrl.getGroupUrl(groupId);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.customer.CustomerGroup.class;
		MozuClient<com.mozu.api.contracts.customer.CustomerGroup> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

	/**
	 * Creates a new customer group. New customer groups do not have any associated customer accounts.
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.customer.CustomerGroup> mozuClient=AddGroupClient( group, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * CustomerGroup customerGroup = client.Result();
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @param group Properties of the customer group to add.
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CustomerGroup>
	 * @see com.mozu.api.contracts.customer.CustomerGroup
	 * @see com.mozu.api.contracts.customer.CustomerGroup
	 */
	public static MozuClient<com.mozu.api.contracts.customer.CustomerGroup> addGroupClient(com.mozu.api.contracts.customer.CustomerGroup group, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerGroupUrl.addGroupUrl();
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.customer.CustomerGroup.class;
		MozuClient<com.mozu.api.contracts.customer.CustomerGroup> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(group);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

	/**
	 * Updates the name of a defined customer group.
	 * <p><pre><code>
	 * MozuClient<com.mozu.api.contracts.customer.CustomerGroup> mozuClient=UpdateGroupClient( group,  groupId, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * CustomerGroup customerGroup = client.Result();
	 * </code></pre></p>
	 * @param groupId Identifier of the customer group to update.
	 * @param authTicket User Auth Ticket
	 * @param group Properties of the customer group to update.
	 * @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CustomerGroup>
	 * @see com.mozu.api.contracts.customer.CustomerGroup
	 * @see com.mozu.api.contracts.customer.CustomerGroup
	 */
	public static MozuClient<com.mozu.api.contracts.customer.CustomerGroup> updateGroupClient(com.mozu.api.contracts.customer.CustomerGroup group, Integer groupId, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerGroupUrl.updateGroupUrl(groupId);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.customer.CustomerGroup.class;
		MozuClient<com.mozu.api.contracts.customer.CustomerGroup> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(group);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

	/**
	 * Deletes a customer group specified by its unique identifier. Deleting a group removes any customer account associations, but does not delete the customer account itself.
	 * <p><pre><code>
	 * MozuClient mozuClient=DeleteGroupClient( groupId, authTicket);
	 * client.setBaseAddress(url);
	 * client.executeRequest();
	 * </code></pre></p>
	 * @param groupId Identifier of the customer group to delete.
	 * @param authTicket User Auth Ticket
	 * @return Mozu.Api.MozuClient 
	 */
	public static MozuClient deleteGroupClient(Integer groupId, AuthTicket authTicket) throws Exception
	{
		MozuUrl url = com.mozu.api.urls.commerce.customer.CustomerGroupUrl.deleteGroupUrl(groupId);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		if (authTicket != null)
			mozuClient.setUserAuth(authTicket);
		return mozuClient;

	}

}



