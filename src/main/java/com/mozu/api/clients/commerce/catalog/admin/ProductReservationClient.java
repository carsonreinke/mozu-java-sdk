/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.clients.commerce.catalog.admin;

import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Temporarily hold a product from inventory while a shopper is filling out payment information. Create a product reservation when a shopper proceeds to check out and then release the reservation when the order process is complete.
/// </summary>
public class ProductReservationClient {
	
	
	/**
	* Retrieves a list of product reservations according to any specified filter criteria and sort options.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductReservationCollection> mozuClient=GetProductReservationsClient();
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductReservationCollection productReservationCollection = client.Result();
	* </code></pre></p>
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductReservationCollection>
	* @see com.mozu.api.contracts.productadmin.ProductReservationCollection
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductReservationCollection> getProductReservationsClient() throws Exception
	{
		return getProductReservationsClient( null,  null,  null,  null);
	}

/**
	* Retrieves a list of product reservations according to any specified filter criteria and sort options.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductReservationCollection> mozuClient=GetProductReservationsClient( filter,  pageSize,  sortBy,  startIndex);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductReservationCollection productReservationCollection = client.Result();
	* </code></pre></p>
	* @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param sortBy 
	* @param startIndex 
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductReservationCollection>
	* @see com.mozu.api.contracts.productadmin.ProductReservationCollection
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductReservationCollection> getProductReservationsClient(String filter, Integer pageSize, String sortBy, Integer startIndex) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.ProductReservationUrl.getProductReservationsUrl(filter, pageSize, sortBy, startIndex);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.productadmin.ProductReservationCollection.class;
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservationCollection> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves the details of a product reservation.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> mozuClient=GetProductReservationClient( productReservationId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductReservation productReservation = client.Result();
	* </code></pre></p>
	* @param productReservationId Unique identifier of the product reservation.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductReservation>
	* @see com.mozu.api.contracts.productadmin.ProductReservation
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> getProductReservationClient(Integer productReservationId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.ProductReservationUrl.getProductReservationUrl(productReservationId);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.productadmin.ProductReservation.class;
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	* Creates a new product reservation for a product. This action places a hold on the product inventory for the quantity specified during the ordering process.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> mozuClient=AddProductReservationClient( productReservation);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductReservation productReservation = client.Result();
	* </code></pre></p>
	* @param productReservation Properties of the product reservation.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductReservation>
	* @see com.mozu.api.contracts.productadmin.ProductReservation
	* @see com.mozu.api.contracts.productadmin.ProductReservation
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> addProductReservationClient(com.mozu.api.contracts.productadmin.ProductReservation productReservation) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.ProductReservationUrl.addProductReservationUrl();
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.productadmin.ProductReservation.class;
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(productReservation);
		return mozuClient;

	}

/**
	* Commits a product reservation to decrement the product's inventory by the quantity specified then release the reservation once the order process completed successfully.
	* <p><pre><code>
	*   MozuClient mozuClient=CommitReservationClient( productReservationId,  qty);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param productReservationId Unique identifier of the reservation.
	* @param qty Number of product items to remove from inventory.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient commitReservationClient(Integer productReservationId, Integer qty) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.ProductReservationUrl.commitReservationUrl(productReservationId, qty);
		String verb = "POST";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	* Updates an existing product reservation for a product. 
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> mozuClient=UpdateProductReservationClient( productReservationId,  productReservation);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductReservation productReservation = client.Result();
	* </code></pre></p>
	* @param productReservationId Unique identifier of the product reservation to update. 
	* @param productReservation Properties of the product reservation to update. 
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductReservation>
	* @see com.mozu.api.contracts.productadmin.ProductReservation
	* @see com.mozu.api.contracts.productadmin.ProductReservation
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> updateProductReservationClient(Integer productReservationId, com.mozu.api.contracts.productadmin.ProductReservation productReservation) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.ProductReservationUrl.updateProductReservationUrl(productReservationId);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.productadmin.ProductReservation.class;
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(productReservation);
		return mozuClient;

	}

	/**
	* Deletes a product reservation. For example, delete a reservation when an order is not processed to return the product quantity back to inventory.
	* <p><pre><code>
	*   MozuClient mozuClient=DeleteProductReservationClient( productReservationId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param productReservationId Unique identifier of the reservation.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deleteProductReservationClient(Integer productReservationId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.ProductReservationUrl.deleteProductReservationUrl(productReservationId);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}


}



