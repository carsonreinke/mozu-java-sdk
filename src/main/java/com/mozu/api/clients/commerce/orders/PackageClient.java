/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.clients.commerce.orders;

import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use the packages subresource to manage the physical packages to ship for an order.
/// </summary>
public class PackageClient {
	
	
	/**
	* Retrieves the details of a package of order items.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.shipping.Package> mozuClient=GetPackageClient( orderId,  packageId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Package package = client.Result();
	* </code></pre></p>
	* @param orderId Unique identifier of the order associated with the package to retrieve.
	* @param packageId Unique identifier of the package to retrieve.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.shipping.Package>
	* @see com.mozu.api.contracts.commerceruntime.shipping.Package
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.shipping.Package> getPackageClient(String orderId, String packageId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.orders.PackageUrl.getPackageUrl(orderId, packageId);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.shipping.Package.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.shipping.Package> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves the package label image supplied by the carrier.
	* <p><pre><code>
	*   MozuClient mozuClient=GetPackageLabelClient( orderId,  packageId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param orderId Unique identifier of the order associated with the package label to retrieve.
	* @param packageId Unique identifier of the package for which to retrieve the label.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient getPackageLabelClient(String orderId, String packageId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.orders.PackageUrl.getPackageLabelUrl(orderId, packageId);
		String verb = "GET";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	* Creates a new physical package of order items.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.shipping.Package> mozuClient=CreatePackageClient( orderId,  pkg);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Package package = client.Result();
	* </code></pre></p>
	* @param orderId Unique identifier of the order associated with this package.
	* @param package Properties of the physical package of order items.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.shipping.Package>
	* @see com.mozu.api.contracts.commerceruntime.shipping.Package
	* @see com.mozu.api.contracts.commerceruntime.shipping.Package
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.shipping.Package> createPackageClient(String orderId, com.mozu.api.contracts.commerceruntime.shipping.Package pkg) throws Exception
	{
		String url = com.mozu.api.urls.commerce.orders.PackageUrl.createPackageUrl(orderId);
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.shipping.Package.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.shipping.Package> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(pkg);
		return mozuClient;

	}

	/**
	* Updates one or more properties of a physical package of order items.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.shipping.Package> mozuClient=UpdatePackageClient( orderId,  packageId,  pkg);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Package package = client.Result();
	* </code></pre></p>
	* @param orderId Unique identifier of the order associated with the package to update.
	* @param packageId Unique identifier of the package of order items to update.
	* @param package Wrapper of properties for the package of order items to update.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.shipping.Package>
	* @see com.mozu.api.contracts.commerceruntime.shipping.Package
	* @see com.mozu.api.contracts.commerceruntime.shipping.Package
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.shipping.Package> updatePackageClient(String orderId, String packageId, com.mozu.api.contracts.commerceruntime.shipping.Package pkg) throws Exception
	{
		String url = com.mozu.api.urls.commerce.orders.PackageUrl.updatePackageUrl(orderId, packageId);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.shipping.Package.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.shipping.Package> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(pkg);
		return mozuClient;

	}

	/**
	* Removes a physical package of items from the specified order.
	* <p><pre><code>
	*   MozuClient mozuClient=DeletePackageClient( orderId,  packageId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param orderId Unique identifier of the order associated with the package to delete.
	* @param packageId Unique identifier of the package to delete.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deletePackageClient(String orderId, String packageId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.orders.PackageUrl.deletePackageUrl(orderId, packageId);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}


}



