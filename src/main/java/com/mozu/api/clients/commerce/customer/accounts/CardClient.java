/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.clients.commerce.customer.accounts;

import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use the Cards subresource to manage stored credit cards for customer accounts. Mozu stores limited card data in the Customer service for expedited ordering purposes; however, the complete card data is stored in the Payment service.
/// </summary>
public class CardClient {
	
	
	/**
	* Retrieves all stored credit cards for the customer account.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.customer.CardCollection> mozuClient=GetAccountCardsClient( accountId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* CardCollection cardCollection = client.Result();
	* </code></pre></p>
	* @param accountId Unique identifier of the customer account.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.CardCollection>
	* @see com.mozu.api.contracts.customer.CardCollection
	*/
	public static MozuClient<com.mozu.api.contracts.customer.CardCollection> getAccountCardsClient(Integer accountId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.customer.accounts.CardUrl.getAccountCardsUrl(accountId);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.customer.CardCollection.class;
		MozuClient<com.mozu.api.contracts.customer.CardCollection> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	* Creates a new credit card record and stores it for the customer account.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.customer.Card> mozuClient=AddAccountCardClient( accountId,  card);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Card card = client.Result();
	* </code></pre></p>
	* @param accountId Unique identifier of the customer account.
	* @param card Properties of the customer credit card to add to the account.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.Card>
	* @see com.mozu.api.contracts.customer.Card
	* @see com.mozu.api.contracts.customer.Card
	*/
	public static MozuClient<com.mozu.api.contracts.customer.Card> addAccountCardClient(Integer accountId, com.mozu.api.contracts.customer.Card card) throws Exception
	{
		String url = com.mozu.api.urls.commerce.customer.accounts.CardUrl.addAccountCardUrl(accountId);
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.customer.Card.class;
		MozuClient<com.mozu.api.contracts.customer.Card> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(card);
		return mozuClient;

	}

	/**
	* Update one or more properties of a credit card defined for a customer account.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.customer.Card> mozuClient=UpdateAccountCardClient( accountId,  card);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Card card = client.Result();
	* </code></pre></p>
	* @param accountId Unique identifier of the customer account.
	* @param card Properties of the customer account credit card to update.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.customer.Card>
	* @see com.mozu.api.contracts.customer.Card
	* @see com.mozu.api.contracts.customer.Card
	*/
	public static MozuClient<com.mozu.api.contracts.customer.Card> updateAccountCardClient(Integer accountId, com.mozu.api.contracts.customer.Card card) throws Exception
	{
		String url = com.mozu.api.urls.commerce.customer.accounts.CardUrl.updateAccountCardUrl(accountId);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.customer.Card.class;
		MozuClient<com.mozu.api.contracts.customer.Card> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(card);
		return mozuClient;

	}

	/**
	* Removes a stored credit card from a customer account.
	* <p><pre><code>
	*   MozuClient mozuClient=DeleteAccountCardClient( accountId,  cardId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param accountId Unique identifier of the customer account.
	* @param cardId Unique identifier of the credit card to delete.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deleteAccountCardClient(Integer accountId, String cardId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.customer.accounts.CardUrl.deleteAccountCardUrl(accountId, cardId);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}


}



