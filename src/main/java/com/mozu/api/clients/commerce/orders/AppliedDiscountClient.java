/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.clients.commerce.orders;

import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use this subresource to apply coupons to or remove coupons from an order based on a supplied coupon code.
/// </summary>
public class AppliedDiscountClient {
	
	
			/**
	* Apply a coupon to the order.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> mozuClient=ApplyCouponClient( couponCode,  orderId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Order order = client.Result();
	* </code></pre></p>
	* @param couponCode 
	* @param orderId Unique identifier of the order to associate the coupon. System-supplied and read-only.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.orders.Order>
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> applyCouponClient(String couponCode, String orderId) throws Exception
	{
		return applyCouponClient( couponCode,  orderId,  null,  null);
	}

/**
	* Apply a coupon to the order.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> mozuClient=ApplyCouponClient( couponCode,  orderId,  updateMode,  version);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Order order = client.Result();
	* </code></pre></p>
	* @param couponCode 
	* @param orderId Unique identifier of the order to associate the coupon. System-supplied and read-only.
	* @param updateMode Specifies whether to apply the coupon by updating the original order, updating the order in draft mode, or updating the order in draft mode and then commit the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param version If applicable, the version of the order or order draft to which to apply the coupon.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.orders.Order>
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> applyCouponClient(String couponCode, String orderId, String updateMode, String version) throws Exception
	{
		String url = com.mozu.api.urls.commerce.orders.AppliedDiscountUrl.applyCouponUrl(couponCode, orderId, updateMode, version);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.orders.Order.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	* Removes a coupon previously applied to the order.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> mozuClient=RemoveCouponClient( couponCode,  orderId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Order order = client.Result();
	* </code></pre></p>
	* @param couponCode 
	* @param orderId Unique identifier of the order with the coupon to remove.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.orders.Order>
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> removeCouponClient(String couponCode, String orderId) throws Exception
	{
		return removeCouponClient( couponCode,  orderId,  null,  null);
	}

/**
	* Removes a coupon previously applied to the order.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> mozuClient=RemoveCouponClient( couponCode,  orderId,  updateMode,  version);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Order order = client.Result();
	* </code></pre></p>
	* @param couponCode 
	* @param orderId Unique identifier of the order with the coupon to remove.
	* @param updateMode Specifies whether to remove the coupon by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param version If applicable, the version of the order or order draft from which to remove the coupon.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.orders.Order>
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> removeCouponClient(String couponCode, String orderId, String updateMode, String version) throws Exception
	{
		String url = com.mozu.api.urls.commerce.orders.AppliedDiscountUrl.removeCouponUrl(couponCode, orderId, updateMode, version);
		String verb = "DELETE";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.orders.Order.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Removes all coupons previously applied to the order.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> mozuClient=RemoveCouponsClient( orderId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Order order = client.Result();
	* </code></pre></p>
	* @param orderId Unique identifier of the order with the coupons to remove.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.orders.Order>
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> removeCouponsClient(String orderId) throws Exception
	{
		return removeCouponsClient( orderId,  null,  null);
	}

/**
	* Removes all coupons previously applied to the order.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> mozuClient=RemoveCouponsClient( orderId,  updateMode,  version);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Order order = client.Result();
	* </code></pre></p>
	* @param orderId Unique identifier of the order with the coupons to remove.
	* @param updateMode Specifies whether to remove coupons by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param version If applicable, the version of the order or order draft from which to remove coupons.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.orders.Order>
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> removeCouponsClient(String orderId, String updateMode, String version) throws Exception
	{
		String url = com.mozu.api.urls.commerce.orders.AppliedDiscountUrl.removeCouponsUrl(orderId, updateMode, version);
		String verb = "DELETE";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.orders.Order.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}


}



