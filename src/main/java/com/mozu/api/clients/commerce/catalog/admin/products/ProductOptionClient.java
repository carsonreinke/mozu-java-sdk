/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.clients.commerce.catalog.admin.products;

import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Query, create, and update product options.
/// </summary>
public class ProductOptionClient {
	
	
	/**
	* Retrieves a list of all option attributes configured for the product specified in the request.
	* <p><pre><code>
	*   MozuClient<ArrayList<com.mozu.api.contracts.productadmin.ProductOption>> mozuClient=GetOptionsClient( productCode);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductOption productOption = client.Result();
	* </code></pre></p>
	* @param productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @return Mozu.Api.MozuClient <List<com.mozu.api.contracts.productadmin.ProductOption>>
	* @see com.mozu.api.contracts.productadmin.ProductOption
	*/
	public static MozuClient<ArrayList<com.mozu.api.contracts.productadmin.ProductOption>> getOptionsClient(String productCode) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.products.ProductOptionUrl.getOptionsUrl(productCode);
		String verb = "GET";
		Class<?> clz = new ArrayList<com.mozu.api.contracts.productadmin.ProductOption>(){}.getClass();
		MozuClient<ArrayList<com.mozu.api.contracts.productadmin.ProductOption>> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves the catalog option by providing the product type ID and the attribute's fully qualified name.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductOption> mozuClient=GetOptionClient( attributeFQN,  productCode);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductOption productOption = client.Result();
	* </code></pre></p>
	* @param attributeFQN The fully qualified name of the attribute, which is a user defined attribute identifier.
	* @param productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductOption>
	* @see com.mozu.api.contracts.productadmin.ProductOption
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductOption> getOptionClient(String attributeFQN, String productCode) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.products.ProductOptionUrl.getOptionUrl(attributeFQN, productCode);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.productadmin.ProductOption.class;
		MozuClient<com.mozu.api.contracts.productadmin.ProductOption> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	* Adds or creates a product option.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductOption> mozuClient=AddOptionClient( productCode,  productOption);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductOption productOption = client.Result();
	* </code></pre></p>
	* @param productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param productOption The product option being added or created.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductOption>
	* @see com.mozu.api.contracts.productadmin.ProductOption
	* @see com.mozu.api.contracts.productadmin.ProductOption
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductOption> addOptionClient(String productCode, com.mozu.api.contracts.productadmin.ProductOption productOption) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.products.ProductOptionUrl.addOptionUrl(productCode);
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.productadmin.ProductOption.class;
		MozuClient<com.mozu.api.contracts.productadmin.ProductOption> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(productOption);
		return mozuClient;

	}

	/**
	* Updates a product option by providing the product type ID and the attribute's fully qualified name. There is also a request body to supply additional information.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductOption> mozuClient=UpdateOptionClient( attributeFQN,  productCode,  productOption);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductOption productOption = client.Result();
	* </code></pre></p>
	* @param attributeFQN The fully qualified name of the attribute, which is a user defined attribute identifier.
	* @param productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param productOption The product option being updated.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductOption>
	* @see com.mozu.api.contracts.productadmin.ProductOption
	* @see com.mozu.api.contracts.productadmin.ProductOption
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductOption> updateOptionClient(String attributeFQN, String productCode, com.mozu.api.contracts.productadmin.ProductOption productOption) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.products.ProductOptionUrl.updateOptionUrl(attributeFQN, productCode);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.productadmin.ProductOption.class;
		MozuClient<com.mozu.api.contracts.productadmin.ProductOption> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(productOption);
		return mozuClient;

	}

	/**
	* Deletes the catalog option by providing the product type ID and the attribute's fully qualified name.
	* <p><pre><code>
	*   MozuClient mozuClient=DeleteOptionClient( attributeFQN,  productCode);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param attributeFQN The fully qualified name of the attribute, which is a user defined attribute identifier.
	* @param productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deleteOptionClient(String attributeFQN, String productCode) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.products.ProductOptionUrl.deleteOptionUrl(attributeFQN, productCode);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}


}



