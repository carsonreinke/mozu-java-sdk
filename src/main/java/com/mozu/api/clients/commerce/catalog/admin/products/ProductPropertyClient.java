/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.clients.commerce.catalog.admin.products;

import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Query, create, and update product properties.
/// </summary>
public class ProductPropertyClient {
	
	
	/**
	* Retrieves a list of product properties by providing the product code.
	* <p><pre><code>
	*   MozuClient<ArrayList<com.mozu.api.contracts.productadmin.ProductProperty>> mozuClient=GetPropertiesClient( productCode);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductProperty productProperty = client.Result();
	* </code></pre></p>
	* @param productCode Identifies the product for which a list of properties is being retrieved.
	* @return Mozu.Api.MozuClient <List<com.mozu.api.contracts.productadmin.ProductProperty>>
	* @see com.mozu.api.contracts.productadmin.ProductProperty
	*/
	public static MozuClient<ArrayList<com.mozu.api.contracts.productadmin.ProductProperty>> getPropertiesClient(String productCode) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.products.ProductPropertyUrl.getPropertiesUrl(productCode);
		String verb = "GET";
		Class<?> clz = new ArrayList<com.mozu.api.contracts.productadmin.ProductProperty>(){}.getClass();
		MozuClient<ArrayList<com.mozu.api.contracts.productadmin.ProductProperty>> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves the individual product property by providing the product code and the attribute's fully qualified name.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductProperty> mozuClient=GetPropertyClient( attributeFQN,  productCode);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductProperty productProperty = client.Result();
	* </code></pre></p>
	* @param attributeFQN The fully qualified name of the attribute, which is a user defined attribute identifier.
	* @param productCode Identifies the product for which a single property is being retrieved.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductProperty>
	* @see com.mozu.api.contracts.productadmin.ProductProperty
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductProperty> getPropertyClient(String attributeFQN, String productCode) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.products.ProductPropertyUrl.getPropertyUrl(attributeFQN, productCode);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.productadmin.ProductProperty.class;
		MozuClient<com.mozu.api.contracts.productadmin.ProductProperty> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	* Adds or creates an individual property by providing the product code.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductProperty> mozuClient=AddPropertyClient( productCode,  productProperty);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductProperty productProperty = client.Result();
	* </code></pre></p>
	* @param productCode The merchant-created code that uniquely identifies the product such as a SKU or item number. Identifies the product for which a new property is created.
	* @param productProperty The details of the product property including the attribute detail, user's fully qualified name, and the list of product property values to add.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductProperty>
	* @see com.mozu.api.contracts.productadmin.ProductProperty
	* @see com.mozu.api.contracts.productadmin.ProductProperty
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductProperty> addPropertyClient(String productCode, com.mozu.api.contracts.productadmin.ProductProperty productProperty) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.products.ProductPropertyUrl.addPropertyUrl(productCode);
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.productadmin.ProductProperty.class;
		MozuClient<com.mozu.api.contracts.productadmin.ProductProperty> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(productProperty);
		return mozuClient;

	}

	/**
	* Update the details of a product property by providng the product code and the attribute's fully qualified name.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductProperty> mozuClient=UpdatePropertyClient( attributeFQN,  productCode,  productProperty);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductProperty productProperty = client.Result();
	* </code></pre></p>
	* @param attributeFQN The fully qualified name of the attribute, which is a user defined attribute identifier.
	* @param productCode Identifies the product for which a list of properties is being updated.
	* @param productProperty The details of the product property including the attribute detail, user's fully qualified name, and the list of product property values to update.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductProperty>
	* @see com.mozu.api.contracts.productadmin.ProductProperty
	* @see com.mozu.api.contracts.productadmin.ProductProperty
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductProperty> updatePropertyClient(String attributeFQN, String productCode, com.mozu.api.contracts.productadmin.ProductProperty productProperty) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.products.ProductPropertyUrl.updatePropertyUrl(attributeFQN, productCode);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.productadmin.ProductProperty.class;
		MozuClient<com.mozu.api.contracts.productadmin.ProductProperty> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(productProperty);
		return mozuClient;

	}

	/**
	* Deletes the property by providing the product code and the attribute's fully qualified name.
	* <p><pre><code>
	*   MozuClient mozuClient=DeletePropertyClient( attributeFQN,  productCode);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param attributeFQN The fully qualified name of the attribute, which is a user defined attribute identifier.
	* @param productCode Identifies the product for which a new property is being deleted.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deletePropertyClient(String attributeFQN, String productCode) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.products.ProductPropertyUrl.deletePropertyUrl(attributeFQN, productCode);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}


}



