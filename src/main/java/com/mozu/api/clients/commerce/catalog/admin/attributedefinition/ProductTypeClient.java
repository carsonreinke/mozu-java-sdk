/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.clients.commerce.catalog.admin.attributedefinition;

import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use the Product Types resource to manage the types for your product catalog. Product types act as configuration templates, which store a set of attributes common to all products associated with that type. Unlike categories, products can only be associated with a single product type.
/// </summary>
public class ProductTypeClient {
	
	
	/**
	* Retrieves a list of product types according to any specified filter criteria and sort options.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductTypeCollection> mozuClient=GetProductTypesClient();
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductTypeCollection productTypeCollection = client.Result();
	* </code></pre></p>
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductTypeCollection>
	* @see com.mozu.api.contracts.productadmin.ProductTypeCollection
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductTypeCollection> getProductTypesClient() throws Exception
	{
		return getProductTypesClient( null,  null,  null,  null);
	}

/**
	* Retrieves a list of product types according to any specified filter criteria and sort options.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductTypeCollection> mozuClient=GetProductTypesClient( filter,  pageSize,  sortBy,  startIndex);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductTypeCollection productTypeCollection = client.Result();
	* </code></pre></p>
	* @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter product type search results by any of its properties. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=Name+cont+shoes"
	* @param pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param sortBy 
	* @param startIndex 
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductTypeCollection>
	* @see com.mozu.api.contracts.productadmin.ProductTypeCollection
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductTypeCollection> getProductTypesClient(String filter, Integer pageSize, String sortBy, Integer startIndex) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.attributedefinition.ProductTypeUrl.getProductTypesUrl(filter, pageSize, sortBy, startIndex);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.productadmin.ProductTypeCollection.class;
		MozuClient<com.mozu.api.contracts.productadmin.ProductTypeCollection> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves the details of the product type specified in the request.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductType> mozuClient=GetProductTypeClient( productTypeId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductType productType = client.Result();
	* </code></pre></p>
	* @param productTypeId Identifier of the product type to retrieve.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductType>
	* @see com.mozu.api.contracts.productadmin.ProductType
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductType> getProductTypeClient(Integer productTypeId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.attributedefinition.ProductTypeUrl.getProductTypeUrl(productTypeId);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.productadmin.ProductType.class;
		MozuClient<com.mozu.api.contracts.productadmin.ProductType> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	* Creates a new product type based on the information supplied in the request.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductType> mozuClient=AddProductTypeClient( productType);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductType productType = client.Result();
	* </code></pre></p>
	* @param productType Properties of the product type to create.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductType>
	* @see com.mozu.api.contracts.productadmin.ProductType
	* @see com.mozu.api.contracts.productadmin.ProductType
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductType> addProductTypeClient(com.mozu.api.contracts.productadmin.ProductType productType) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.attributedefinition.ProductTypeUrl.addProductTypeUrl();
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.productadmin.ProductType.class;
		MozuClient<com.mozu.api.contracts.productadmin.ProductType> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(productType);
		return mozuClient;

	}

	/**
	* Updates one or more properties of a product type.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.productadmin.ProductType> mozuClient=UpdateProductTypeClient( productTypeId,  productType);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ProductType productType = client.Result();
	* </code></pre></p>
	* @param productTypeId Identifier of the product type to update.
	* @param productType The details of the product type to update.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.productadmin.ProductType>
	* @see com.mozu.api.contracts.productadmin.ProductType
	* @see com.mozu.api.contracts.productadmin.ProductType
	*/
	public static MozuClient<com.mozu.api.contracts.productadmin.ProductType> updateProductTypeClient(Integer productTypeId, com.mozu.api.contracts.productadmin.ProductType productType) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.attributedefinition.ProductTypeUrl.updateProductTypeUrl(productTypeId);
		String verb = "PUT";
		Class<?> clz = com.mozu.api.contracts.productadmin.ProductType.class;
		MozuClient<com.mozu.api.contracts.productadmin.ProductType> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(productType);
		return mozuClient;

	}

	/**
	* Deletes the product type by providing the product type ID.
	* <p><pre><code>
	*   MozuClient mozuClient=DeleteProductTypeClient( productTypeId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param productTypeId Identifier of the product type to delete.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deleteProductTypeClient(Integer productTypeId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.catalog.admin.attributedefinition.ProductTypeUrl.deleteProductTypeUrl(productTypeId);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}


}



