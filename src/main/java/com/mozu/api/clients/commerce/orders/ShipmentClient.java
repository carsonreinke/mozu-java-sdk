/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.clients.commerce.orders;

import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use the shipments resource to manage shipments of collections of packages for an order.
/// </summary>
public class ShipmentClient {
	
	
	/**
	* Retrieves the shipment actions available for the specified order and package.
	* <p><pre><code>
	*   MozuClient<ArrayList<String>> mozuClient=GetAvailableShipmentActionsClient( orderId,  packageId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* string string = client.Result();
	* </code></pre></p>
	* @param orderId Unique identifier of the order for which to get a list of available actions.
	* @param packageId Unique identifier for the physical package associated with the order for which to get a list of available actions.
	* @return Mozu.Api.MozuClient <List<string>>
	* @see string
	*/
	public static MozuClient<ArrayList<String>> getAvailableShipmentActionsClient(String orderId, String packageId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.orders.ShipmentUrl.getAvailableShipmentActionsUrl(orderId, packageId);
		String verb = "GET";
		Class<?> clz = new ArrayList<String>(){}.getClass();
		MozuClient<ArrayList<String>> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves the details of the order shipment specified in the request.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.shipping.Shipment> mozuClient=GetShipmentClient( orderId,  shipmentId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Shipment shipment = client.Result();
	* </code></pre></p>
	* @param orderId Unique identifier of the order associated with the shipment to retrieve.
	* @param shipmentId Unique identifier of the shipment to retrieve.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.shipping.Shipment>
	* @see com.mozu.api.contracts.commerceruntime.shipping.Shipment
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.shipping.Shipment> getShipmentClient(String orderId, String shipmentId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.orders.ShipmentUrl.getShipmentUrl(orderId, shipmentId);
		String verb = "GET";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.shipping.Shipment.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.shipping.Shipment> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

/**
	* Retrieves the available shipping methods applicable to the order. Typically used to display available shipping method options on the checkout page.
	* <p><pre><code>
	*   MozuClient<ArrayList<com.mozu.api.contracts.commerceruntime.shipping.ShippingRate>> mozuClient=GetAvailableShipmentMethodsClient( orderId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* ShippingRate shippingRate = client.Result();
	* </code></pre></p>
	* @param orderId Unique identifier of the order for the available shipment methods being retrieved.
	* @return Mozu.Api.MozuClient <List<com.mozu.api.contracts.commerceruntime.shipping.ShippingRate>>
	* @see com.mozu.api.contracts.commerceruntime.shipping.ShippingRate
	*/
	public static MozuClient<ArrayList<com.mozu.api.contracts.commerceruntime.shipping.ShippingRate>> getAvailableShipmentMethodsClient(String orderId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.orders.ShipmentUrl.getAvailableShipmentMethodsUrl(orderId);
		String verb = "GET";
		Class<?> clz = new ArrayList<com.mozu.api.contracts.commerceruntime.shipping.ShippingRate>(){}.getClass();
		MozuClient<ArrayList<com.mozu.api.contracts.commerceruntime.shipping.ShippingRate>> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}

	/**
	* Creates a shipment from one or more package associated with an order and assign a label and tracking number to an order shipment.
	* <p><pre><code>
	*   MozuClient<ArrayList<com.mozu.api.contracts.commerceruntime.shipping.Package>> mozuClient=CreatePackageShipmentsClient( orderId,  packageIds);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Package package = client.Result();
	* </code></pre></p>
	* @param orderId Unique identifier of the order for this shipment.
	* @param packageIds List of unique identifiers for each package associated with this shipment. Not all packages must belong to the same shipment.
	* @return Mozu.Api.MozuClient <List<com.mozu.api.contracts.commerceruntime.shipping.Package>>
	* @see com.mozu.api.contracts.commerceruntime.shipping.Package
	* @see string
	*/
	public static MozuClient<ArrayList<com.mozu.api.contracts.commerceruntime.shipping.Package>> createPackageShipmentsClient(String orderId, ArrayList<String> packageIds) throws Exception
	{
		String url = com.mozu.api.urls.commerce.orders.ShipmentUrl.createPackageShipmentsUrl(orderId);
		String verb = "POST";
		Class<?> clz = new ArrayList<com.mozu.api.contracts.commerceruntime.shipping.Package>(){}.getClass();
		MozuClient<ArrayList<com.mozu.api.contracts.commerceruntime.shipping.Package>> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(packageIds);
		return mozuClient;

	}

/**
	* Sets the shipment action to "Ship." To ship an order, the order must have a customer name, the "Open" or "OpenAndProcessing" status, full shipping address, and shipping method. Shipping all packages associated with shipments for an order will complete a paid order.
	* <p><pre><code>
	*   MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> mozuClient=PerformShipmentActionClient( orderId,  action);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* Order order = client.Result();
	* </code></pre></p>
	* @param orderId Unique identifier of the order associated with the shipment for which to perform the action.
	* @param action The action to perform for the order shipment.
	* @return Mozu.Api.MozuClient <com.mozu.api.contracts.commerceruntime.orders.Order>
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.shipping.ShipmentAction
	*/
	public static MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> performShipmentActionClient(String orderId, com.mozu.api.contracts.commerceruntime.shipping.ShipmentAction action) throws Exception
	{
		String url = com.mozu.api.urls.commerce.orders.ShipmentUrl.performShipmentActionUrl(orderId);
		String verb = "POST";
		Class<?> clz = com.mozu.api.contracts.commerceruntime.orders.Order.class;
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> mozuClient = new MozuClient(clz);
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		mozuClient.setBody(action);
		return mozuClient;

	}

		/**
	* Cancels a shipment.
	* <p><pre><code>
	*   MozuClient mozuClient=DeleteShipmentClient( orderId,  shipmentId);
	* client.setBaseAddress(url);
	* client.executeRequest();
	* </code></pre></p>
	* @param orderId Unique identifier of the order to cancel shipment.
	* @param shipmentId Unique identifier of the shipment to cancel.
	* @return Mozu.Api.MozuClient 
	*/
	public static MozuClient deleteShipmentClient(String orderId, String shipmentId) throws Exception
	{
		String url = com.mozu.api.urls.commerce.orders.ShipmentUrl.deleteShipmentUrl(orderId, shipmentId);
		String verb = "DELETE";
				MozuClient mozuClient = new MozuClient();
		mozuClient.setVerb(verb);
		mozuClient.setResourceUrl(url);
		return mozuClient;

	}


}



