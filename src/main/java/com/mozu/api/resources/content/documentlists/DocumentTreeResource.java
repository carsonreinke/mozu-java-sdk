/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.resources.content.documentlists;

import com.mozu.api.ApiContext;
import com.mozu.api.resources.BaseResource;
import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use the document tree subresource to retrieve documents and manage content within the document hierarchy.
/// </summary>
public class DocumentTreeResource extends BaseResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	
	public DocumentTreeResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	* Retrieve the content associated with the document, such as a product image or PDF specifications file.
	* <p><pre><code>
	*    DocumentTree documenttree = new DocumentTree();
	*   documenttree.GetTreeDocumentContent( documentListName,  documentName);
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @return 
	*/
	public void getTreeDocumentContent(String documentListName, String documentName) throws Exception
	{
		getTreeDocumentContent( documentListName,  documentName,  null,  null,  null);
	}

/**
	* Retrieve the content associated with the document, such as a product image or PDF specifications file.
	* <p><pre><code>
	*    DocumentTree documenttree = new DocumentTree();
	*   documenttree.GetTreeDocumentContent( documentListName,  documentName,  folderId,  folderPath,  publishState);
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @param folderId If applicable, the unique identifier of the folder that contains the document.
	* @param folderPath If applicable, the path of the folder hierarchy location associated with the document.
	* @param publishState The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.
	* @return 
	*/
	public void getTreeDocumentContent(String documentListName, String documentName, String folderId, String folderPath, String publishState) throws Exception
	{
		MozuClient client = com.mozu.api.clients.content.documentlists.DocumentTreeClient.getTreeDocumentContentClient( documentListName,  documentName,  folderId,  folderPath,  publishState);
		setContext(_apiContext, client,true);
		client.executeRequest();

	}

/**
	* Retrieves a document based on its document list and folder path in the document hierarchy.
	* <p><pre><code>
	*    DocumentTree documenttree = new DocumentTree();
	*   Document document = documenttree.GetTreeDocument( documentListName,  documentName);
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @return com.mozu.api.contracts.content.Document
	* @see com.mozu.api.contracts.content.Document
	*/
	public com.mozu.api.contracts.content.Document getTreeDocument(String documentListName, String documentName) throws Exception
	{
		return getTreeDocument( documentListName,  documentName,  null,  null,  null);
	}

/**
	* Retrieves a document based on its document list and folder path in the document hierarchy.
	* <p><pre><code>
	*    DocumentTree documenttree = new DocumentTree();
	*   Document document = documenttree.GetTreeDocument( documentListName,  documentName,  folderId,  folderPath,  publishState);
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @param folderId If applicable, the unique identifier of the folder that contains the document.
	* @param folderPath If applicable, the path of the folder hierarchy location that contains the document.
	* @param publishState The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.
	* @return com.mozu.api.contracts.content.Document
	* @see com.mozu.api.contracts.content.Document
	*/
	public com.mozu.api.contracts.content.Document getTreeDocument(String documentListName, String documentName, String folderId, String folderPath, String publishState) throws Exception
	{
		MozuClient<com.mozu.api.contracts.content.Document> client = com.mozu.api.clients.content.documentlists.DocumentTreeClient.getTreeDocumentClient( documentListName,  documentName,  folderId,  folderPath,  publishState);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

		/**
	* Updates the content associated with a document, such as a product image or PDF specifications file, based on the document's position in the document hierarchy.
	* <p><pre><code>
	*    DocumentTree documenttree = new DocumentTree();
	*   documenttree.UpdateTreeDocumentContent( documentListName,  documentName);
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @return 
	*/
	public void updateTreeDocumentContent(String documentListName, String documentName) throws Exception
	{
		updateTreeDocumentContent( documentListName,  documentName,  null,  null);
	}

/**
	* Updates the content associated with a document, such as a product image or PDF specifications file, based on the document's position in the document hierarchy.
	* <p><pre><code>
	*    DocumentTree documenttree = new DocumentTree();
	*   documenttree.UpdateTreeDocumentContent( documentListName,  documentName,  folderId,  folderPath);
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @param folderId If applicable, the unique identifier of the folder that contains the document.
	* @param folderPath If applicable, the path of the folder hierarchy location associated with the document.
	* @return 
	*/
	public void updateTreeDocumentContent(String documentListName, String documentName, String folderId, String folderPath) throws Exception
	{
		MozuClient client = com.mozu.api.clients.content.documentlists.DocumentTreeClient.updateTreeDocumentContentClient( documentListName,  documentName,  folderId,  folderPath);
		setContext(_apiContext, client,true);
		client.executeRequest();

	}

	/**
	* Deletes the content associated with a document, such as a product image or PDF specifications file.
	* <p><pre><code>
	*    DocumentTree documenttree = new DocumentTree();
	*   documenttree.DeleteTreeDocumentContent( documentListName,  documentName);
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @return 
	*/
	public void deleteTreeDocumentContent(String documentListName, String documentName) throws Exception
	{
		deleteTreeDocumentContent( documentListName,  documentName,  null,  null);
	}

/**
	* Deletes the content associated with a document, such as a product image or PDF specifications file.
	* <p><pre><code>
	*    DocumentTree documenttree = new DocumentTree();
	*   documenttree.DeleteTreeDocumentContent( documentListName,  documentName,  folderId,  folderPath);
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the document.
	* @param documentName The name of the document, which is unique within its folder.
	* @param folderId If applicable, the unique identifier of the folder that contains the document.
	* @param folderPath If applicable, the path of the folder hierarchy location associated with the document.
	* @return 
	*/
	public void deleteTreeDocumentContent(String documentListName, String documentName, String folderId, String folderPath) throws Exception
	{
		MozuClient client = com.mozu.api.clients.content.documentlists.DocumentTreeClient.deleteTreeDocumentContentClient( documentListName,  documentName,  folderId,  folderPath);
		setContext(_apiContext, client,true);
		client.executeRequest();

	}


}



