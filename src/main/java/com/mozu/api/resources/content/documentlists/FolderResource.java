/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.content.documentlists;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * 
 * </summary>
 */
public class FolderResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	public FolderResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * 
	 * <p><pre><code>
	 *	Folder folder = new Folder();
	 *	Folder folder = folder.GetFolder( documentListName,  folderId, authTicket);
	 * </code></pre></p>
	 * @param documentListName 
	 * @param folderId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.content.Folder
	 * @see com.mozu.api.contracts.content.Folder
	 */
	public com.mozu.api.contracts.content.Folder getFolder(String documentListName, String folderId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.content.Folder> client = com.mozu.api.clients.content.documentlists.FolderClient.getFolderClient( documentListName,  folderId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Folder folder = new Folder();
	 *	FolderCollection folderCollection = folder.GetFolders( documentListName,  filter);
	 * </code></pre></p>
	 * @param documentListName 
	 * @param filter 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.content.FolderCollection
	 * @see com.mozu.api.contracts.content.FolderCollection
	 */
	public com.mozu.api.contracts.content.FolderCollection getFolders(String documentListName, String filter) throws Exception
	{
		return getFolders( documentListName,  filter,  null,  null,  null, null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Folder folder = new Folder();
	 *	FolderCollection folderCollection = folder.GetFolders( documentListName,  filter,  pageSize,  sort,  startIndex, authTicket);
	 * </code></pre></p>
	 * @param documentListName 
	 * @param filter 
	 * @param pageSize 
	 * @param sort 
	 * @param startIndex 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.content.FolderCollection
	 * @see com.mozu.api.contracts.content.FolderCollection
	 */
	public com.mozu.api.contracts.content.FolderCollection getFolders(String documentListName, String filter, Integer pageSize, String sort, Integer startIndex, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.content.FolderCollection> client = com.mozu.api.clients.content.documentlists.FolderClient.getFoldersClient( documentListName,  filter,  pageSize,  sort,  startIndex, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Folder folder = new Folder();
	 *	Folder folder = folder.CreateFolder( folder,  documentListName, authTicket);
	 * </code></pre></p>
	 * @param documentListName 
	 * @param authTicket User Auth Ticket
	 * @param folder 
	 * @return com.mozu.api.contracts.content.Folder
	 * @see com.mozu.api.contracts.content.Folder
	 * @see com.mozu.api.contracts.content.Folder
	 */
	public com.mozu.api.contracts.content.Folder createFolder(com.mozu.api.contracts.content.Folder folder, String documentListName, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.content.Folder> client = com.mozu.api.clients.content.documentlists.FolderClient.createFolderClient( folder,  documentListName, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Folder folder = new Folder();
	 *	Folder folder = folder.UpdateFolder( folder,  documentListName,  folderId, authTicket);
	 * </code></pre></p>
	 * @param documentListName 
	 * @param folderId 
	 * @param authTicket User Auth Ticket
	 * @param folder 
	 * @return com.mozu.api.contracts.content.Folder
	 * @see com.mozu.api.contracts.content.Folder
	 * @see com.mozu.api.contracts.content.Folder
	 */
	public com.mozu.api.contracts.content.Folder updateFolder(com.mozu.api.contracts.content.Folder folder, String documentListName, String folderId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.content.Folder> client = com.mozu.api.clients.content.documentlists.FolderClient.updateFolderClient( folder,  documentListName,  folderId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Folder folder = new Folder();
	 *	folder.DeleteFolder( documentListName,  folderId, authTicket);
	 * </code></pre></p>
	 * @param documentListName 
	 * @param folderId 
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void deleteFolder(String documentListName, String folderId, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.content.documentlists.FolderClient.deleteFolderClient( documentListName,  folderId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();

	}

}



