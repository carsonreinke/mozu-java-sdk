/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.resources.content.documentlists;

import com.mozu.api.ApiContext;
import com.mozu.api.resources.BaseResource;
import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use the folders subresource to organize content into folders.
/// </summary>
public class FolderResource extends BaseResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	
	public FolderResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	* Retrieves the properties of an existing folder.
	* <p><pre><code>
	*    Folder folder = new Folder();
	*   Folder folder = folder.GetFolder( documentListName,  folderId);
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the folder to retrieve.
	* @param folderId The unique identifier of the folder to retrieve.
	* @return com.mozu.api.contracts.content.Folder
	* @see com.mozu.api.contracts.content.Folder
	*/
	public com.mozu.api.contracts.content.Folder getFolder(String documentListName, String folderId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.content.Folder> client = com.mozu.api.clients.content.documentlists.FolderClient.getFolderClient( documentListName,  folderId);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieve a list of content folders according to any filter and sort criteria.
	* <p><pre><code>
	*    Folder folder = new Folder();
	*   FolderCollection folderCollection = folder.GetFolders( documentListName,  filter);
	* </code></pre></p>
	* @param documentListName The name of the document list that contains this folder.
	* @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @return com.mozu.api.contracts.content.FolderCollection
	* @see com.mozu.api.contracts.content.FolderCollection
	*/
	public com.mozu.api.contracts.content.FolderCollection getFolders(String documentListName, String filter) throws Exception
	{
		return getFolders( documentListName,  filter,  null,  null,  null);
	}

/**
	* Retrieve a list of content folders according to any filter and sort criteria.
	* <p><pre><code>
	*    Folder folder = new Folder();
	*   FolderCollection folderCollection = folder.GetFolders( documentListName,  filter,  pageSize,  sort,  startIndex);
	* </code></pre></p>
	* @param documentListName The name of the document list that contains this folder.
	* @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param sort The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
	* @param startIndex Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	* @return com.mozu.api.contracts.content.FolderCollection
	* @see com.mozu.api.contracts.content.FolderCollection
	*/
	public com.mozu.api.contracts.content.FolderCollection getFolders(String documentListName, String filter, Long pageSize, String sort, Long startIndex) throws Exception
	{
		MozuClient<com.mozu.api.contracts.content.FolderCollection> client = com.mozu.api.clients.content.documentlists.FolderClient.getFoldersClient( documentListName,  filter,  pageSize,  sort,  startIndex);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Creates a new folder.
	* <p><pre><code>
	*    Folder folder = new Folder();
	*   Folder folder = folder.CreateFolder( documentListName,  folder);
	* </code></pre></p>
	* @param documentListName The name of the document list for which to create a new folder.
	* @param folder The name of the newly created folder.
	* @return com.mozu.api.contracts.content.Folder
	* @see com.mozu.api.contracts.content.Folder
	* @see com.mozu.api.contracts.content.Folder
	*/
	public com.mozu.api.contracts.content.Folder createFolder(String documentListName, com.mozu.api.contracts.content.Folder folder) throws Exception
	{
		MozuClient<com.mozu.api.contracts.content.Folder> client = com.mozu.api.clients.content.documentlists.FolderClient.createFolderClient( documentListName,  folder);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Updates an existing content folder in a document list.
	* <p><pre><code>
	*    Folder folder = new Folder();
	*   Folder folder = folder.UpdateFolder( documentListName,  folderId,  folder);
	* </code></pre></p>
	* @param documentListName The name of the document list that contains this folder.
	* @param folderId Unique identifier of the folder.
	* @param folder Properties of the folder to update.
	* @return com.mozu.api.contracts.content.Folder
	* @see com.mozu.api.contracts.content.Folder
	* @see com.mozu.api.contracts.content.Folder
	*/
	public com.mozu.api.contracts.content.Folder updateFolder(String documentListName, String folderId, com.mozu.api.contracts.content.Folder folder) throws Exception
	{
		MozuClient<com.mozu.api.contracts.content.Folder> client = com.mozu.api.clients.content.documentlists.FolderClient.updateFolderClient( documentListName,  folderId,  folder);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Deletes a folder of documents from the specified document list.
	* <p><pre><code>
	*    Folder folder = new Folder();
	*   folder.DeleteFolder( documentListName,  folderId);
	* </code></pre></p>
	* @param documentListName The name of the document list associated with the folder to delete.
	* @param folderId The unique identifier of the folder to delete.
	* @return 
	*/
	public void deleteFolder(String documentListName, String folderId) throws Exception
	{
		MozuClient client = com.mozu.api.clients.content.documentlists.FolderClient.deleteFolderClient( documentListName,  folderId);
		setContext(_apiContext, client,true);
		client.executeRequest();

	}


}



