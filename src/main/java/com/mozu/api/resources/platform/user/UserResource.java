/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.platform.user;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * 
 * </summary>
 */
public class UserResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	public UserResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * 
	 * <p><pre><code>
	 *	User user = new User();
	 *	User user = user.GetUserByEmail( emailAddress, authTicket);
	 * </code></pre></p>
	 * @param emailAddress 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.core.User
	 * @see com.mozu.api.contracts.core.User
	 */
	public com.mozu.api.contracts.core.User getUserByEmail(String emailAddress, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.core.User> client = com.mozu.api.clients.platform.user.UserClient.getUserByEmailClient( emailAddress, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	User user = new User();
	 *	User user = user.GetUser( userId, authTicket);
	 * </code></pre></p>
	 * @param userId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.core.User
	 * @see com.mozu.api.contracts.core.User
	 */
	public com.mozu.api.contracts.core.User getUser(String userId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.core.User> client = com.mozu.api.clients.platform.user.UserClient.getUserClient( userId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	User user = new User();
	 *	User user = user.CreateUser( shopper, authTicket);
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @param shopper 
	 * @return com.mozu.api.contracts.core.User
	 * @see com.mozu.api.contracts.core.User
	 * @see com.mozu.api.contracts.core.User
	 */
	public com.mozu.api.contracts.core.User createUser(com.mozu.api.contracts.core.User shopper, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.core.User> client = com.mozu.api.clients.platform.user.UserClient.createUserClient( shopper, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	User user = new User();
	 *	UserCollection userCollection = user.CreateUsers( users, authTicket);
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @param users 
	 * @return com.mozu.api.contracts.core.UserCollection
	 * @see com.mozu.api.contracts.core.UserCollection
	 * @see com.mozu.api.contracts.core.UserCollection
	 */
	public com.mozu.api.contracts.core.UserCollection createUsers(com.mozu.api.contracts.core.UserCollection users, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.core.UserCollection> client = com.mozu.api.clients.platform.user.UserClient.createUsersClient( users, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	User user = new User();
	 *	UserLoginResult userLoginResult = user.Login( userAuthInfo, authTicket);
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @param userAuthInfo 
	 * @return com.mozu.api.contracts.user.UserLoginResult
	 * @see com.mozu.api.contracts.user.UserLoginResult
	 * @see com.mozu.api.contracts.core.UserAuthInfo
	 */
	public com.mozu.api.contracts.user.UserLoginResult login(com.mozu.api.contracts.core.UserAuthInfo userAuthInfo, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.user.UserLoginResult> client = com.mozu.api.clients.platform.user.UserClient.loginClient( userAuthInfo, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	User user = new User();
	 *	user.ResetPassword( resetPasswordInfo, authTicket);
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @param resetPasswordInfo 
	 * @return 
	 * @see com.mozu.api.contracts.user.ResetPasswordInfo
	 */
	public void resetPassword(com.mozu.api.contracts.user.ResetPasswordInfo resetPasswordInfo, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.platform.user.UserClient.resetPasswordClient( resetPasswordInfo, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();

	}

}



