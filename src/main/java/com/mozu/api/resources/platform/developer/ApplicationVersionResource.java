/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.platform.developer;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * 
 * </summary>
 */
public class ApplicationVersionResource {
	
	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	ApplicationCollection applicationCollection = applicationversion.GetAllApplications(authTicket);
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.appdev.ApplicationCollection
	 * @see com.mozu.api.contracts.appdev.ApplicationCollection
	 */
	public com.mozu.api.contracts.appdev.ApplicationCollection getAllApplications(AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.ApplicationCollection> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getAllApplicationsClient(authTicket);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	Application application = applicationversion.GetApplication();
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.appdev.Application
	 * @see com.mozu.api.contracts.appdev.Application
	 */
	public com.mozu.api.contracts.appdev.Application getApplication() throws Exception
	{
		return getApplication( null, null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	Application application = applicationversion.GetApplication( applicationId, authTicket);
	 * </code></pre></p>
	 * @param applicationId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.appdev.Application
	 * @see com.mozu.api.contracts.appdev.Application
	 */
	public com.mozu.api.contracts.appdev.Application getApplication(Integer applicationId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.Application> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getApplicationClient( applicationId, authTicket);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	ApplicationVersion applicationVersion = applicationversion.GetApplicationVersion( applicationVersionId, authTicket);
	 * </code></pre></p>
	 * @param applicationVersionId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.appdev.ApplicationVersion
	 * @see com.mozu.api.contracts.appdev.ApplicationVersion
	 */
	public com.mozu.api.contracts.appdev.ApplicationVersion getApplicationVersion(Integer applicationVersionId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.ApplicationVersion> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getApplicationVersionClient( applicationVersionId, authTicket);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	PackageCollection packageCollection = applicationversion.GetPackages( applicationVersionId, authTicket);
	 * </code></pre></p>
	 * @param applicationVersionId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.appdev.PackageCollection
	 * @see com.mozu.api.contracts.appdev.PackageCollection
	 */
	public com.mozu.api.contracts.appdev.PackageCollection getPackages(Integer applicationVersionId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.PackageCollection> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getPackagesClient( applicationVersionId, authTicket);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	Package package = applicationversion.GetPackage( applicationVersionId,  packageId, authTicket);
	 * </code></pre></p>
	 * @param applicationVersionId 
	 * @param packageId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.appdev.Package
	 * @see com.mozu.api.contracts.appdev.Package
	 */
	public com.mozu.api.contracts.appdev.Package getPackage(Integer applicationVersionId, Integer packageId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.Package> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getPackageClient( applicationVersionId,  packageId, authTicket);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	FolderMetadata folderMetadata = applicationversion.GetPackageItemsMetadata( applicationVersionId,  packageId, authTicket);
	 * </code></pre></p>
	 * @param applicationVersionId 
	 * @param packageId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.appdev.FolderMetadata
	 * @see com.mozu.api.contracts.appdev.FolderMetadata
	 */
	public com.mozu.api.contracts.appdev.FolderMetadata getPackageItemsMetadata(Integer applicationVersionId, Integer packageId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FolderMetadata> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getPackageItemsMetadataClient( applicationVersionId,  packageId, authTicket);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	FileMetadata fileMetadata = applicationversion.GetPackageItemMetadata( applicationVersionId,  itempath,  packageId, authTicket);
	 * </code></pre></p>
	 * @param applicationVersionId 
	 * @param itempath 
	 * @param packageId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 */
	public com.mozu.api.contracts.appdev.FileMetadata getPackageItemMetadata(Integer applicationVersionId, String itempath, Integer packageId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FileMetadata> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getPackageItemMetadataClient( applicationVersionId,  itempath,  packageId, authTicket);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	applicationversion.GetPackageFilesZip( applicationVersionId,  packageId, authTicket);
	 * </code></pre></p>
	 * @param applicationVersionId 
	 * @param packageId 
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void getPackageFilesZip(Integer applicationVersionId, Integer packageId, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.getPackageFilesZipClient( applicationVersionId,  packageId, authTicket);
		client.executeRequest();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	Package package = applicationversion.AddPackage( pkg,  applicationVersionId, authTicket);
	 * </code></pre></p>
	 * @param applicationVersionId 
	 * @param authTicket User Auth Ticket
	 * @param package 
	 * @return com.mozu.api.contracts.appdev.Package
	 * @see com.mozu.api.contracts.appdev.Package
	 * @see com.mozu.api.contracts.appdev.Package
	 */
	public com.mozu.api.contracts.appdev.Package addPackage(com.mozu.api.contracts.appdev.Package pkg, Integer applicationVersionId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.Package> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.addPackageClient( pkg,  applicationVersionId, authTicket);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	FileMetadata fileMetadata = applicationversion.AddPackageFile( stream,  applicationVersionId,  filepath,  packageId, authTicket);
	 * </code></pre></p>
	 * @param applicationVersionId 
	 * @param filepath 
	 * @param packageId 
	 * @param authTicket User Auth Ticket
	 * @param stream 
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 * @see Stream
	 */
	public com.mozu.api.contracts.appdev.FileMetadata addPackageFile(java.io.InputStream stream, Integer applicationVersionId, String filepath, Integer packageId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FileMetadata> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.addPackageFileClient( stream,  applicationVersionId,  filepath,  packageId, authTicket);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	FileMetadata fileMetadata = applicationversion.ChangePackageFileNameOrPath( renameInfo,  applicationVersionId,  packageId, authTicket);
	 * </code></pre></p>
	 * @param applicationVersionId 
	 * @param packageId 
	 * @param authTicket User Auth Ticket
	 * @param renameInfo 
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.RenameInfo
	 */
	public com.mozu.api.contracts.appdev.FileMetadata changePackageFileNameOrPath(com.mozu.api.contracts.appdev.RenameInfo renameInfo, Integer applicationVersionId, Integer packageId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FileMetadata> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.changePackageFileNameOrPathClient( renameInfo,  applicationVersionId,  packageId, authTicket);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	FileMetadata fileMetadata = applicationversion.UpdatePackageFile( stream,  applicationVersionId,  filepath,  packageId, authTicket);
	 * </code></pre></p>
	 * @param applicationVersionId 
	 * @param filepath 
	 * @param packageId 
	 * @param authTicket User Auth Ticket
	 * @param stream 
	 * @return com.mozu.api.contracts.appdev.FileMetadata
	 * @see com.mozu.api.contracts.appdev.FileMetadata
	 * @see Stream
	 */
	public com.mozu.api.contracts.appdev.FileMetadata updatePackageFile(java.io.InputStream stream, Integer applicationVersionId, String filepath, Integer packageId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.appdev.FileMetadata> client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.updatePackageFileClient( stream,  applicationVersionId,  filepath,  packageId, authTicket);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ApplicationVersion applicationversion = new ApplicationVersion();
	 *	applicationversion.DeletePackageFile( applicationVersionId,  filepath,  packageId, authTicket);
	 * </code></pre></p>
	 * @param applicationVersionId 
	 * @param filepath 
	 * @param packageId 
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void deletePackageFile(Integer applicationVersionId, String filepath, Integer packageId, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.platform.developer.ApplicationVersionClient.deletePackageFileClient( applicationVersionId,  filepath,  packageId, authTicket);
		client.executeRequest();

	}

}



