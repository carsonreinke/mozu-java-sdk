/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.resources.commerce.catalog.admin.products;

import com.mozu.api.ApiContext;
import com.mozu.api.resources.BaseResource;
import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Query, create, and update product properties.
/// </summary>
public class ProductPropertyResource extends BaseResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	
	public ProductPropertyResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	* Retrieves a list of product properties by providing the product code.
	* <p><pre><code>
	*    ProductProperty productproperty = new ProductProperty();
	*   ProductProperty productProperty = productproperty.GetProperties( productCode);
	* </code></pre></p>
	* @param productCode Identifies the product for which a list of properties is being retrieved.
	* @return List<com.mozu.api.contracts.productadmin.ProductProperty>
	* @see com.mozu.api.contracts.productadmin.ProductProperty
	*/
	public ArrayList<com.mozu.api.contracts.productadmin.ProductProperty> getProperties(String productCode) throws Exception
	{
		MozuClient<ArrayList<com.mozu.api.contracts.productadmin.ProductProperty>> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductPropertyClient.getPropertiesClient( productCode);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieves the individual product property by providing the product code and the attribute's fully qualified name.
	* <p><pre><code>
	*    ProductProperty productproperty = new ProductProperty();
	*   ProductProperty productProperty = productproperty.GetProperty( attributeFQN,  productCode);
	* </code></pre></p>
	* @param attributeFQN The fully qualified name of the attribute, which is a user defined attribute identifier.
	* @param productCode Identifies the product for which a single property is being retrieved.
	* @return com.mozu.api.contracts.productadmin.ProductProperty
	* @see com.mozu.api.contracts.productadmin.ProductProperty
	*/
	public com.mozu.api.contracts.productadmin.ProductProperty getProperty(String attributeFQN, String productCode) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductProperty> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductPropertyClient.getPropertyClient( attributeFQN,  productCode);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Adds or creates an individual property by providing the product code.
	* <p><pre><code>
	*    ProductProperty productproperty = new ProductProperty();
	*   ProductProperty productProperty = productproperty.AddProperty( productCode,  productProperty);
	* </code></pre></p>
	* @param productCode The merchant-created code that uniquely identifies the product such as a SKU or item number. Identifies the product for which a new property is created.
	* @param productProperty The details of the product property including the attribute detail, user's fully qualified name, and the list of product property values to add.
	* @return com.mozu.api.contracts.productadmin.ProductProperty
	* @see com.mozu.api.contracts.productadmin.ProductProperty
	* @see com.mozu.api.contracts.productadmin.ProductProperty
	*/
	public com.mozu.api.contracts.productadmin.ProductProperty addProperty(String productCode, com.mozu.api.contracts.productadmin.ProductProperty productProperty) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductProperty> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductPropertyClient.addPropertyClient( productCode,  productProperty);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Update the details of a product property by providng the product code and the attribute's fully qualified name.
	* <p><pre><code>
	*    ProductProperty productproperty = new ProductProperty();
	*   ProductProperty productProperty = productproperty.UpdateProperty( attributeFQN,  productCode,  productProperty);
	* </code></pre></p>
	* @param attributeFQN The fully qualified name of the attribute, which is a user defined attribute identifier.
	* @param productCode Identifies the product for which a list of properties is being updated.
	* @param productProperty The details of the product property including the attribute detail, user's fully qualified name, and the list of product property values to update.
	* @return com.mozu.api.contracts.productadmin.ProductProperty
	* @see com.mozu.api.contracts.productadmin.ProductProperty
	* @see com.mozu.api.contracts.productadmin.ProductProperty
	*/
	public com.mozu.api.contracts.productadmin.ProductProperty updateProperty(String attributeFQN, String productCode, com.mozu.api.contracts.productadmin.ProductProperty productProperty) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductProperty> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductPropertyClient.updatePropertyClient( attributeFQN,  productCode,  productProperty);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Deletes the property by providing the product code and the attribute's fully qualified name.
	* <p><pre><code>
	*    ProductProperty productproperty = new ProductProperty();
	*   productproperty.DeleteProperty( attributeFQN,  productCode);
	* </code></pre></p>
	* @param attributeFQN The fully qualified name of the attribute, which is a user defined attribute identifier.
	* @param productCode Identifies the product for which a new property is being deleted.
	* @return 
	*/
	public void deleteProperty(String attributeFQN, String productCode) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.products.ProductPropertyClient.deletePropertyClient( attributeFQN,  productCode);
		setContext(_apiContext, client,true);
		client.executeRequest();

	}


}



