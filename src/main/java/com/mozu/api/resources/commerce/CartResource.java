/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.resources.commerce;

import com.mozu.api.ApiContext;
import com.mozu.api.resources.BaseResource;
import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use the Carts resource to manage storefront shopping carts as items are added and removed. Each time a shopper's cart is modified, the Carts resource updates estimated prices, discounts, tax, and shipping.
/// </summary>
public class CartResource extends BaseResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	
	public CartResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	* Retrieve a cart specified by its cart ID.
	* <p><pre><code>
	*    Cart cart = new Cart();
	*   Cart cart = cart.GetCart( cartId);
	* </code></pre></p>
	* @param cartId Identifier of the cart being retrieved.
	* @return com.mozu.api.contracts.commerceruntime.carts.Cart
	* @see com.mozu.api.contracts.commerceruntime.carts.Cart
	*/
	public com.mozu.api.contracts.commerceruntime.carts.Cart getCart(String cartId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.Cart> client = com.mozu.api.clients.commerce.CartClient.getCartClient( cartId);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieves a cart's contents for the current shopper. If the shopper does not have an active cart on the site, the service creates one.
	* <p><pre><code>
	*    Cart cart = new Cart();
	*   Cart cart = cart.GetOrCreateCart();
	* </code></pre></p>
	* @return com.mozu.api.contracts.commerceruntime.carts.Cart
	* @see com.mozu.api.contracts.commerceruntime.carts.Cart
	*/
	public com.mozu.api.contracts.commerceruntime.carts.Cart getOrCreateCart() throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.Cart> client = com.mozu.api.clients.commerce.CartClient.getOrCreateCartClient();
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieves the number of items in the active cart and the status of the cart such as whether or not it has expired. Only an anonymous user's cart (guest that does not log in) that is emptied and idle will expire after 14 days. Note that the expiration counter is renewed each time action is made to the cart. For shoppers or users that are logged in, the cart does not expire.
	* <p><pre><code>
	*    Cart cart = new Cart();
	*   CartSummary cartSummary = cart.GetCartSummary();
	* </code></pre></p>
	* @return com.mozu.api.contracts.commerceruntime.carts.CartSummary
	* @see com.mozu.api.contracts.commerceruntime.carts.CartSummary
	*/
	public com.mozu.api.contracts.commerceruntime.carts.CartSummary getCartSummary() throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartSummary> client = com.mozu.api.clients.commerce.CartClient.getCartSummaryClient();
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieve a user's cart by specifying the user ID.
	* <p><pre><code>
	*    Cart cart = new Cart();
	*   Cart cart = cart.GetUserCart( userId);
	* </code></pre></p>
	* @param userId Unique identifier of the user whose cart you want to retrieve.
	* @return com.mozu.api.contracts.commerceruntime.carts.Cart
	* @see com.mozu.api.contracts.commerceruntime.carts.Cart
	*/
	public com.mozu.api.contracts.commerceruntime.carts.Cart getUserCart(String userId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.Cart> client = com.mozu.api.clients.commerce.CartClient.getUserCartClient( userId);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieves the current status of the specified user's cart, including the number of items in the active cart.
	* <p><pre><code>
	*    Cart cart = new Cart();
	*   CartSummary cartSummary = cart.GetUserCartSummary( userId);
	* </code></pre></p>
	* @param userId Unique identifier of the user whose cart details you want to retrieve.
	* @return com.mozu.api.contracts.commerceruntime.carts.CartSummary
	* @see com.mozu.api.contracts.commerceruntime.carts.CartSummary
	*/
	public com.mozu.api.contracts.commerceruntime.carts.CartSummary getUserCartSummary(String userId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.CartSummary> client = com.mozu.api.clients.commerce.CartClient.getUserCartSummaryClient( userId);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

		/**
	* Update the current shopper's cart.
	* <p><pre><code>
	*    Cart cart = new Cart();
	*   Cart cart = cart.UpdateCart( cart);
	* </code></pre></p>
	* @param cart All of the properties of the cart to update. The product code is required.
	* @return com.mozu.api.contracts.commerceruntime.carts.Cart
	* @see com.mozu.api.contracts.commerceruntime.carts.Cart
	* @see com.mozu.api.contracts.commerceruntime.carts.Cart
	*/
	public com.mozu.api.contracts.commerceruntime.carts.Cart updateCart(com.mozu.api.contracts.commerceruntime.carts.Cart cart) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.carts.Cart> client = com.mozu.api.clients.commerce.CartClient.updateCartClient( cart);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Delete the cart specified by its cart ID.
	* <p><pre><code>
	*    Cart cart = new Cart();
	*   cart.DeleteCart( cartId);
	* </code></pre></p>
	* @param cartId Identifier of the cart being deleted.
	* @return 
	*/
	public void deleteCart(String cartId) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.CartClient.deleteCartClient( cartId);
		setContext(_apiContext, client,true);
		client.executeRequest();

	}

/**
	* Deletes the cart of the currently active shopper.
	* <p><pre><code>
	*    Cart cart = new Cart();
	*   cart.DeleteCurrentCart();
	* </code></pre></p>
	* @return 
	*/
	public void deleteCurrentCart() throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.CartClient.deleteCurrentCartClient();
		setContext(_apiContext, client,true);
		client.executeRequest();

	}


}



