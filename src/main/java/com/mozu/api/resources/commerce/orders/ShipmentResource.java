/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.resources.commerce.orders;

import com.mozu.api.ApiContext;
import com.mozu.api.resources.BaseResource;
import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use the shipments resource to manage shipments of collections of packages for an order.
/// </summary>
public class ShipmentResource extends BaseResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	
	public ShipmentResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	* Retrieves the shipment actions available for the specified order and package.
	* <p><pre><code>
	*    Shipment shipment = new Shipment();
	*   string string = shipment.GetAvailableShipmentActions( orderId,  packageId);
	* </code></pre></p>
	* @param orderId Unique identifier of the order for which to get a list of available actions.
	* @param packageId Unique identifier for the physical package associated with the order for which to get a list of available actions.
	* @return List<string>
	* @see string
	*/
	public ArrayList<String> getAvailableShipmentActions(String orderId, String packageId) throws Exception
	{
		MozuClient<ArrayList<String>> client = com.mozu.api.clients.commerce.orders.ShipmentClient.getAvailableShipmentActionsClient( orderId,  packageId);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieves the details of the order shipment specified in the request.
	* <p><pre><code>
	*    Shipment shipment = new Shipment();
	*   Shipment shipment = shipment.GetShipment( orderId,  shipmentId);
	* </code></pre></p>
	* @param orderId Unique identifier of the order associated with the shipment to retrieve.
	* @param shipmentId Unique identifier of the shipment to retrieve.
	* @return com.mozu.api.contracts.commerceruntime.shipping.Shipment
	* @see com.mozu.api.contracts.commerceruntime.shipping.Shipment
	*/
	public com.mozu.api.contracts.commerceruntime.shipping.Shipment getShipment(String orderId, String shipmentId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.shipping.Shipment> client = com.mozu.api.clients.commerce.orders.ShipmentClient.getShipmentClient( orderId,  shipmentId);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieves the available shipping methods applicable to the order. Typically used to display available shipping method options on the checkout page.
	* <p><pre><code>
	*    Shipment shipment = new Shipment();
	*   ShippingRate shippingRate = shipment.GetAvailableShipmentMethods( orderId);
	* </code></pre></p>
	* @param orderId Unique identifier of the order for the available shipment methods being retrieved.
	* @return List<com.mozu.api.contracts.commerceruntime.shipping.ShippingRate>
	* @see com.mozu.api.contracts.commerceruntime.shipping.ShippingRate
	*/
	public ArrayList<com.mozu.api.contracts.commerceruntime.shipping.ShippingRate> getAvailableShipmentMethods(String orderId) throws Exception
	{
		MozuClient<ArrayList<com.mozu.api.contracts.commerceruntime.shipping.ShippingRate>> client = com.mozu.api.clients.commerce.orders.ShipmentClient.getAvailableShipmentMethodsClient( orderId);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Creates a shipment from one or more package associated with an order and assign a label and tracking number to an order shipment.
	* <p><pre><code>
	*    Shipment shipment = new Shipment();
	*   Package package = shipment.CreatePackageShipments( orderId,  packageIds);
	* </code></pre></p>
	* @param orderId Unique identifier of the order for this shipment.
	* @param packageIds List of unique identifiers for each package associated with this shipment. Not all packages must belong to the same shipment.
	* @return List<com.mozu.api.contracts.commerceruntime.shipping.Package>
	* @see com.mozu.api.contracts.commerceruntime.shipping.Package
	* @see string
	*/
	public ArrayList<com.mozu.api.contracts.commerceruntime.shipping.Package> createPackageShipments(String orderId, ArrayList<String> packageIds) throws Exception
	{
		MozuClient<ArrayList<com.mozu.api.contracts.commerceruntime.shipping.Package>> client = com.mozu.api.clients.commerce.orders.ShipmentClient.createPackageShipmentsClient( orderId,  packageIds);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Sets the shipment action to "Ship." To ship an order, the order must have a customer name, the "Open" or "OpenAndProcessing" status, full shipping address, and shipping method. Shipping all packages associated with shipments for an order will complete a paid order.
	* <p><pre><code>
	*    Shipment shipment = new Shipment();
	*   Order order = shipment.PerformShipmentAction( orderId,  action);
	* </code></pre></p>
	* @param orderId Unique identifier of the order associated with the shipment for which to perform the action.
	* @param action The action to perform for the order shipment.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.shipping.ShipmentAction
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order performShipmentAction(String orderId, com.mozu.api.contracts.commerceruntime.shipping.ShipmentAction action) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> client = com.mozu.api.clients.commerce.orders.ShipmentClient.performShipmentActionClient( orderId,  action);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

		/**
	* Cancels a shipment.
	* <p><pre><code>
	*    Shipment shipment = new Shipment();
	*   shipment.DeleteShipment( orderId,  shipmentId);
	* </code></pre></p>
	* @param orderId Unique identifier of the order to cancel shipment.
	* @param shipmentId Unique identifier of the shipment to cancel.
	* @return 
	*/
	public void deleteShipment(String orderId, String shipmentId) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.orders.ShipmentClient.deleteShipmentClient( orderId,  shipmentId);
		setContext(_apiContext, client,true);
		client.executeRequest();

	}


}



