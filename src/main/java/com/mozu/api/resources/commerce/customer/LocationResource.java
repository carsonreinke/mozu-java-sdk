/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.resources.commerce.customer;

import com.mozu.api.ApiContext;
import com.mozu.api.resources.BaseResource;
import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// List of locations where customer pages exist. Examples: Customer Welcome Page, Customer Information Page.
/// </summary>
public class LocationResource extends BaseResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	
	public LocationResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	* Retrieves the location of a customer by providing a location ID.
	* <p><pre><code>
	*    Location location = new Location();
	*   Location location = location.GetLocation( locationId);
	* </code></pre></p>
	* @param locationId Identifier of the location being retrieved.
	* @return com.mozu.api.contracts.core.extensible.Location
	* @see com.mozu.api.contracts.core.extensible.Location
	*/
	public com.mozu.api.contracts.core.extensible.Location getLocation(Integer locationId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.core.extensible.Location> client = com.mozu.api.clients.commerce.customer.LocationClient.getLocationClient( locationId);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieves the location by providing a name to query by.
	* <p><pre><code>
	*    Location location = new Location();
	*   Location location = location.GetLocationByName( name);
	* </code></pre></p>
	* @param name The name of the location.
	* @return com.mozu.api.contracts.core.extensible.Location
	* @see com.mozu.api.contracts.core.extensible.Location
	*/
	public com.mozu.api.contracts.core.extensible.Location getLocationByName(String name) throws Exception
	{
		MozuClient<com.mozu.api.contracts.core.extensible.Location> client = com.mozu.api.clients.commerce.customer.LocationClient.getLocationByNameClient( name);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieves a list of locations for this particular customer.
	* <p><pre><code>
	*    Location location = new Location();
	*   LocationCollection locationCollection = location.GetLocations();
	* </code></pre></p>
	* @return com.mozu.api.contracts.core.extensible.LocationCollection
	* @see com.mozu.api.contracts.core.extensible.LocationCollection
	*/
	public com.mozu.api.contracts.core.extensible.LocationCollection getLocations() throws Exception
	{
		return getLocations( null,  null,  null,  null);
	}

/**
	* Retrieves a list of locations for this particular customer.
	* <p><pre><code>
	*    Location location = new Location();
	*   LocationCollection locationCollection = location.GetLocations( filter,  pageSize,  sortBy,  startIndex);
	* </code></pre></p>
	* @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param sortBy 
	* @param startIndex 
	* @return com.mozu.api.contracts.core.extensible.LocationCollection
	* @see com.mozu.api.contracts.core.extensible.LocationCollection
	*/
	public com.mozu.api.contracts.core.extensible.LocationCollection getLocations(String filter, Integer pageSize, String sortBy, Integer startIndex) throws Exception
	{
		MozuClient<com.mozu.api.contracts.core.extensible.LocationCollection> client = com.mozu.api.clients.commerce.customer.LocationClient.getLocationsClient( filter,  pageSize,  sortBy,  startIndex);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

			
}



