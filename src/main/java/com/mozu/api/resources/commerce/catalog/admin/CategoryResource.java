/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.catalog.admin;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * 
 * </summary>
 */
public class CategoryResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	public CategoryResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CategoryPagedCollection categoryPagedCollection = category.GetCategories(dataViewMode);
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.CategoryPagedCollection
	 * @see com.mozu.api.contracts.productadmin.CategoryPagedCollection
	 */
	public com.mozu.api.contracts.productadmin.CategoryPagedCollection getCategories(com.mozu.api.DataViewMode dataViewMode) throws Exception
	{
		return getCategories(dataViewMode,  null,  null,  null,  null, null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CategoryPagedCollection categoryPagedCollection = category.GetCategories(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param sortBy 
	 * @param startIndex 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.CategoryPagedCollection
	 * @see com.mozu.api.contracts.productadmin.CategoryPagedCollection
	 */
	public com.mozu.api.contracts.productadmin.CategoryPagedCollection getCategories(com.mozu.api.DataViewMode dataViewMode, String filter, Integer pageSize, String sortBy, Integer startIndex, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CategoryPagedCollection> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.getCategoriesClient(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	Category category = category.GetCategory(dataViewMode,  categoryId, authTicket);
	 * </code></pre></p>
	 * @param categoryId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public com.mozu.api.contracts.productadmin.Category getCategory(com.mozu.api.DataViewMode dataViewMode, Integer categoryId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Category> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.getCategoryClient(dataViewMode,  categoryId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	CategoryCollection categoryCollection = category.GetChildCategories(dataViewMode,  categoryId, authTicket);
	 * </code></pre></p>
	 * @param categoryId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.CategoryCollection
	 * @see com.mozu.api.contracts.productadmin.CategoryCollection
	 */
	public com.mozu.api.contracts.productadmin.CategoryCollection getChildCategories(com.mozu.api.DataViewMode dataViewMode, Integer categoryId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.CategoryCollection> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.getChildCategoriesClient(dataViewMode,  categoryId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	Category category = category.AddCategory(dataViewMode,  category, authTicket);
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @param category 
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public com.mozu.api.contracts.productadmin.Category addCategory(com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.Category category, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Category> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.addCategoryClient(dataViewMode,  category, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	Category category = category.UpdateCategory(dataViewMode,  category,  categoryId);
	 * </code></pre></p>
	 * @param categoryId 
	 * @param authTicket User Auth Ticket
	 * @param category 
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public com.mozu.api.contracts.productadmin.Category updateCategory(com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.Category category, Integer categoryId) throws Exception
	{
		return updateCategory(dataViewMode,  category,  categoryId,  false, null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	Category category = category.UpdateCategory(dataViewMode,  category,  categoryId,  cascadeVisibility, authTicket);
	 * </code></pre></p>
	 * @param cascadeVisibility 
	 * @param categoryId 
	 * @param authTicket User Auth Ticket
	 * @param category 
	 * @return com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 * @see com.mozu.api.contracts.productadmin.Category
	 */
	public com.mozu.api.contracts.productadmin.Category updateCategory(com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.Category category, Integer categoryId, Boolean cascadeVisibility, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Category> client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.updateCategoryClient(dataViewMode,  category,  categoryId,  cascadeVisibility, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	category.DeleteCategoryById(dataViewMode,  categoryId);
	 * </code></pre></p>
	 * @param categoryId 
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void deleteCategoryById(com.mozu.api.DataViewMode dataViewMode, Integer categoryId) throws Exception
	{
		deleteCategoryById(dataViewMode,  categoryId,  false, null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Category category = new Category();
	 *	category.DeleteCategoryById(dataViewMode,  categoryId,  cascadeDelete, authTicket);
	 * </code></pre></p>
	 * @param cascadeDelete 
	 * @param categoryId 
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void deleteCategoryById(com.mozu.api.DataViewMode dataViewMode, Integer categoryId, Boolean cascadeDelete, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.CategoryClient.deleteCategoryByIdClient(dataViewMode,  categoryId,  cascadeDelete, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();

	}

}



