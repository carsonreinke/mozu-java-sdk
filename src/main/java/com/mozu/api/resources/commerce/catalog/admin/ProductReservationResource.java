/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.resources.commerce.catalog.admin;

import com.mozu.api.ApiContext;
import com.mozu.api.resources.BaseResource;
import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Temporarily hold a product from inventory while a shopper is filling out payment information. Create a product reservation when a shopper proceeds to check out and then release the reservation when the order process is complete.
/// </summary>
public class ProductReservationResource extends BaseResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	
	public ProductReservationResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	* Retrieves a list of product reservations according to any specified filter criteria and sort options.
	* <p><pre><code>
	*    ProductReservation productreservation = new ProductReservation();
	*   ProductReservationCollection productReservationCollection = productreservation.GetProductReservations();
	* </code></pre></p>
	* @return com.mozu.api.contracts.productadmin.ProductReservationCollection
	* @see com.mozu.api.contracts.productadmin.ProductReservationCollection
	*/
	public com.mozu.api.contracts.productadmin.ProductReservationCollection getProductReservations() throws Exception
	{
		return getProductReservations( null,  null,  null,  null);
	}

/**
	* Retrieves a list of product reservations according to any specified filter criteria and sort options.
	* <p><pre><code>
	*    ProductReservation productreservation = new ProductReservation();
	*   ProductReservationCollection productReservationCollection = productreservation.GetProductReservations( filter,  pageSize,  sortBy,  startIndex);
	* </code></pre></p>
	* @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param sortBy 
	* @param startIndex 
	* @return com.mozu.api.contracts.productadmin.ProductReservationCollection
	* @see com.mozu.api.contracts.productadmin.ProductReservationCollection
	*/
	public com.mozu.api.contracts.productadmin.ProductReservationCollection getProductReservations(String filter, Integer pageSize, String sortBy, Integer startIndex) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservationCollection> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.getProductReservationsClient( filter,  pageSize,  sortBy,  startIndex);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieves the details of a product reservation.
	* <p><pre><code>
	*    ProductReservation productreservation = new ProductReservation();
	*   ProductReservation productReservation = productreservation.GetProductReservation( productReservationId);
	* </code></pre></p>
	* @param productReservationId Unique identifier of the product reservation.
	* @return com.mozu.api.contracts.productadmin.ProductReservation
	* @see com.mozu.api.contracts.productadmin.ProductReservation
	*/
	public com.mozu.api.contracts.productadmin.ProductReservation getProductReservation(Integer productReservationId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.getProductReservationClient( productReservationId);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Creates a new product reservation for a product. This action places a hold on the product inventory for the quantity specified during the ordering process.
	* <p><pre><code>
	*    ProductReservation productreservation = new ProductReservation();
	*   ProductReservation productReservation = productreservation.AddProductReservation( productReservation);
	* </code></pre></p>
	* @param productReservation Properties of the product reservation.
	* @return com.mozu.api.contracts.productadmin.ProductReservation
	* @see com.mozu.api.contracts.productadmin.ProductReservation
	* @see com.mozu.api.contracts.productadmin.ProductReservation
	*/
	public com.mozu.api.contracts.productadmin.ProductReservation addProductReservation(com.mozu.api.contracts.productadmin.ProductReservation productReservation) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.addProductReservationClient( productReservation);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Commits a product reservation to decrement the product's inventory by the quantity specified then release the reservation once the order process completed successfully.
	* <p><pre><code>
	*    ProductReservation productreservation = new ProductReservation();
	*   productreservation.CommitReservation( productReservationId,  qty);
	* </code></pre></p>
	* @param productReservationId Unique identifier of the reservation.
	* @param qty Number of product items to remove from inventory.
	* @return 
	*/
	public void commitReservation(Integer productReservationId, Integer qty) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.commitReservationClient( productReservationId,  qty);
		setContext(_apiContext, client,true);
		client.executeRequest();

	}

	/**
	* Updates an existing product reservation for a product. 
	* <p><pre><code>
	*    ProductReservation productreservation = new ProductReservation();
	*   ProductReservation productReservation = productreservation.UpdateProductReservation( productReservationId,  productReservation);
	* </code></pre></p>
	* @param productReservationId Unique identifier of the product reservation to update. 
	* @param productReservation Properties of the product reservation to update. 
	* @return com.mozu.api.contracts.productadmin.ProductReservation
	* @see com.mozu.api.contracts.productadmin.ProductReservation
	* @see com.mozu.api.contracts.productadmin.ProductReservation
	*/
	public com.mozu.api.contracts.productadmin.ProductReservation updateProductReservation(Integer productReservationId, com.mozu.api.contracts.productadmin.ProductReservation productReservation) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.updateProductReservationClient( productReservationId,  productReservation);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Deletes a product reservation. For example, delete a reservation when an order is not processed to return the product quantity back to inventory.
	* <p><pre><code>
	*    ProductReservation productreservation = new ProductReservation();
	*   productreservation.DeleteProductReservation( productReservationId);
	* </code></pre></p>
	* @param productReservationId Unique identifier of the reservation.
	* @return 
	*/
	public void deleteProductReservation(Integer productReservationId) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.deleteProductReservationClient( productReservationId);
		setContext(_apiContext, client,true);
		client.executeRequest();

	}


}



