/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.catalog.admin;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * 
 * </summary>
 */
public class ProductReservationResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	public ProductReservationResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	ProductReservationCollection productReservationCollection = productreservation.GetProductReservations(dataViewMode);
	 * </code></pre></p>
	 * @param dataViewMode DataViewMode
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.ProductReservationCollection
	 * @see com.mozu.api.contracts.productadmin.ProductReservationCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductReservationCollection getProductReservations(com.mozu.api.DataViewMode dataViewMode) throws Exception
	{
		return getProductReservations(dataViewMode,  null,  null,  null,  null, null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	ProductReservationCollection productReservationCollection = productreservation.GetProductReservations(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param sortBy 
	 * @param startIndex 
	 * @param dataViewMode DataViewMode
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.ProductReservationCollection
	 * @see com.mozu.api.contracts.productadmin.ProductReservationCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductReservationCollection getProductReservations(com.mozu.api.DataViewMode dataViewMode, String filter, Integer pageSize, String sortBy, Integer startIndex, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservationCollection> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.getProductReservationsClient(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	ProductReservation productReservation = productreservation.GetProductReservation(dataViewMode,  productReservationId, authTicket);
	 * </code></pre></p>
	 * @param productReservationId 
	 * @param dataViewMode DataViewMode
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public com.mozu.api.contracts.productadmin.ProductReservation getProductReservation(com.mozu.api.DataViewMode dataViewMode, Integer productReservationId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.getProductReservationClient(dataViewMode,  productReservationId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	ProductReservation productReservation = productreservation.AddProductReservation(dataViewMode,  productReservation, authTicket);
	 * </code></pre></p>
	 * @param dataViewMode DataViewMode
	 * @param authTicket User Auth Ticket
	 * @param productReservation 
	 * @return com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public com.mozu.api.contracts.productadmin.ProductReservation addProductReservation(com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.ProductReservation productReservation, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.addProductReservationClient(dataViewMode,  productReservation, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	productreservation.CommitReservation(dataViewMode,  productReservationId,  qty, authTicket);
	 * </code></pre></p>
	 * @param productReservationId 
	 * @param qty 
	 * @param dataViewMode DataViewMode
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void commitReservation(com.mozu.api.DataViewMode dataViewMode, Integer productReservationId, Integer qty, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.commitReservationClient(dataViewMode,  productReservationId,  qty, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();

	}

	/**
	 * Updates an existing product reservation for a product. 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	ProductReservation productReservation = productreservation.UpdateProductReservation(dataViewMode,  productReservation,  productReservationId, authTicket);
	 * </code></pre></p>
	 * @param productReservationId Unique identifier of the product reservation to update. 
	 * @param dataViewMode DataViewMode
	 * @param authTicket User Auth Ticket
	 * @param productReservation Properties of the product reservation to update. 
	 * @return com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 * @see com.mozu.api.contracts.productadmin.ProductReservation
	 */
	public com.mozu.api.contracts.productadmin.ProductReservation updateProductReservation(com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.ProductReservation productReservation, Integer productReservationId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductReservation> client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.updateProductReservationClient(dataViewMode,  productReservation,  productReservationId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductReservation productreservation = new ProductReservation();
	 *	productreservation.DeleteProductReservation(dataViewMode,  productReservationId, authTicket);
	 * </code></pre></p>
	 * @param productReservationId 
	 * @param dataViewMode DataViewMode
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void deleteProductReservation(com.mozu.api.DataViewMode dataViewMode, Integer productReservationId, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.ProductReservationClient.deleteProductReservationClient(dataViewMode,  productReservationId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();

	}

}



