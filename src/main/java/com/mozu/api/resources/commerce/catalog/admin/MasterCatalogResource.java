/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.catalog.admin;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * Use the Master Catalog resource to view details of the master catalogs associated with a tenant and to manage the product publishing mode for each master catalog.
 * </summary>
 */
public class MasterCatalogResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	public MasterCatalogResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * Retrieve the details of all master catalog associated with a tenant.
	 * <p><pre><code>
	 *	MasterCatalog mastercatalog = new MasterCatalog();
	 *	MasterCatalogCollection masterCatalogCollection = mastercatalog.GetMasterCatalogs(authTicket);
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.MasterCatalogCollection
	 * @see com.mozu.api.contracts.productadmin.MasterCatalogCollection
	 */
	public com.mozu.api.contracts.productadmin.MasterCatalogCollection getMasterCatalogs(AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.MasterCatalogCollection> client = com.mozu.api.clients.commerce.catalog.admin.MasterCatalogClient.getMasterCatalogsClient(authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieve the details of the master catalog specified in the request.
	 * <p><pre><code>
	 *	MasterCatalog mastercatalog = new MasterCatalog();
	 *	MasterCatalog masterCatalog = mastercatalog.GetMasterCatalog(dataViewMode,  masterCatalogId, authTicket);
	 * </code></pre></p>
	 * @param masterCatalogId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.MasterCatalog
	 * @see com.mozu.api.contracts.productadmin.MasterCatalog
	 */
	public com.mozu.api.contracts.productadmin.MasterCatalog getMasterCatalog(com.mozu.api.DataViewMode dataViewMode, Integer masterCatalogId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.MasterCatalog> client = com.mozu.api.clients.commerce.catalog.admin.MasterCatalogClient.getMasterCatalogClient(dataViewMode,  masterCatalogId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Updates the product publishing mode for the master catalog specified in the request.
	 * <p><pre><code>
	 *	MasterCatalog mastercatalog = new MasterCatalog();
	 *	MasterCatalog masterCatalog = mastercatalog.UpdateMasterCatalog(dataViewMode,  masterCatalog,  masterCatalogId, authTicket);
	 * </code></pre></p>
	 * @param masterCatalogId 
	 * @param authTicket User Auth Ticket
	 * @param masterCatalog Properties of the master catalog to update, which consists of the product publishing mode. Possible values are "Pending" which saves product updates in draft mode until they are published, and "Live" which publishes all product changes immediately.
	 * @return com.mozu.api.contracts.productadmin.MasterCatalog
	 * @see com.mozu.api.contracts.productadmin.MasterCatalog
	 * @see com.mozu.api.contracts.productadmin.MasterCatalog
	 */
	public com.mozu.api.contracts.productadmin.MasterCatalog updateMasterCatalog(com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.MasterCatalog masterCatalog, Integer masterCatalogId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.MasterCatalog> client = com.mozu.api.clients.commerce.catalog.admin.MasterCatalogClient.updateMasterCatalogClient(dataViewMode,  masterCatalog,  masterCatalogId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

}



