/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.resources.commerce.orders;

import com.mozu.api.ApiContext;
import com.mozu.api.resources.BaseResource;
import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use this subresource to retrieve details about items in an active order.
/// </summary>
public class OrderItemResource extends BaseResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	
	public OrderItemResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	* Retrieves the details of a single order item.
	* <p><pre><code>
	*    OrderItem orderitem = new OrderItem();
	*   OrderItem orderItem = orderitem.GetOrderItem( orderId,  orderItemId);
	* </code></pre></p>
	* @param orderId Unique identifier of the order item to retrieve.
	* @param orderItemId Unique identifier of the order item details to retrieve.
	* @return com.mozu.api.contracts.commerceruntime.orders.OrderItem
	* @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	*/
	public com.mozu.api.contracts.commerceruntime.orders.OrderItem getOrderItem(String orderId, String orderItemId) throws Exception
	{
		return getOrderItem( false,  orderId,  orderItemId);
	}

/**
	* Retrieves the details of a single order item.
	* <p><pre><code>
	*    OrderItem orderitem = new OrderItem();
	*   OrderItem orderItem = orderitem.GetOrderItem( draft,  orderId,  orderItemId);
	* </code></pre></p>
	* @param draft If true, retrieve the draft version of this order item, which might include uncommitted changes to the order item, the order, or other order components.
	* @param orderId Unique identifier of the order item to retrieve.
	* @param orderItemId Unique identifier of the order item details to retrieve.
	* @return com.mozu.api.contracts.commerceruntime.orders.OrderItem
	* @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	*/
	public com.mozu.api.contracts.commerceruntime.orders.OrderItem getOrderItem(Boolean draft, String orderId, String orderItemId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.OrderItem> client = com.mozu.api.clients.commerce.orders.OrderItemClient.getOrderItemClient( draft,  orderId,  orderItemId);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieves the details of all items in an order.
	* <p><pre><code>
	*    OrderItem orderitem = new OrderItem();
	*   OrderItemCollection orderItemCollection = orderitem.GetOrderItems( orderId);
	* </code></pre></p>
	* @param orderId Unique identifier of the order items to retrieve.
	* @return com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection
	* @see com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection
	*/
	public com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection getOrderItems(String orderId) throws Exception
	{
		return getOrderItems( false,  orderId);
	}

/**
	* Retrieves the details of all items in an order.
	* <p><pre><code>
	*    OrderItem orderitem = new OrderItem();
	*   OrderItemCollection orderItemCollection = orderitem.GetOrderItems( draft,  orderId);
	* </code></pre></p>
	* @param draft If true, retrieve the draft version of the order's items, which might include uncommitted changes to one or more order items, the order itself, or other order components.
	* @param orderId Unique identifier of the order items to retrieve.
	* @return com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection
	* @see com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection
	*/
	public com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection getOrderItems(Boolean draft, String orderId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.OrderItemCollection> client = com.mozu.api.clients.commerce.orders.OrderItemClient.getOrderItemsClient( draft,  orderId);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Adds a new item to an existing order.
	* <p><pre><code>
	*    OrderItem orderitem = new OrderItem();
	*   Order order = orderitem.CreateOrderItem( orderId,  orderItem);
	* </code></pre></p>
	* @param orderId Unique identifier of the order for which to add the item.
	* @param orderItem The properties of the item to create in the existing order.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order createOrderItem(String orderId, com.mozu.api.contracts.commerceruntime.orders.OrderItem orderItem) throws Exception
	{
		return createOrderItem( orderId,  null,  null,  orderItem);
	}

/**
	* Adds a new item to an existing order.
	* <p><pre><code>
	*    OrderItem orderitem = new OrderItem();
	*   Order order = orderitem.CreateOrderItem( orderId,  updateMode,  version,  orderItem);
	* </code></pre></p>
	* @param orderId Unique identifier of the order for which to add the item.
	* @param updateMode Specifies whether to add the item by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param version If applicable, the version of the order or order draft for which to add the item.
	* @param orderItem The properties of the item to create in the existing order.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.OrderItem
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order createOrderItem(String orderId, String updateMode, String version, com.mozu.api.contracts.commerceruntime.orders.OrderItem orderItem) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> client = com.mozu.api.clients.commerce.orders.OrderItemClient.createOrderItemClient( orderId,  updateMode,  version,  orderItem);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Update the discount applied to an item in an order.
	* <p><pre><code>
	*    OrderItem orderitem = new OrderItem();
	*   Order order = orderitem.UpdateOrderItemDiscount( discountId,  orderId,  orderItemId,  discount);
	* </code></pre></p>
	* @param discountId Unique identifier of the discount. System-supplied and read only.
	* @param orderId Unique identifier of the order associated with the item discount.
	* @param orderItemId Unique identifier of the item in the order.
	* @param discount Properties of the discount to modify for the order item.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.discounts.AppliedDiscount
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order updateOrderItemDiscount(Integer discountId, String orderId, String orderItemId, com.mozu.api.contracts.commerceruntime.discounts.AppliedDiscount discount) throws Exception
	{
		return updateOrderItemDiscount( discountId,  orderId,  orderItemId,  null,  null,  discount);
	}

/**
	* Update the discount applied to an item in an order.
	* <p><pre><code>
	*    OrderItem orderitem = new OrderItem();
	*   Order order = orderitem.UpdateOrderItemDiscount( discountId,  orderId,  orderItemId,  updateMode,  version,  discount);
	* </code></pre></p>
	* @param discountId Unique identifier of the discount. System-supplied and read only.
	* @param orderId Unique identifier of the order associated with the item discount.
	* @param orderItemId Unique identifier of the item in the order.
	* @param updateMode Specifies whether to change the item discount by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param version If applicable, the version of the order or order draft for which to update the item discount.
	* @param discount Properties of the discount to modify for the order item.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.discounts.AppliedDiscount
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order updateOrderItemDiscount(Integer discountId, String orderId, String orderItemId, String updateMode, String version, com.mozu.api.contracts.commerceruntime.discounts.AppliedDiscount discount) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> client = com.mozu.api.clients.commerce.orders.OrderItemClient.updateOrderItemDiscountClient( discountId,  orderId,  orderItemId,  updateMode,  version,  discount);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Override the price of an individual product in the specified order.
	* <p><pre><code>
	*    OrderItem orderitem = new OrderItem();
	*   Order order = orderitem.UpdateItemProductPrice( orderId,  orderItemId,  price);
	* </code></pre></p>
	* @param orderId Unique identifier of the order containing the item to price override.
	* @param orderItemId Unique identifier of the item in the order to price override.
	* @param price The override price to specify for this item in the specified order.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order updateItemProductPrice(String orderId, String orderItemId, Double price) throws Exception
	{
		return updateItemProductPrice( orderId,  orderItemId,  price,  null,  null);
	}

/**
	* Override the price of an individual product in the specified order.
	* <p><pre><code>
	*    OrderItem orderitem = new OrderItem();
	*   Order order = orderitem.UpdateItemProductPrice( orderId,  orderItemId,  price,  updateMode,  version);
	* </code></pre></p>
	* @param orderId Unique identifier of the order containing the item to price override.
	* @param orderItemId Unique identifier of the item in the order to price override.
	* @param price The override price to specify for this item in the specified order.
	* @param updateMode Specifies whether to change the product price by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param version If applicable, the version of the order or order draft for which to update the item price.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order updateItemProductPrice(String orderId, String orderItemId, Double price, String updateMode, String version) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> client = com.mozu.api.clients.commerce.orders.OrderItemClient.updateItemProductPriceClient( orderId,  orderItemId,  price,  updateMode,  version);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Update the quantity of an item in an order.
	* <p><pre><code>
	*    OrderItem orderitem = new OrderItem();
	*   Order order = orderitem.UpdateItemQuantity( orderId,  orderItemId,  quantity);
	* </code></pre></p>
	* @param orderId Unique identifier of the order containing the item to update quantity.
	* @param orderItemId Unique identifier of the item in the order to update quantity.
	* @param quantity The quantity of the item in the order to update.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order updateItemQuantity(String orderId, String orderItemId, Integer quantity) throws Exception
	{
		return updateItemQuantity( orderId,  orderItemId,  quantity,  null,  null);
	}

/**
	* Update the quantity of an item in an order.
	* <p><pre><code>
	*    OrderItem orderitem = new OrderItem();
	*   Order order = orderitem.UpdateItemQuantity( orderId,  orderItemId,  quantity,  updateMode,  version);
	* </code></pre></p>
	* @param orderId Unique identifier of the order containing the item to update quantity.
	* @param orderItemId Unique identifier of the item in the order to update quantity.
	* @param quantity The quantity of the item in the order to update.
	* @param updateMode Specifies whether to change the item quantity by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param version If applicable, the version of the order or order draft for which to update the item quantity.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order updateItemQuantity(String orderId, String orderItemId, Integer quantity, String updateMode, String version) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> client = com.mozu.api.clients.commerce.orders.OrderItemClient.updateItemQuantityClient( orderId,  orderItemId,  quantity,  updateMode,  version);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Removes a previously added item from an existing order.
	* <p><pre><code>
	*    OrderItem orderitem = new OrderItem();
	*   Order order = orderitem.DeleteOrderItem( orderId,  orderItemId);
	* </code></pre></p>
	* @param orderId Unique identifier of the order with the item to remove.
	* @param orderItemId Unique identifier of the item to remove from the order.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order deleteOrderItem(String orderId, String orderItemId) throws Exception
	{
		return deleteOrderItem( orderId,  orderItemId,  null,  null);
	}

/**
	* Removes a previously added item from an existing order.
	* <p><pre><code>
	*    OrderItem orderitem = new OrderItem();
	*   Order order = orderitem.DeleteOrderItem( orderId,  orderItemId,  updateMode,  version);
	* </code></pre></p>
	* @param orderId Unique identifier of the order with the item to remove.
	* @param orderItemId Unique identifier of the item to remove from the order.
	* @param updateMode Specifies whether to remove the item by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param version If applicable, the version of the order or order draft from which to delete the item.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order deleteOrderItem(String orderId, String orderItemId, String updateMode, String version) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> client = com.mozu.api.clients.commerce.orders.OrderItemClient.deleteOrderItemClient( orderId,  orderItemId,  updateMode,  version);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}


}



