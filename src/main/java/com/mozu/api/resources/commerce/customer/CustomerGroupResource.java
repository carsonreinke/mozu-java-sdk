/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.customer;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * Use the Groups resource to manage customer groups that enable a merchant to manage sets of customers and target discounts for these groups. After a customer group is defined, you can associate any number of customer accounts with the group.
 * </summary>
 */
public class CustomerGroupResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	public CustomerGroupResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * Retrieves a list of all customer groups defined for the site according to any specified filter criteria and sort options.
	 * <p><pre><code>
	 *	CustomerGroup customergroup = new CustomerGroup();
	 *	CustomerGroupCollection customerGroupCollection = customergroup.GetGroups();
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.customer.CustomerGroupCollection
	 * @see com.mozu.api.contracts.customer.CustomerGroupCollection
	 */
	public com.mozu.api.contracts.customer.CustomerGroupCollection getGroups() throws Exception
	{
		return getGroups( null,  null,  null,  null, null);
	}

	/**
	 * Retrieves a list of all customer groups defined for the site according to any specified filter criteria and sort options.
	 * <p><pre><code>
	 *	CustomerGroup customergroup = new CustomerGroup();
	 *	CustomerGroupCollection customerGroupCollection = customergroup.GetGroups( startIndex,  pageSize,  sortBy,  filter, authTicket);
	 * </code></pre></p>
	 * @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	 * @param pageSize The number of results to display on each page when creating paged results from a query. The maximum value is 200.
	 * @param sortBy The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"
	 * @param startIndex When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.customer.CustomerGroupCollection
	 * @see com.mozu.api.contracts.customer.CustomerGroupCollection
	 */
	public com.mozu.api.contracts.customer.CustomerGroupCollection getGroups(Integer startIndex, Integer pageSize, String sortBy, String filter, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerGroupCollection> client = com.mozu.api.clients.commerce.customer.CustomerGroupClient.getGroupsClient( startIndex,  pageSize,  sortBy,  filter, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves the name of a customer group specified the customer group ID.
	 * <p><pre><code>
	 *	CustomerGroup customergroup = new CustomerGroup();
	 *	CustomerGroup customerGroup = customergroup.GetGroup( groupId, authTicket);
	 * </code></pre></p>
	 * @param groupId Identifier of the customer group to retrieve.
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.customer.CustomerGroup
	 * @see com.mozu.api.contracts.customer.CustomerGroup
	 */
	public com.mozu.api.contracts.customer.CustomerGroup getGroup(Integer groupId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerGroup> client = com.mozu.api.clients.commerce.customer.CustomerGroupClient.getGroupClient( groupId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Creates a new customer group. New customer groups do not have any associated customer accounts.
	 * <p><pre><code>
	 *	CustomerGroup customergroup = new CustomerGroup();
	 *	CustomerGroup customerGroup = customergroup.AddGroup( group, authTicket);
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @param group Properties of the customer group to add.
	 * @return com.mozu.api.contracts.customer.CustomerGroup
	 * @see com.mozu.api.contracts.customer.CustomerGroup
	 * @see com.mozu.api.contracts.customer.CustomerGroup
	 */
	public com.mozu.api.contracts.customer.CustomerGroup addGroup(com.mozu.api.contracts.customer.CustomerGroup group, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerGroup> client = com.mozu.api.clients.commerce.customer.CustomerGroupClient.addGroupClient( group, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Updates the name of a defined customer group.
	 * <p><pre><code>
	 *	CustomerGroup customergroup = new CustomerGroup();
	 *	CustomerGroup customerGroup = customergroup.UpdateGroup( group,  groupId, authTicket);
	 * </code></pre></p>
	 * @param groupId Identifier of the customer group to update.
	 * @param authTicket User Auth Ticket
	 * @param group Properties of the customer group to update.
	 * @return com.mozu.api.contracts.customer.CustomerGroup
	 * @see com.mozu.api.contracts.customer.CustomerGroup
	 * @see com.mozu.api.contracts.customer.CustomerGroup
	 */
	public com.mozu.api.contracts.customer.CustomerGroup updateGroup(com.mozu.api.contracts.customer.CustomerGroup group, Integer groupId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerGroup> client = com.mozu.api.clients.commerce.customer.CustomerGroupClient.updateGroupClient( group,  groupId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Deletes a customer group specified by its unique identifier. Deleting a group removes any customer account associations, but does not delete the customer account itself.
	 * <p><pre><code>
	 *	CustomerGroup customergroup = new CustomerGroup();
	 *	customergroup.DeleteGroup( groupId, authTicket);
	 * </code></pre></p>
	 * @param groupId Identifier of the customer group to delete.
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void deleteGroup(Integer groupId, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.customer.CustomerGroupClient.deleteGroupClient( groupId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();

	}

}



