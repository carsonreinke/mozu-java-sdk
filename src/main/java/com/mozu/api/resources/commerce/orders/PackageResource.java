/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.orders;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * Use the packages subresource to manage the physical packages to ship for an order.
 * </summary>
 */
public class PackageResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	public PackageResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * Retrieves the details of a package of order items.
	 * <p><pre><code>
	 *	Package package = new Package();
	 *	Package package = package.GetPackage( orderId,  packageId, authTicket);
	 * </code></pre></p>
	 * @param orderId Unique identifier of the order associated with the package to retrieve.
	 * @param packageId Unique identifier of the package to retrieve.
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Package
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Package
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Package getPackage(String orderId, String packageId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Package> client = com.mozu.api.clients.commerce.orders.PackageClient.getPackageClient( orderId,  packageId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves a list of the actions available to perform for a package associated with order fulfillment.
	 * <p><pre><code>
	 *	Package package = new Package();
	 *	string string = package.GetAvailablePackageFulfillmentActions( orderId,  packageId, authTicket);
	 * </code></pre></p>
	 * @param orderId Unique identifier of the order associated with the package fulfillment.
	 * @param packageId Unique identifier of the package associated with the fulfillment actions to retrieve.
	 * @param authTicket User Auth Ticket
	 * @return List<string>
	 * @see string
	 */
	public List<String> getAvailablePackageFulfillmentActions(String orderId, String packageId, AuthTicket authTicket) throws Exception
	{
		MozuClient<List<String>> client = com.mozu.api.clients.commerce.orders.PackageClient.getAvailablePackageFulfillmentActionsClient( orderId,  packageId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Retrieves the package label image supplied by the carrier.
	 * <p><pre><code>
	 *	Package package = new Package();
	 *	Stream stream = package.GetPackageLabel( orderId,  packageId, authTicket);
	 * </code></pre></p>
	 * @param orderId Unique identifier of the order associated with the package label to retrieve.
	 * @param packageId Unique identifier of the package for which to retrieve the label.
	 * @param authTicket User Auth Ticket
	 * @return Stream
	 * @see Stream
	 */
	public java.io.InputStream getPackageLabel(String orderId, String packageId, AuthTicket authTicket) throws Exception
	{
		MozuClient<java.io.InputStream> client = com.mozu.api.clients.commerce.orders.PackageClient.getPackageLabelClient( orderId,  packageId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Creates a new physical package of order items.
	 * <p><pre><code>
	 *	Package package = new Package();
	 *	Package package = package.CreatePackage( pkg,  orderId, authTicket);
	 * </code></pre></p>
	 * @param orderId Unique identifier of the order associated with this package.
	 * @param authTicket User Auth Ticket
	 * @param package Properties of the physical package of order items.
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Package
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Package
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Package
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Package createPackage(com.mozu.api.contracts.commerceruntime.fulfillment.Package pkg, String orderId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Package> client = com.mozu.api.clients.commerce.orders.PackageClient.createPackageClient( pkg,  orderId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Updates one or more properties of a physical package of order items.
	 * <p><pre><code>
	 *	Package package = new Package();
	 *	Package package = package.UpdatePackage( pkg,  orderId,  packageId, authTicket);
	 * </code></pre></p>
	 * @param orderId Unique identifier of the order associated with the package to update.
	 * @param packageId Unique identifier of the package of order items to update.
	 * @param authTicket User Auth Ticket
	 * @param package Wrapper of properties for the package of order items to update.
	 * @return com.mozu.api.contracts.commerceruntime.fulfillment.Package
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Package
	 * @see com.mozu.api.contracts.commerceruntime.fulfillment.Package
	 */
	public com.mozu.api.contracts.commerceruntime.fulfillment.Package updatePackage(com.mozu.api.contracts.commerceruntime.fulfillment.Package pkg, String orderId, String packageId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.fulfillment.Package> client = com.mozu.api.clients.commerce.orders.PackageClient.updatePackageClient( pkg,  orderId,  packageId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * Removes a physical package of items from the specified order.
	 * <p><pre><code>
	 *	Package package = new Package();
	 *	package.DeletePackage( orderId,  packageId, authTicket);
	 * </code></pre></p>
	 * @param orderId Unique identifier of the order associated with the package to delete.
	 * @param packageId Unique identifier of the package to delete.
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void deletePackage(String orderId, String packageId, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.orders.PackageClient.deletePackageClient( orderId,  packageId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();

	}

}



