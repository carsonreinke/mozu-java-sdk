/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.resources.commerce.catalog.admin.attributedefinition;

import com.mozu.api.ApiContext;
import com.mozu.api.resources.BaseResource;
import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use the Product Types resource to manage the types for your product catalog. Product types act as configuration templates, which store a set of attributes common to all products associated with that type. Unlike categories, products can only be associated with a single product type.
/// </summary>
public class ProductTypeResource extends BaseResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	
	public ProductTypeResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	* Retrieves a list of product types according to any specified filter criteria and sort options.
	* <p><pre><code>
	*    ProductType producttype = new ProductType();
	*   ProductTypeCollection productTypeCollection = producttype.GetProductTypes();
	* </code></pre></p>
	* @return com.mozu.api.contracts.productadmin.ProductTypeCollection
	* @see com.mozu.api.contracts.productadmin.ProductTypeCollection
	*/
	public com.mozu.api.contracts.productadmin.ProductTypeCollection getProductTypes() throws Exception
	{
		return getProductTypes( null,  null,  null,  null);
	}

/**
	* Retrieves a list of product types according to any specified filter criteria and sort options.
	* <p><pre><code>
	*    ProductType producttype = new ProductType();
	*   ProductTypeCollection productTypeCollection = producttype.GetProductTypes( filter,  pageSize,  sortBy,  startIndex);
	* </code></pre></p>
	* @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter product type search results by any of its properties. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=Name+cont+shoes"
	* @param pageSize Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.
	* @param sortBy 
	* @param startIndex 
	* @return com.mozu.api.contracts.productadmin.ProductTypeCollection
	* @see com.mozu.api.contracts.productadmin.ProductTypeCollection
	*/
	public com.mozu.api.contracts.productadmin.ProductTypeCollection getProductTypes(String filter, Integer pageSize, String sortBy, Integer startIndex) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductTypeCollection> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.ProductTypeClient.getProductTypesClient( filter,  pageSize,  sortBy,  startIndex);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieves the details of the product type specified in the request.
	* <p><pre><code>
	*    ProductType producttype = new ProductType();
	*   ProductType productType = producttype.GetProductType( productTypeId);
	* </code></pre></p>
	* @param productTypeId Identifier of the product type to retrieve.
	* @return com.mozu.api.contracts.productadmin.ProductType
	* @see com.mozu.api.contracts.productadmin.ProductType
	*/
	public com.mozu.api.contracts.productadmin.ProductType getProductType(Integer productTypeId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductType> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.ProductTypeClient.getProductTypeClient( productTypeId);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Creates a new product type based on the information supplied in the request.
	* <p><pre><code>
	*    ProductType producttype = new ProductType();
	*   ProductType productType = producttype.AddProductType( productType);
	* </code></pre></p>
	* @param productType Properties of the product type to create.
	* @return com.mozu.api.contracts.productadmin.ProductType
	* @see com.mozu.api.contracts.productadmin.ProductType
	* @see com.mozu.api.contracts.productadmin.ProductType
	*/
	public com.mozu.api.contracts.productadmin.ProductType addProductType(com.mozu.api.contracts.productadmin.ProductType productType) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductType> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.ProductTypeClient.addProductTypeClient( productType);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Updates one or more properties of a product type.
	* <p><pre><code>
	*    ProductType producttype = new ProductType();
	*   ProductType productType = producttype.UpdateProductType( productTypeId,  productType);
	* </code></pre></p>
	* @param productTypeId Identifier of the product type to update.
	* @param productType The details of the product type to update.
	* @return com.mozu.api.contracts.productadmin.ProductType
	* @see com.mozu.api.contracts.productadmin.ProductType
	* @see com.mozu.api.contracts.productadmin.ProductType
	*/
	public com.mozu.api.contracts.productadmin.ProductType updateProductType(Integer productTypeId, com.mozu.api.contracts.productadmin.ProductType productType) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductType> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.ProductTypeClient.updateProductTypeClient( productTypeId,  productType);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Deletes the product type by providing the product type ID.
	* <p><pre><code>
	*    ProductType producttype = new ProductType();
	*   producttype.DeleteProductType( productTypeId);
	* </code></pre></p>
	* @param productTypeId Identifier of the product type to delete.
	* @return 
	*/
	public void deleteProductType(Integer productTypeId) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.ProductTypeClient.deleteProductTypeClient( productTypeId);
		setContext(_apiContext, client,true);
		client.executeRequest();

	}


}



