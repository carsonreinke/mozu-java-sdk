/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.catalog.admin.attributedefinition;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * 
 * </summary>
 */
public class ProductTypeResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	public ProductTypeResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * 
	 * <p><pre><code>
	 *	ProductType producttype = new ProductType();
	 *	ProductTypeCollection productTypeCollection = producttype.GetProductTypes(dataViewMode);
	 * </code></pre></p>
	 * @param dataViewMode DataViewMode
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.ProductTypeCollection
	 * @see com.mozu.api.contracts.productadmin.ProductTypeCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductTypeCollection getProductTypes(com.mozu.api.DataViewMode dataViewMode) throws Exception
	{
		return getProductTypes(dataViewMode,  null,  null,  null,  null, null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductType producttype = new ProductType();
	 *	ProductTypeCollection productTypeCollection = producttype.GetProductTypes(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param sortBy 
	 * @param startIndex 
	 * @param dataViewMode DataViewMode
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.ProductTypeCollection
	 * @see com.mozu.api.contracts.productadmin.ProductTypeCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductTypeCollection getProductTypes(com.mozu.api.DataViewMode dataViewMode, String filter, Integer pageSize, String sortBy, Integer startIndex, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductTypeCollection> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.ProductTypeClient.getProductTypesClient(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductType producttype = new ProductType();
	 *	ProductType productType = producttype.GetProductType(dataViewMode,  productTypeId, authTicket);
	 * </code></pre></p>
	 * @param productTypeId 
	 * @param dataViewMode DataViewMode
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.ProductType
	 * @see com.mozu.api.contracts.productadmin.ProductType
	 */
	public com.mozu.api.contracts.productadmin.ProductType getProductType(com.mozu.api.DataViewMode dataViewMode, Integer productTypeId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductType> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.ProductTypeClient.getProductTypeClient(dataViewMode,  productTypeId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductType producttype = new ProductType();
	 *	ProductType productType = producttype.AddProductType(dataViewMode,  productType, authTicket);
	 * </code></pre></p>
	 * @param dataViewMode DataViewMode
	 * @param authTicket User Auth Ticket
	 * @param productType 
	 * @return com.mozu.api.contracts.productadmin.ProductType
	 * @see com.mozu.api.contracts.productadmin.ProductType
	 * @see com.mozu.api.contracts.productadmin.ProductType
	 */
	public com.mozu.api.contracts.productadmin.ProductType addProductType(com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.ProductType productType, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductType> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.ProductTypeClient.addProductTypeClient(dataViewMode,  productType, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductType producttype = new ProductType();
	 *	ProductType productType = producttype.UpdateProductType(dataViewMode,  productType,  productTypeId, authTicket);
	 * </code></pre></p>
	 * @param productTypeId 
	 * @param dataViewMode DataViewMode
	 * @param authTicket User Auth Ticket
	 * @param productType 
	 * @return com.mozu.api.contracts.productadmin.ProductType
	 * @see com.mozu.api.contracts.productadmin.ProductType
	 * @see com.mozu.api.contracts.productadmin.ProductType
	 */
	public com.mozu.api.contracts.productadmin.ProductType updateProductType(com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.ProductType productType, Integer productTypeId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductType> client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.ProductTypeClient.updateProductTypeClient(dataViewMode,  productType,  productTypeId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	ProductType producttype = new ProductType();
	 *	producttype.DeleteProductType(dataViewMode,  productTypeId, authTicket);
	 * </code></pre></p>
	 * @param productTypeId 
	 * @param dataViewMode DataViewMode
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void deleteProductType(com.mozu.api.DataViewMode dataViewMode, Integer productTypeId, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.attributedefinition.ProductTypeClient.deleteProductTypeClient(dataViewMode,  productTypeId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();

	}

}



