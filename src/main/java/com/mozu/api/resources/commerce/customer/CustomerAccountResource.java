/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.resources.commerce.customer;

import com.mozu.api.ApiContext;
import com.mozu.api.resources.BaseResource;
import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Create, view, update, and delete a contact in a customer account. A customer account may have multiple contacts for billing or shipping addresses. Each contact may also list any groups to which the contact belongs and whether the contact accepts marketing material such as newsletters or email offers.
/// </summary>
public class CustomerAccountResource extends BaseResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	
	public CustomerAccountResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	* Retrieves a list of customer accounts.
	* <p><pre><code>
	*    CustomerAccount customeraccount = new CustomerAccount();
	*   CustomerAccountCollection customerAccountCollection = customeraccount.GetAccounts();
	* </code></pre></p>
	* @return com.mozu.api.contracts.customer.CustomerAccountCollection
	* @see com.mozu.api.contracts.customer.CustomerAccountCollection
	*/
	public com.mozu.api.contracts.customer.CustomerAccountCollection getAccounts() throws Exception
	{
		return getAccounts( null,  null,  null,  null,  null,  null,  null);
	}

/**
	* Retrieves a list of customer accounts.
	* <p><pre><code>
	*    CustomerAccount customeraccount = new CustomerAccount();
	*   CustomerAccountCollection customerAccountCollection = customeraccount.GetAccounts( fields,  filter,  pageSize,  q,  qLimit,  sortBy,  startIndex);
	* </code></pre></p>
	* @param fields The fields to include in the response.
	* @param filter A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"
	* @param pageSize 
	* @param q A list of customer account search terms to use in the query when searching across customer name and email. Separate multiple search terms with a space character.
	* @param qLimit The maximum number of search results to return in the response. You can limit any range between 1-100.
	* @param sortBy 
	* @param startIndex 
	* @return com.mozu.api.contracts.customer.CustomerAccountCollection
	* @see com.mozu.api.contracts.customer.CustomerAccountCollection
	*/
	public com.mozu.api.contracts.customer.CustomerAccountCollection getAccounts(String fields, String filter, Integer pageSize, String q, Integer qLimit, String sortBy, Integer startIndex) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAccountCollection> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.getAccountsClient( fields,  filter,  pageSize,  q,  qLimit,  sortBy,  startIndex);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieve details of a customer account.
	* <p><pre><code>
	*    CustomerAccount customeraccount = new CustomerAccount();
	*   CustomerAccount customerAccount = customeraccount.GetAccount( accountId);
	* </code></pre></p>
	* @param accountId Unique identifier of the customer account to retrieve.
	* @return com.mozu.api.contracts.customer.CustomerAccount
	* @see com.mozu.api.contracts.customer.CustomerAccount
	*/
	public com.mozu.api.contracts.customer.CustomerAccount getAccount(Integer accountId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAccount> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.getAccountClient( accountId);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Creates a new customer account.
	* <p><pre><code>
	*    CustomerAccount customeraccount = new CustomerAccount();
	*   CustomerAccount customerAccount = customeraccount.AddAccount( customerAccount);
	* </code></pre></p>
	* @param customerAccount Properties of the new customer account to create.
	* @return com.mozu.api.contracts.customer.CustomerAccount
	* @see com.mozu.api.contracts.customer.CustomerAccount
	* @see com.mozu.api.contracts.customer.CustomerAccount
	*/
	public com.mozu.api.contracts.customer.CustomerAccount addAccount(com.mozu.api.contracts.customer.CustomerAccount customerAccount) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAccount> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.addAccountClient( customerAccount);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Updates a customer account.
	* <p><pre><code>
	*    CustomerAccount customeraccount = new CustomerAccount();
	*   CustomerAccount customerAccount = customeraccount.UpdateAccount( accountId,  customerAccount);
	* </code></pre></p>
	* @param accountId Unique identifier of the customer account.
	* @param customerAccount Properties of the customer account to update.
	* @return com.mozu.api.contracts.customer.CustomerAccount
	* @see com.mozu.api.contracts.customer.CustomerAccount
	* @see com.mozu.api.contracts.customer.CustomerAccount
	*/
	public com.mozu.api.contracts.customer.CustomerAccount updateAccount(Integer accountId, com.mozu.api.contracts.customer.CustomerAccount customerAccount) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAccount> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.updateAccountClient( accountId,  customerAccount);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
	* <p><pre><code>
	*    CustomerAccount customeraccount = new CustomerAccount();
	*   customeraccount.DeleteAccount( accountId);
	* </code></pre></p>
	* @param accountId Unique identifier of the customer account to delete.
	* @return 
	*/
	public void deleteAccount(Integer accountId) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.deleteAccountClient( accountId);
		setContext(_apiContext, client,true);
		client.executeRequest();

	}


}



