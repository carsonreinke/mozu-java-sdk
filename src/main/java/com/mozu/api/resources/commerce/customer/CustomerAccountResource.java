/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.customer;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * 
 * </summary>
 */
public class CustomerAccountResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	public CustomerAccountResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccountCollection customerAccountCollection = customeraccount.GetAccounts();
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.customer.CustomerAccountCollection
	 * @see com.mozu.api.contracts.customer.CustomerAccountCollection
	 */
	public com.mozu.api.contracts.customer.CustomerAccountCollection getAccounts() throws Exception
	{
		return getAccounts( null,  null,  null,  null,  null,  null,  null, null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccountCollection customerAccountCollection = customeraccount.GetAccounts( fields,  filter,  pageSize,  q,  qLimit,  sortBy,  startIndex, authTicket);
	 * </code></pre></p>
	 * @param fields 
	 * @param filter 
	 * @param pageSize 
	 * @param q 
	 * @param qLimit 
	 * @param sortBy 
	 * @param startIndex 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.customer.CustomerAccountCollection
	 * @see com.mozu.api.contracts.customer.CustomerAccountCollection
	 */
	public com.mozu.api.contracts.customer.CustomerAccountCollection getAccounts(String fields, String filter, Integer pageSize, String q, Integer qLimit, String sortBy, Integer startIndex, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAccountCollection> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.getAccountsClient( fields,  filter,  pageSize,  q,  qLimit,  sortBy,  startIndex, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccount customerAccount = customeraccount.GetAccount( accountId, authTicket);
	 * </code></pre></p>
	 * @param accountId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 */
	public com.mozu.api.contracts.customer.CustomerAccount getAccount(Integer accountId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAccount> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.getAccountClient( accountId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerInStockNotificationSubscription customerInStockNotificationSubscription = customeraccount.GetInStockNotification( accountId,  inStockNotificationSubscriptionId, authTicket);
	 * </code></pre></p>
	 * @param accountId 
	 * @param inStockNotificationSubscriptionId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription
	 * @see com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription
	 */
	public com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription getInStockNotification(Integer accountId, Integer inStockNotificationSubscriptionId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.getInStockNotificationClient( accountId,  inStockNotificationSubscriptionId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerInStockNotificationSubscriptionCollection customerInStockNotificationSubscriptionCollection = customeraccount.GetInStockNotifications( accountId);
	 * </code></pre></p>
	 * @param accountId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection
	 * @see com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection
	 */
	public com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection getInStockNotifications(Integer accountId) throws Exception
	{
		return getInStockNotifications( accountId,  null,  null,  null,  null, null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerInStockNotificationSubscriptionCollection customerInStockNotificationSubscriptionCollection = customeraccount.GetInStockNotifications( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
	 * </code></pre></p>
	 * @param accountId 
	 * @param filter 
	 * @param pageSize 
	 * @param sortBy 
	 * @param startIndex 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection
	 * @see com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection
	 */
	public com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection getInStockNotifications(Integer accountId, String filter, Integer pageSize, String sortBy, Integer startIndex, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerInStockNotificationSubscriptionCollection> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.getInStockNotificationsClient( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccount customerAccount = customeraccount.AddAccount( account, authTicket);
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @param account 
	 * @return com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 */
	public com.mozu.api.contracts.customer.CustomerAccount addAccount(com.mozu.api.contracts.customer.CustomerAccount account, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAccount> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.addAccountClient( account, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerInStockNotificationSubscription customerInStockNotificationSubscription = customeraccount.AddInStockNotification( inStockNotificationSubscription,  accountId, authTicket);
	 * </code></pre></p>
	 * @param accountId 
	 * @param authTicket User Auth Ticket
	 * @param inStockNotificationSubscription 
	 * @return com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription
	 * @see com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription
	 * @see com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription
	 */
	public com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription addInStockNotification(com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription inStockNotificationSubscription, Integer accountId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerInStockNotificationSubscription> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.addInStockNotificationClient( inStockNotificationSubscription,  accountId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	customeraccount.RecomputeCustomerLifetimeValue( accountId, authTicket);
	 * </code></pre></p>
	 * @param accountId 
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void recomputeCustomerLifetimeValue(Integer accountId, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.recomputeCustomerLifetimeValueClient( accountId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	CustomerAccount customerAccount = customeraccount.UpdateAccount( account,  accountId, authTicket);
	 * </code></pre></p>
	 * @param accountId 
	 * @param authTicket User Auth Ticket
	 * @param account 
	 * @return com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 * @see com.mozu.api.contracts.customer.CustomerAccount
	 */
	public com.mozu.api.contracts.customer.CustomerAccount updateAccount(com.mozu.api.contracts.customer.CustomerAccount account, Integer accountId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAccount> client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.updateAccountClient( account,  accountId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	customeraccount.DeleteAccount( accountId, authTicket);
	 * </code></pre></p>
	 * @param accountId 
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void deleteAccount(Integer accountId, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.deleteAccountClient( accountId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	CustomerAccount customeraccount = new CustomerAccount();
	 *	customeraccount.DeleteInStockNotificationSubscription( accountId,  inStockNotificationSubscriptionId, authTicket);
	 * </code></pre></p>
	 * @param accountId 
	 * @param inStockNotificationSubscriptionId 
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void deleteInStockNotificationSubscription(Integer accountId, Integer inStockNotificationSubscriptionId, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.customer.CustomerAccountClient.deleteInStockNotificationSubscriptionClient( accountId,  inStockNotificationSubscriptionId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();

	}

}



