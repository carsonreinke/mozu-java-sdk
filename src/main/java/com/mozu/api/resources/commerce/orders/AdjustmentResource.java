/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.resources.commerce.orders;

import com.mozu.api.ApiContext;
import com.mozu.api.resources.BaseResource;
import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use this subresource to manage ad-hoc order level price adjustments.
/// </summary>
public class AdjustmentResource extends BaseResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	
	public AdjustmentResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
			/**
	* Modify the amount charged for shipping the specified order.
	* <p><pre><code>
	*    Adjustment adjustment = new Adjustment();
	*   Order order = adjustment.ApplyShippingAdjustment( orderId,  adjustment);
	* </code></pre></p>
	* @param orderId Unique identifier of the order associated with the shipping adjustment.
	* @param adjustment Properties of the shipping adjustment to apply to the order.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.commerce.Adjustment
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order applyShippingAdjustment(String orderId, com.mozu.api.contracts.commerceruntime.commerce.Adjustment adjustment) throws Exception
	{
		return applyShippingAdjustment( orderId,  null,  null,  adjustment);
	}

/**
	* Modify the amount charged for shipping the specified order.
	* <p><pre><code>
	*    Adjustment adjustment = new Adjustment();
	*   Order order = adjustment.ApplyShippingAdjustment( orderId,  updateMode,  version,  adjustment);
	* </code></pre></p>
	* @param orderId Unique identifier of the order associated with the shipping adjustment.
	* @param updateMode Specifies whether to apply the shipping adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param version If applicable, the version of the order or draft to which to apply the shipping adjustment.
	* @param adjustment Properties of the shipping adjustment to apply to the order.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.commerce.Adjustment
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order applyShippingAdjustment(String orderId, String updateMode, String version, com.mozu.api.contracts.commerceruntime.commerce.Adjustment adjustment) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> client = com.mozu.api.clients.commerce.orders.AdjustmentClient.applyShippingAdjustmentClient( orderId,  updateMode,  version,  adjustment);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Applies a price adjustment to the specified order.
	* <p><pre><code>
	*    Adjustment adjustment = new Adjustment();
	*   Order order = adjustment.ApplyAdjustment( orderId,  adjustment);
	* </code></pre></p>
	* @param orderId Unique identifier of the order for which to apply the adjustment.
	* @param adjustment Properties of the price adjustment to apply to the order.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.commerce.Adjustment
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order applyAdjustment(String orderId, com.mozu.api.contracts.commerceruntime.commerce.Adjustment adjustment) throws Exception
	{
		return applyAdjustment( orderId,  null,  null,  adjustment);
	}

/**
	* Applies a price adjustment to the specified order.
	* <p><pre><code>
	*    Adjustment adjustment = new Adjustment();
	*   Order order = adjustment.ApplyAdjustment( orderId,  updateMode,  version,  adjustment);
	* </code></pre></p>
	* @param orderId Unique identifier of the order for which to apply the adjustment.
	* @param updateMode Specifies whether to apply the adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param version If applicable, the version of the order or draft for which to apply the adjustment.
	* @param adjustment Properties of the price adjustment to apply to the order.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.commerce.Adjustment
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order applyAdjustment(String orderId, String updateMode, String version, com.mozu.api.contracts.commerceruntime.commerce.Adjustment adjustment) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> client = com.mozu.api.clients.commerce.orders.AdjustmentClient.applyAdjustmentClient( orderId,  updateMode,  version,  adjustment);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Removes a shipping adjustment previously applied to an order or draft.
	* <p><pre><code>
	*    Adjustment adjustment = new Adjustment();
	*   Order order = adjustment.RemoveShippingAdjustment( orderId);
	* </code></pre></p>
	* @param orderId Unique identifier of the order with the applied shipping adjustment.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order removeShippingAdjustment(String orderId) throws Exception
	{
		return removeShippingAdjustment( orderId,  null,  null);
	}

/**
	* Removes a shipping adjustment previously applied to an order or draft.
	* <p><pre><code>
	*    Adjustment adjustment = new Adjustment();
	*   Order order = adjustment.RemoveShippingAdjustment( orderId,  updateMode,  version);
	* </code></pre></p>
	* @param orderId Unique identifier of the order with the applied shipping adjustment.
	* @param updateMode Specifies whether to remove the shipping adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then commit the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param version If applicable, the version of the order or draft from which to remove the shipping adjustment.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order removeShippingAdjustment(String orderId, String updateMode, String version) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> client = com.mozu.api.clients.commerce.orders.AdjustmentClient.removeShippingAdjustmentClient( orderId,  updateMode,  version);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Removes a price adjustment from the specified order.
	* <p><pre><code>
	*    Adjustment adjustment = new Adjustment();
	*   Order order = adjustment.RemoveAdjustment( orderId);
	* </code></pre></p>
	* @param orderId Unique identifier of the order for which to delete the adjustment.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order removeAdjustment(String orderId) throws Exception
	{
		return removeAdjustment( orderId,  null,  null);
	}

/**
	* Removes a price adjustment from the specified order.
	* <p><pre><code>
	*    Adjustment adjustment = new Adjustment();
	*   Order order = adjustment.RemoveAdjustment( orderId,  updateMode,  version);
	* </code></pre></p>
	* @param orderId Unique identifier of the order for which to delete the adjustment.
	* @param updateMode Specifies whether to remove the adjustment by updating the original order, updating the order in draft mode, or updating the order in draft mode and then committing the changes to the original. Draft mode enables users to make incremental order changes before committing the changes to the original order. Valid values are "ApplyToOriginal", "ApplyToDraft", or "ApplyAndCommit".
	* @param version If applicable, the version of the order or draft from which to remove the adjustment.
	* @return com.mozu.api.contracts.commerceruntime.orders.Order
	* @see com.mozu.api.contracts.commerceruntime.orders.Order
	*/
	public com.mozu.api.contracts.commerceruntime.orders.Order removeAdjustment(String orderId, String updateMode, String version) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.orders.Order> client = com.mozu.api.clients.commerce.orders.AdjustmentClient.removeAdjustmentClient( orderId,  updateMode,  version);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}


}



