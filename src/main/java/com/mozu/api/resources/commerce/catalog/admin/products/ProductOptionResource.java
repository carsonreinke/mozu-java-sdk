/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.resources.commerce.catalog.admin.products;

import com.mozu.api.ApiContext;
import com.mozu.api.resources.BaseResource;
import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Query, create, and update product options.
/// </summary>
public class ProductOptionResource extends BaseResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	
	public ProductOptionResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	* Retrieves a list of all option attributes configured for the product specified in the request.
	* <p><pre><code>
	*    ProductOption productoption = new ProductOption();
	*   ProductOption productOption = productoption.GetOptions( productCode);
	* </code></pre></p>
	* @param productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @return List<com.mozu.api.contracts.productadmin.ProductOption>
	* @see com.mozu.api.contracts.productadmin.ProductOption
	*/
	public ArrayList<com.mozu.api.contracts.productadmin.ProductOption> getOptions(String productCode) throws Exception
	{
		MozuClient<ArrayList<com.mozu.api.contracts.productadmin.ProductOption>> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductOptionClient.getOptionsClient( productCode);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieves the catalog option by providing the product type ID and the attribute's fully qualified name.
	* <p><pre><code>
	*    ProductOption productoption = new ProductOption();
	*   ProductOption productOption = productoption.GetOption( attributeFQN,  productCode);
	* </code></pre></p>
	* @param attributeFQN The fully qualified name of the attribute, which is a user defined attribute identifier.
	* @param productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @return com.mozu.api.contracts.productadmin.ProductOption
	* @see com.mozu.api.contracts.productadmin.ProductOption
	*/
	public com.mozu.api.contracts.productadmin.ProductOption getOption(String attributeFQN, String productCode) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductOption> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductOptionClient.getOptionClient( attributeFQN,  productCode);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Adds or creates a product option.
	* <p><pre><code>
	*    ProductOption productoption = new ProductOption();
	*   ProductOption productOption = productoption.AddOption( productCode,  productOption);
	* </code></pre></p>
	* @param productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param productOption The product option being added or created.
	* @return com.mozu.api.contracts.productadmin.ProductOption
	* @see com.mozu.api.contracts.productadmin.ProductOption
	* @see com.mozu.api.contracts.productadmin.ProductOption
	*/
	public com.mozu.api.contracts.productadmin.ProductOption addOption(String productCode, com.mozu.api.contracts.productadmin.ProductOption productOption) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductOption> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductOptionClient.addOptionClient( productCode,  productOption);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Updates a product option by providing the product type ID and the attribute's fully qualified name. There is also a request body to supply additional information.
	* <p><pre><code>
	*    ProductOption productoption = new ProductOption();
	*   ProductOption productOption = productoption.UpdateOption( attributeFQN,  productCode,  productOption);
	* </code></pre></p>
	* @param attributeFQN The fully qualified name of the attribute, which is a user defined attribute identifier.
	* @param productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @param productOption The product option being updated.
	* @return com.mozu.api.contracts.productadmin.ProductOption
	* @see com.mozu.api.contracts.productadmin.ProductOption
	* @see com.mozu.api.contracts.productadmin.ProductOption
	*/
	public com.mozu.api.contracts.productadmin.ProductOption updateOption(String attributeFQN, String productCode, com.mozu.api.contracts.productadmin.ProductOption productOption) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductOption> client = com.mozu.api.clients.commerce.catalog.admin.products.ProductOptionClient.updateOptionClient( attributeFQN,  productCode,  productOption);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Deletes the catalog option by providing the product type ID and the attribute's fully qualified name.
	* <p><pre><code>
	*    ProductOption productoption = new ProductOption();
	*   productoption.DeleteOption( attributeFQN,  productCode);
	* </code></pre></p>
	* @param attributeFQN The fully qualified name of the attribute, which is a user defined attribute identifier.
	* @param productCode Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
	* @return 
	*/
	public void deleteOption(String attributeFQN, String productCode) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.products.ProductOptionClient.deleteOptionClient( attributeFQN,  productCode);
		setContext(_apiContext, client,true);
		client.executeRequest();

	}


}



