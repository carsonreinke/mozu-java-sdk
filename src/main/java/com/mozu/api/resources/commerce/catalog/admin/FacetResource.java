/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.resources.commerce.catalog.admin;

import com.mozu.api.ApiContext;
import com.mozu.api.resources.BaseResource;
import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Use the Facets resource to manage the facets shoppers use to filter product display results on a storefront. Facets can include categories, product attributes, or prices, and use either a range of values or discrete values.
/// </summary>
public class FacetResource extends BaseResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	
	public FacetResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	* Retrieves a facet specified by its unique identifier and displays its properties.
	* <p><pre><code>
	*    Facet facet = new Facet();
	*   Facet facet = facet.GetFacet( facetId);
	* </code></pre></p>
	* @param facetId Unique identifier of the facet to retrieve.
	* @return com.mozu.api.contracts.productadmin.Facet
	* @see com.mozu.api.contracts.productadmin.Facet
	*/
	public com.mozu.api.contracts.productadmin.Facet getFacet(Integer facetId) throws Exception
	{
		return getFacet( facetId,  false);
	}

/**
	* Retrieves a facet specified by its unique identifier and displays its properties.
	* <p><pre><code>
	*    Facet facet = new Facet();
	*   Facet facet = facet.GetFacet( facetId,  validate);
	* </code></pre></p>
	* @param facetId Unique identifier of the facet to retrieve.
	* @param validate Validates that the product category associated with a facet is active. System-supplied and read only.
	* @return com.mozu.api.contracts.productadmin.Facet
	* @see com.mozu.api.contracts.productadmin.Facet
	*/
	public com.mozu.api.contracts.productadmin.Facet getFacet(Integer facetId, Boolean validate) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Facet> client = com.mozu.api.clients.commerce.catalog.admin.FacetClient.getFacetClient( facetId,  validate);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieves a list of the facets defined for the specified category.
	* <p><pre><code>
	*    Facet facet = new Facet();
	*   FacetSet facetSet = facet.GetFacetCategoryList( categoryId);
	* </code></pre></p>
	* @param categoryId Unique identifier of the category associated with the facets to retrieve.
	* @return com.mozu.api.contracts.productadmin.FacetSet
	* @see com.mozu.api.contracts.productadmin.FacetSet
	*/
	public com.mozu.api.contracts.productadmin.FacetSet getFacetCategoryList(Integer categoryId) throws Exception
	{
		return getFacetCategoryList( categoryId,  false,  false);
	}

/**
	* Retrieves a list of the facets defined for the specified category.
	* <p><pre><code>
	*    Facet facet = new Facet();
	*   FacetSet facetSet = facet.GetFacetCategoryList( categoryId,  includeAvailable,  validate);
	* </code></pre></p>
	* @param categoryId Unique identifier of the category associated with the facets to retrieve.
	* @param includeAvailable If true, returns a list of the attributes and categories associated with a product type that have not been defined as a facet for the category.
	* @param validate Validates that the product category associated with a facet is active. System-supplied and read only.
	* @return com.mozu.api.contracts.productadmin.FacetSet
	* @see com.mozu.api.contracts.productadmin.FacetSet
	*/
	public com.mozu.api.contracts.productadmin.FacetSet getFacetCategoryList(Integer categoryId, Boolean includeAvailable, Boolean validate) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.FacetSet> client = com.mozu.api.clients.commerce.catalog.admin.FacetClient.getFacetCategoryListClient( categoryId,  includeAvailable,  validate);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Creates a new category, price, or attribute facet. Supply the category or attribute source to use for the facet values.
	* <p><pre><code>
	*    Facet facet = new Facet();
	*   Facet facet = facet.AddFacet( facet);
	* </code></pre></p>
	* @param facet Properties of the new facet to create. Required properties: Source, FacetType, IsHidden, and CategoryId.
	* @return com.mozu.api.contracts.productadmin.Facet
	* @see com.mozu.api.contracts.productadmin.Facet
	* @see com.mozu.api.contracts.productadmin.Facet
	*/
	public com.mozu.api.contracts.productadmin.Facet addFacet(com.mozu.api.contracts.productadmin.Facet facet) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Facet> client = com.mozu.api.clients.commerce.catalog.admin.FacetClient.addFacetClient( facet);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Modifies one or more properties of a defined facet.
	* <p><pre><code>
	*    Facet facet = new Facet();
	*   Facet facet = facet.UpdateFacet( facetId,  facet);
	* </code></pre></p>
	* @param facetId Unique identifier of the facet to modify.
	* @param facet Properties of the defined facet to modify. Required properties: Source, FacetType, IsHidden, and CategoryId.
	* @return com.mozu.api.contracts.productadmin.Facet
	* @see com.mozu.api.contracts.productadmin.Facet
	* @see com.mozu.api.contracts.productadmin.Facet
	*/
	public com.mozu.api.contracts.productadmin.Facet updateFacet(Integer facetId, com.mozu.api.contracts.productadmin.Facet facet) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Facet> client = com.mozu.api.clients.commerce.catalog.admin.FacetClient.updateFacetClient( facetId,  facet);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Deletes the facet specified by its unique identifier.
	* <p><pre><code>
	*    Facet facet = new Facet();
	*   facet.DeleteFacetById( facetId);
	* </code></pre></p>
	* @param facetId Unique identifier of the facet to delete.
	* @return 
	*/
	public void deleteFacetById(Integer facetId) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.FacetClient.deleteFacetByIdClient( facetId);
		setContext(_apiContext, client,true);
		client.executeRequest();

	}


}



