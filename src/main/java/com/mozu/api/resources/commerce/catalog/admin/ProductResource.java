/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce.catalog.admin;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * 
 * </summary>
 */
public class ProductResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	public ProductResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ProductCollection productCollection = product.GetProducts(dataViewMode);
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.ProductCollection
	 * @see com.mozu.api.contracts.productadmin.ProductCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductCollection getProducts(com.mozu.api.DataViewMode dataViewMode) throws Exception
	{
		return getProducts(dataViewMode,  null,  false,  null,  null,  null,  null,  null, null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ProductCollection productCollection = product.GetProducts(dataViewMode,  filter,  noCount,  pageSize,  q,  qLimit,  sortBy,  startIndex, authTicket);
	 * </code></pre></p>
	 * @param filter 
	 * @param noCount 
	 * @param pageSize 
	 * @param q 
	 * @param qLimit 
	 * @param sortBy 
	 * @param startIndex 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.ProductCollection
	 * @see com.mozu.api.contracts.productadmin.ProductCollection
	 */
	public com.mozu.api.contracts.productadmin.ProductCollection getProducts(com.mozu.api.DataViewMode dataViewMode, String filter, Boolean noCount, Integer pageSize, String q, Integer qLimit, String sortBy, Integer startIndex, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductCollection> client = com.mozu.api.clients.commerce.catalog.admin.ProductClient.getProductsClient(dataViewMode,  filter,  noCount,  pageSize,  q,  qLimit,  sortBy,  startIndex, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	Product product = product.GetProduct(dataViewMode,  productCode, authTicket);
	 * </code></pre></p>
	 * @param productCode 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.Product
	 * @see com.mozu.api.contracts.productadmin.Product
	 */
	public com.mozu.api.contracts.productadmin.Product getProduct(com.mozu.api.DataViewMode dataViewMode, String productCode, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Product> client = com.mozu.api.clients.commerce.catalog.admin.ProductClient.getProductClient(dataViewMode,  productCode, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ProductInCatalogInfo productInCatalogInfo = product.GetProductInCatalogs(dataViewMode,  productCode, authTicket);
	 * </code></pre></p>
	 * @param productCode 
	 * @param authTicket User Auth Ticket
	 * @return List<com.mozu.api.contracts.productadmin.ProductInCatalogInfo>
	 * @see com.mozu.api.contracts.productadmin.ProductInCatalogInfo
	 */
	public List<com.mozu.api.contracts.productadmin.ProductInCatalogInfo> getProductInCatalogs(com.mozu.api.DataViewMode dataViewMode, String productCode, AuthTicket authTicket) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.ProductInCatalogInfo>> client = com.mozu.api.clients.commerce.catalog.admin.ProductClient.getProductInCatalogsClient(dataViewMode,  productCode, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ProductInCatalogInfo productInCatalogInfo = product.GetProductInCatalog(dataViewMode,  catalogId,  productCode, authTicket);
	 * </code></pre></p>
	 * @param catalogId 
	 * @param productCode 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.productadmin.ProductInCatalogInfo
	 * @see com.mozu.api.contracts.productadmin.ProductInCatalogInfo
	 */
	public com.mozu.api.contracts.productadmin.ProductInCatalogInfo getProductInCatalog(com.mozu.api.DataViewMode dataViewMode, Integer catalogId, String productCode, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductInCatalogInfo> client = com.mozu.api.clients.commerce.catalog.admin.ProductClient.getProductInCatalogClient(dataViewMode,  catalogId,  productCode, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	Product product = product.AddProduct(dataViewMode,  product, authTicket);
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @param product 
	 * @return com.mozu.api.contracts.productadmin.Product
	 * @see com.mozu.api.contracts.productadmin.Product
	 * @see com.mozu.api.contracts.productadmin.Product
	 */
	public com.mozu.api.contracts.productadmin.Product addProduct(com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.Product product, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Product> client = com.mozu.api.clients.commerce.catalog.admin.ProductClient.addProductClient(dataViewMode,  product, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ProductInCatalogInfo productInCatalogInfo = product.AddProductInCatalog(dataViewMode,  productInCatalogInfoIn,  productCode, authTicket);
	 * </code></pre></p>
	 * @param productCode 
	 * @param authTicket User Auth Ticket
	 * @param productInCatalogInfoIn 
	 * @return com.mozu.api.contracts.productadmin.ProductInCatalogInfo
	 * @see com.mozu.api.contracts.productadmin.ProductInCatalogInfo
	 * @see com.mozu.api.contracts.productadmin.ProductInCatalogInfo
	 */
	public com.mozu.api.contracts.productadmin.ProductInCatalogInfo addProductInCatalog(com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.ProductInCatalogInfo productInCatalogInfoIn, String productCode, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductInCatalogInfo> client = com.mozu.api.clients.commerce.catalog.admin.ProductClient.addProductInCatalogClient(dataViewMode,  productInCatalogInfoIn,  productCode, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	Product product = product.UpdateProduct(dataViewMode,  product,  productCode, authTicket);
	 * </code></pre></p>
	 * @param productCode 
	 * @param authTicket User Auth Ticket
	 * @param product 
	 * @return com.mozu.api.contracts.productadmin.Product
	 * @see com.mozu.api.contracts.productadmin.Product
	 * @see com.mozu.api.contracts.productadmin.Product
	 */
	public com.mozu.api.contracts.productadmin.Product updateProduct(com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.Product product, String productCode, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.Product> client = com.mozu.api.clients.commerce.catalog.admin.ProductClient.updateProductClient(dataViewMode,  product,  productCode, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ProductInCatalogInfo productInCatalogInfo = product.UpdateProductInCatalogs(dataViewMode,  productInCatalogsIn,  productCode, authTicket);
	 * </code></pre></p>
	 * @param productCode 
	 * @param authTicket User Auth Ticket
	 * @param productInCatalogsIn 
	 * @return List<com.mozu.api.contracts.productadmin.ProductInCatalogInfo>
	 * @see com.mozu.api.contracts.productadmin.ProductInCatalogInfo
	 * @see com.mozu.api.contracts.productadmin.ProductInCatalogInfo
	 */
	public List<com.mozu.api.contracts.productadmin.ProductInCatalogInfo> updateProductInCatalogs(com.mozu.api.DataViewMode dataViewMode, List<com.mozu.api.contracts.productadmin.ProductInCatalogInfo> productInCatalogsIn, String productCode, AuthTicket authTicket) throws Exception
	{
		MozuClient<List<com.mozu.api.contracts.productadmin.ProductInCatalogInfo>> client = com.mozu.api.clients.commerce.catalog.admin.ProductClient.updateProductInCatalogsClient(dataViewMode,  productInCatalogsIn,  productCode, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	ProductInCatalogInfo productInCatalogInfo = product.UpdateProductInCatalog(dataViewMode,  productInCatalogInfoIn,  catalogId,  productCode, authTicket);
	 * </code></pre></p>
	 * @param catalogId 
	 * @param productCode 
	 * @param authTicket User Auth Ticket
	 * @param productInCatalogInfoIn 
	 * @return com.mozu.api.contracts.productadmin.ProductInCatalogInfo
	 * @see com.mozu.api.contracts.productadmin.ProductInCatalogInfo
	 * @see com.mozu.api.contracts.productadmin.ProductInCatalogInfo
	 */
	public com.mozu.api.contracts.productadmin.ProductInCatalogInfo updateProductInCatalog(com.mozu.api.DataViewMode dataViewMode, com.mozu.api.contracts.productadmin.ProductInCatalogInfo productInCatalogInfoIn, Integer catalogId, String productCode, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.productadmin.ProductInCatalogInfo> client = com.mozu.api.clients.commerce.catalog.admin.ProductClient.updateProductInCatalogClient(dataViewMode,  productInCatalogInfoIn,  catalogId,  productCode, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	product.DeleteProduct(dataViewMode,  productCode, authTicket);
	 * </code></pre></p>
	 * @param productCode 
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void deleteProduct(com.mozu.api.DataViewMode dataViewMode, String productCode, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.ProductClient.deleteProductClient(dataViewMode,  productCode, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Product product = new Product();
	 *	product.DeleteProductInCatalog(dataViewMode,  catalogId,  productCode, authTicket);
	 * </code></pre></p>
	 * @param catalogId 
	 * @param productCode 
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void deleteProductInCatalog(com.mozu.api.DataViewMode dataViewMode, Integer catalogId, String productCode, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.catalog.admin.ProductClient.deleteProductInCatalogClient(dataViewMode,  catalogId,  productCode, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();

	}

}



