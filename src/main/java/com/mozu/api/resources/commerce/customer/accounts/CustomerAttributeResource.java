/**
*     This code was auto-generated by a tool.     
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*/
package com.mozu.api.resources.commerce.customer.accounts;

import com.mozu.api.ApiContext;
import com.mozu.api.resources.BaseResource;
import java.util.ArrayList;
import com.mozu.api.MozuClient;

/// <summary>
/// Mozu customers and merchants can create, view, update, and delete attributes for a customer account.
/// </summary>
public class CustomerAttributeResource extends BaseResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	
	public CustomerAttributeResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	* Retrieves the contents of an attribute associated with the specified customer account.
	* <p><pre><code>
	*    CustomerAttribute customerattribute = new CustomerAttribute();
	*   CustomerAttribute customerAttribute = customerattribute.GetAccountAttribute( accountId,  attributeId);
	* </code></pre></p>
	* @param accountId Identifier of the customer account associated with the attribute to retrieve.
	* @param attributeId Identifier of the customer account attribute to retrieve.
	* @return com.mozu.api.contracts.customer.CustomerAttribute
	* @see com.mozu.api.contracts.customer.CustomerAttribute
	*/
	public com.mozu.api.contracts.customer.CustomerAttribute getAccountAttribute(Integer accountId, Integer attributeId) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAttribute> client = com.mozu.api.clients.commerce.customer.accounts.CustomerAttributeClient.getAccountAttributeClient( accountId,  attributeId);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

/**
	* Retrieves the list of customer account attributes.
	* <p><pre><code>
	*    CustomerAttribute customerattribute = new CustomerAttribute();
	*   CustomerAttributeCollection customerAttributeCollection = customerattribute.GetAccountAttributes( accountId);
	* </code></pre></p>
	* @param accountId Identifier of the customer account associated with the attributes to retrieve.
	* @return com.mozu.api.contracts.customer.CustomerAttributeCollection
	* @see com.mozu.api.contracts.customer.CustomerAttributeCollection
	*/
	public com.mozu.api.contracts.customer.CustomerAttributeCollection getAccountAttributes(Integer accountId) throws Exception
	{
		return getAccountAttributes( accountId,  null,  null,  null,  null);
	}

/**
	* Retrieves the list of customer account attributes.
	* <p><pre><code>
	*    CustomerAttribute customerattribute = new CustomerAttribute();
	*   CustomerAttributeCollection customerAttributeCollection = customerattribute.GetAccountAttributes( accountId,  filter,  pageSize,  sortBy,  startIndex);
	* </code></pre></p>
	* @param accountId Identifier of the customer account associated with the attributes to retrieve.
	* @param filter 
	* @param pageSize 
	* @param sortBy 
	* @param startIndex 
	* @return com.mozu.api.contracts.customer.CustomerAttributeCollection
	* @see com.mozu.api.contracts.customer.CustomerAttributeCollection
	*/
	public com.mozu.api.contracts.customer.CustomerAttributeCollection getAccountAttributes(Integer accountId, String filter, Integer pageSize, String sortBy, Integer startIndex) throws Exception
	{
		MozuClient<com.mozu.api.contracts.customer.CustomerAttributeCollection> client = com.mozu.api.clients.commerce.customer.accounts.CustomerAttributeClient.getAccountAttributesClient( accountId,  filter,  pageSize,  sortBy,  startIndex);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Adds a new attribute to associate with the specified customer account.
	* <p><pre><code>
	*    CustomerAttribute customerattribute = new CustomerAttribute();
	*   CustomerAttribute customerAttribute = customerattribute.AddAccountAttributes( accountId,  customerAccountAttributes);
	* </code></pre></p>
	* @param accountId Identifier of the customer account associated with the new attribute.
	* @param customerAccountAttributes The properties of the customer account attribute to create.
	* @return List<com.mozu.api.contracts.customer.CustomerAttribute>
	* @see com.mozu.api.contracts.customer.CustomerAttribute
	* @see com.mozu.api.contracts.customer.CustomerAttribute
	*/
	public ArrayList<com.mozu.api.contracts.customer.CustomerAttribute> addAccountAttributes(Integer accountId, ArrayList<com.mozu.api.contracts.customer.CustomerAttribute> customerAccountAttributes) throws Exception
	{
		MozuClient<ArrayList<com.mozu.api.contracts.customer.CustomerAttribute>> client = com.mozu.api.clients.commerce.customer.accounts.CustomerAttributeClient.addAccountAttributesClient( accountId,  customerAccountAttributes);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	/**
	* Update a single customer account attribute by providing the customer account ID. This operation can optionally indicate whether or not items missing from the collection should be removed.
	* <p><pre><code>
	*    CustomerAttribute customerattribute = new CustomerAttribute();
	*   CustomerAttribute customerAttribute = customerattribute.UpdateAccountAttribute( accountId,  customerAccountAttribute);
	* </code></pre></p>
	* @param accountId Identifier of the customer account associated with the attribute.
	* @param customerAccountAttribute The properties of the customer account attribute being updated.
	* @return List<com.mozu.api.contracts.customer.CustomerAttribute>
	* @see com.mozu.api.contracts.customer.CustomerAttribute
	* @see com.mozu.api.contracts.customer.CustomerAttribute
	*/
	public ArrayList<com.mozu.api.contracts.customer.CustomerAttribute> updateAccountAttribute(Integer accountId, ArrayList<com.mozu.api.contracts.customer.CustomerAttribute> customerAccountAttribute) throws Exception
	{
		return updateAccountAttribute( accountId,  false,  customerAccountAttribute);
	}

/**
	* Update a single customer account attribute by providing the customer account ID. This operation can optionally indicate whether or not items missing from the collection should be removed.
	* <p><pre><code>
	*    CustomerAttribute customerattribute = new CustomerAttribute();
	*   CustomerAttribute customerAttribute = customerattribute.UpdateAccountAttribute( accountId,  removeMissing,  customerAccountAttribute);
	* </code></pre></p>
	* @param accountId Identifier of the customer account associated with the attribute.
	* @param removeMissing If true, remove the items missing from the collection. If false, do not remove items missing from the collection.
	* @param customerAccountAttribute The properties of the customer account attribute being updated.
	* @return List<com.mozu.api.contracts.customer.CustomerAttribute>
	* @see com.mozu.api.contracts.customer.CustomerAttribute
	* @see com.mozu.api.contracts.customer.CustomerAttribute
	*/
	public ArrayList<com.mozu.api.contracts.customer.CustomerAttribute> updateAccountAttribute(Integer accountId, Boolean removeMissing, ArrayList<com.mozu.api.contracts.customer.CustomerAttribute> customerAccountAttribute) throws Exception
	{
		MozuClient<ArrayList<com.mozu.api.contracts.customer.CustomerAttribute>> client = com.mozu.api.clients.commerce.customer.accounts.CustomerAttributeClient.updateAccountAttributeClient( accountId,  removeMissing,  customerAccountAttribute);
		setContext(_apiContext, client,true);
		client.executeRequest();
		return client.getResult();

	}

	
}



