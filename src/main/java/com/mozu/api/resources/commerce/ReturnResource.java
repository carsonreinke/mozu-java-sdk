/**
 *     This code was auto-generated by a tool.     
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 */
package com.mozu.api.resources.commerce;

import com.mozu.api.ApiContext;
import java.util.List;
import java.util.ArrayList;
import com.mozu.api.MozuClient;
import com.mozu.api.MozuUrl;
import com.mozu.api.Headers;
import com.mozu.api.security.AuthTicket;

/** <summary>
 * 
 * </summary>
 */
public class ReturnResource {
	///
	/// <see cref="Mozu.Api.ApiContext"/>
	///
	private ApiContext _apiContext;
	public ReturnResource(ApiContext apiContext) 
	{
		_apiContext = apiContext;
	}
	
	/**
	 * 
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	ReturnCollection returnCollection = return.GetReturns();
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	 * @see com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	 */
	public com.mozu.api.contracts.commerceruntime.returns.ReturnCollection getReturns() throws Exception
	{
		return getReturns( null,  null,  null,  null, null);
	}

	/**
	 * 
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	ReturnCollection returnCollection = return.GetReturns( filter,  pageSize,  sortBy,  startIndex, authTicket);
	 * </code></pre></p>
	 * @param filter 
	 * @param pageSize 
	 * @param sortBy 
	 * @param startIndex 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	 * @see com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	 */
	public com.mozu.api.contracts.commerceruntime.returns.ReturnCollection getReturns(String filter, Integer pageSize, String sortBy, Integer startIndex, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.ReturnCollection> client = com.mozu.api.clients.commerce.ReturnClient.getReturnsClient( filter,  pageSize,  sortBy,  startIndex, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	Return return = return.GetReturn( returnId, authTicket);
	 * </code></pre></p>
	 * @param returnId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.returns.Return
	 */
	public com.mozu.api.contracts.commerceruntime.returns.Return getReturn(String returnId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> client = com.mozu.api.clients.commerce.ReturnClient.getReturnClient( returnId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	string string = return.GetAvailableReturnActions( returnId, authTicket);
	 * </code></pre></p>
	 * @param returnId 
	 * @param authTicket User Auth Ticket
	 * @return List<string>
	 * @see string
	 */
	public List<String> getAvailableReturnActions(String returnId, AuthTicket authTicket) throws Exception
	{
		MozuClient<List<String>> client = com.mozu.api.clients.commerce.ReturnClient.getAvailableReturnActionsClient( returnId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	PaymentCollection paymentCollection = return.GetPayments( returnId, authTicket);
	 * </code></pre></p>
	 * @param returnId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.commerceruntime.payments.PaymentCollection
	 * @see com.mozu.api.contracts.commerceruntime.payments.PaymentCollection
	 */
	public com.mozu.api.contracts.commerceruntime.payments.PaymentCollection getPayments(String returnId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.payments.PaymentCollection> client = com.mozu.api.clients.commerce.ReturnClient.getPaymentsClient( returnId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	Payment payment = return.GetPayment( paymentId,  returnId, authTicket);
	 * </code></pre></p>
	 * @param paymentId 
	 * @param returnId 
	 * @param authTicket User Auth Ticket
	 * @return com.mozu.api.contracts.commerceruntime.payments.Payment
	 * @see com.mozu.api.contracts.commerceruntime.payments.Payment
	 */
	public com.mozu.api.contracts.commerceruntime.payments.Payment getPayment(String paymentId, String returnId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.payments.Payment> client = com.mozu.api.clients.commerce.ReturnClient.getPaymentClient( paymentId,  returnId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	string string = return.GetAvailablePaymentActionsForReturn( paymentId,  returnId, authTicket);
	 * </code></pre></p>
	 * @param paymentId 
	 * @param returnId 
	 * @param authTicket User Auth Ticket
	 * @return List<string>
	 * @see string
	 */
	public List<String> getAvailablePaymentActionsForReturn(String paymentId, String returnId, AuthTicket authTicket) throws Exception
	{
		MozuClient<List<String>> client = com.mozu.api.clients.commerce.ReturnClient.getAvailablePaymentActionsForReturnClient( paymentId,  returnId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	Return return = return.CreateReturn( ret, authTicket);
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @param ret 
	 * @return com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.returns.Return
	 */
	public com.mozu.api.contracts.commerceruntime.returns.Return createReturn(com.mozu.api.contracts.commerceruntime.returns.Return ret, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> client = com.mozu.api.clients.commerce.ReturnClient.createReturnClient( ret, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	Return return = return.PerformPaymentActionForReturn( action,  paymentId,  returnId, authTicket);
	 * </code></pre></p>
	 * @param paymentId 
	 * @param returnId 
	 * @param authTicket User Auth Ticket
	 * @param action 
	 * @return com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.payments.PaymentAction
	 */
	public com.mozu.api.contracts.commerceruntime.returns.Return performPaymentActionForReturn(com.mozu.api.contracts.commerceruntime.payments.PaymentAction action, String paymentId, String returnId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> client = com.mozu.api.clients.commerce.ReturnClient.performPaymentActionForReturnClient( action,  paymentId,  returnId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	Return return = return.CreatePaymentActionForReturn( action,  returnId, authTicket);
	 * </code></pre></p>
	 * @param returnId 
	 * @param authTicket User Auth Ticket
	 * @param action 
	 * @return com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.payments.PaymentAction
	 */
	public com.mozu.api.contracts.commerceruntime.returns.Return createPaymentActionForReturn(com.mozu.api.contracts.commerceruntime.payments.PaymentAction action, String returnId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> client = com.mozu.api.clients.commerce.ReturnClient.createPaymentActionForReturnClient( action,  returnId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	ReturnCollection returnCollection = return.PerformReturnActions( action, authTicket);
	 * </code></pre></p>
	 * @param authTicket User Auth Ticket
	 * @param action 
	 * @return com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	 * @see com.mozu.api.contracts.commerceruntime.returns.ReturnCollection
	 * @see com.mozu.api.contracts.commerceruntime.returns.ReturnAction
	 */
	public com.mozu.api.contracts.commerceruntime.returns.ReturnCollection performReturnActions(com.mozu.api.contracts.commerceruntime.returns.ReturnAction action, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.ReturnCollection> client = com.mozu.api.clients.commerce.ReturnClient.performReturnActionsClient( action, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	Return return = return.UpdateReturn( ret,  returnId, authTicket);
	 * </code></pre></p>
	 * @param returnId 
	 * @param authTicket User Auth Ticket
	 * @param ret 
	 * @return com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.returns.Return
	 * @see com.mozu.api.contracts.commerceruntime.returns.Return
	 */
	public com.mozu.api.contracts.commerceruntime.returns.Return updateReturn(com.mozu.api.contracts.commerceruntime.returns.Return ret, String returnId, AuthTicket authTicket) throws Exception
	{
		MozuClient<com.mozu.api.contracts.commerceruntime.returns.Return> client = com.mozu.api.clients.commerce.ReturnClient.updateReturnClient( ret,  returnId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();
		return client.getResult();

	}

	/**
	 * 
	 * <p><pre><code>
	 *	Return return = new Return();
	 *	return.DeleteReturn( returnId, authTicket);
	 * </code></pre></p>
	 * @param returnId 
	 * @param authTicket User Auth Ticket
	 * @return 
	 */
	public void deleteReturn(String returnId, AuthTicket authTicket) throws Exception
	{
		MozuClient client = com.mozu.api.clients.commerce.ReturnClient.deleteReturnClient( returnId, authTicket);
		client.setContext(_apiContext);
		client.executeRequest();

	}

}



